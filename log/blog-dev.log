2020-04-17 00:00:07.250 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? and b.published = true 
2020-04-17 00:00:08.267 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 2(Long)
2020-04-17 00:00:08.268 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 00:00:08.270  INFO 11096 --- [http-nio-8080-exec-4] com.by.controller.admin.BlogsController  : blog-input-1:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=http://img1.imgtn.bdimg.com/it/u=3755361689,3735771810&fm=11&gp=0.jpg, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-16 21:18:14, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=null)
2020-04-17 00:00:08.271  INFO 11096 --- [http-nio-8080-exec-4] com.by.controller.admin.BlogsController  : blog-input-2:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=http://img1.imgtn.bdimg.com/it/u=3755361689,3735771810&fm=11&gp=0.jpg, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-16 21:18:14, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=5)
2020-04-17 00:00:08.271 DEBUG 11096 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:00:08.271 DEBUG 11096 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:00:08.272 DEBUG 11096 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:00:08.273 DEBUG 11096 --- [http-nio-8080-exec-4] com.by.mapper.TagMapper.listTag          : ==>  Preparing: select * from t_tag 
2020-04-17 00:00:08.273 DEBUG 11096 --- [http-nio-8080-exec-4] com.by.mapper.TagMapper.listTag          : ==> Parameters: 
2020-04-17 00:00:08.274 DEBUG 11096 --- [http-nio-8080-exec-4] com.by.mapper.TagMapper.listTag          : <==      Total: 8
2020-04-17 00:01:54.031 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.published = true AND b.recommend = ? 
2020-04-17 00:01:54.041 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 0(Integer)
2020-04-17 00:01:54.042 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:01:58.764 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.published = true AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:01:58.766 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 6(Long), 1(Integer)
2020-04-17 00:01:58.768 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:01:58.771 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.published = true and b.type_id = ? and b.recommend = ? LIMIT ?, ? 
2020-04-17 00:01:58.771 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 6(Long), 1(Integer), 3(Integer), 3(Integer)
2020-04-17 00:01:58.772 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 1
2020-04-17 00:02:10.591 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.published = true AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:02:10.592 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 6(Long), 1(Integer)
2020-04-17 00:02:10.592 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:02:10.594 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.published = true and b.type_id = ? and b.recommend = ? LIMIT ? 
2020-04-17 00:02:10.595 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 6(Long), 1(Integer), 3(Integer)
2020-04-17 00:02:10.596 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 3
2020-04-17 00:02:19.260 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? and b.published = true 
2020-04-17 00:02:19.262 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 2(Long)
2020-04-17 00:02:19.273 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 00:02:19.285  INFO 11096 --- [http-nio-8080-exec-7] com.by.controller.admin.BlogsController  : blog-input-1:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=http://img1.imgtn.bdimg.com/it/u=3755361689,3735771810&fm=11&gp=0.jpg, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-16 21:18:14, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=null)
2020-04-17 00:02:19.313  INFO 11096 --- [http-nio-8080-exec-7] com.by.controller.admin.BlogsController  : blog-input-2:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=http://img1.imgtn.bdimg.com/it/u=3755361689,3735771810&fm=11&gp=0.jpg, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-16 21:18:14, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=5)
2020-04-17 00:02:19.315 DEBUG 11096 --- [http-nio-8080-exec-7] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:02:19.316 DEBUG 11096 --- [http-nio-8080-exec-7] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:02:19.316 DEBUG 11096 --- [http-nio-8080-exec-7] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:02:19.318 DEBUG 11096 --- [http-nio-8080-exec-7] com.by.mapper.TagMapper.listTag          : ==>  Preparing: select * from t_tag 
2020-04-17 00:02:19.318 DEBUG 11096 --- [http-nio-8080-exec-7] com.by.mapper.TagMapper.listTag          : ==> Parameters: 
2020-04-17 00:02:19.318 DEBUG 11096 --- [http-nio-8080-exec-7] com.by.mapper.TagMapper.listTag          : <==      Total: 8
2020-04-17 00:02:33.472 DEBUG 11096 --- [http-nio-8080-exec-8] com.by.mapper.TypeMapper.getType         : ==>  Preparing: select id,name from blog.t_type where id = ? 
2020-04-17 00:02:33.473 DEBUG 11096 --- [http-nio-8080-exec-8] com.by.mapper.TypeMapper.getType         : ==> Parameters: 6(Long)
2020-04-17 00:02:33.474 DEBUG 11096 --- [http-nio-8080-exec-8] com.by.mapper.TypeMapper.getType         : <==      Total: 1
2020-04-17 00:02:33.475 DEBUG 11096 --- [http-nio-8080-exec-8] com.by.mapper.TagMapper.listTagByList    : ==>  Preparing: select id,name from t_tag WHERE id in( ? ) 
2020-04-17 00:02:33.476 DEBUG 11096 --- [http-nio-8080-exec-8] com.by.mapper.TagMapper.listTagByList    : ==> Parameters: 5(Long)
2020-04-17 00:02:33.476 DEBUG 11096 --- [http-nio-8080-exec-8] com.by.mapper.TagMapper.listTagByList    : <==      Total: 1
2020-04-17 00:02:33.477 DEBUG 11096 --- [http-nio-8080-exec-8] com.by.mapper.BlogMapper.getBlog         : ==>  Preparing: select * from t_blog where id = ? and published = true 
2020-04-17 00:02:33.478 DEBUG 11096 --- [http-nio-8080-exec-8] com.by.mapper.BlogMapper.getBlog         : ==> Parameters: 2(Long)
2020-04-17 00:02:33.479 DEBUG 11096 --- [http-nio-8080-exec-8] com.by.mapper.BlogMapper.getBlog         : <==      Total: 1
2020-04-17 00:02:33.480  INFO 11096 --- [http-nio-8080-exec-8] com.by.service.BlogServiceImpl           : blog:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=http://img1.imgtn.bdimg.com/it/u=3755361689,3735771810&fm=11&gp=0.jpg, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-16 21:18:14, description=这是关于插入排序的讲解，一步一步理解插入排序, type=null, tags=[], user=null, comments=[], tagIds=null)
2020-04-17 00:02:33.480 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.updateBlogWithTags      : ==>  Preparing: update t_blog set description = ?,appreciation = ?,commentabled = ?,content = ?,create_time = ?,first_picture = ?,flag = ?, published = ?,recommend = ?,share_statement = ?,title = ?, update_time = ?,views = ?,type_id = ?,user_id = ? where id = ? 
2020-04-17 00:02:33.482 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.updateBlogWithTags      : ==> Parameters: 这是关于插入排序的讲解，一步一步理解插入排序(String), true(Boolean), true(Boolean), ```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```(String), 2020-04-16 21:16:22.0(Timestamp), https://pic.images.ac.cn/image/5e988196aa315(String), 原创(String), true(Boolean), true(Boolean), true(Boolean), 插入排序(String), 2020-04-17 00:02:33(String), 5(Integer), 6(Long), 1(Long), 2(Long)
2020-04-17 00:02:33.494 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.updateBlogWithTags      : <==    Updates: 1
2020-04-17 00:02:33.494 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.deleteBlogWithTags      : ==>  Preparing: delete from t_blog_tags where blog_id = ? 
2020-04-17 00:02:33.494 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.deleteBlogWithTags      : ==> Parameters: 2(Long)
2020-04-17 00:02:33.495 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.deleteBlogWithTags      : <==    Updates: 1
2020-04-17 00:02:33.495 DEBUG 11096 --- [http-nio-8080-exec-8] c.by.mapper.BlogMapper.saveBlogWithTags  : ==>  Preparing: insert into t_blog_tags(blog_id, tag_id) values (?,?) 
2020-04-17 00:02:33.496 DEBUG 11096 --- [http-nio-8080-exec-8] c.by.mapper.BlogMapper.saveBlogWithTags  : ==> Parameters: 2(Long), 5(Long)
2020-04-17 00:02:33.523 DEBUG 11096 --- [http-nio-8080-exec-8] c.by.mapper.BlogMapper.saveBlogWithTags  : <==    Updates: 1
2020-04-17 00:02:33.625  INFO 11096 --- [http-nio-8080-exec-8] com.by.controller.admin.BlogsController  : 成功：Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:02:33, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=User(id=1, username=zhouboyang, password=null, email=2423623805@qq.com, avatar=http://temp.im/50x50, type=1, createTime=Tue Apr 07 04:37:21 CST 2020, updateTime=Tue Apr 07 04:37:25 CST 2020, nickname=周博洋, blogs=[]), comments=[], tagIds=5)
2020-04-17 00:02:33.781 DEBUG 11096 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE b.published = true 
2020-04-17 00:02:33.837 DEBUG 11096 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 00:02:33.838 DEBUG 11096 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 00:02:33.839 DEBUG 11096 --- [http-nio-8080-exec-9] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 00:02:33.839 DEBUG 11096 --- [http-nio-8080-exec-9] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 00:02:33.844 DEBUG 11096 --- [http-nio-8080-exec-9] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 00:02:33.845 DEBUG 11096 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:02:33.845 DEBUG 11096 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:02:33.845 DEBUG 11096 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:02:42.262 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.published = true AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:02:42.263 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 6(Long), 1(Integer)
2020-04-17 00:02:42.263 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:02:42.264 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.published = true and b.type_id = ? and b.recommend = ? LIMIT ? 
2020-04-17 00:02:42.264 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 6(Long), 1(Integer), 3(Integer)
2020-04-17 00:02:42.265 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 3
2020-04-17 00:02:45.416 DEBUG 11096 --- [http-nio-8080-exec-3] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.published = true AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:02:45.416 DEBUG 11096 --- [http-nio-8080-exec-3] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 6(Long), 1(Integer)
2020-04-17 00:02:45.417 DEBUG 11096 --- [http-nio-8080-exec-3] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:02:45.418 DEBUG 11096 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.published = true and b.type_id = ? and b.recommend = ? LIMIT ? 
2020-04-17 00:02:45.418 DEBUG 11096 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 6(Long), 1(Integer), 3(Integer)
2020-04-17 00:02:45.419 DEBUG 11096 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 3
2020-04-17 00:02:46.246 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.published = true AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:02:46.246 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 6(Long), 1(Integer)
2020-04-17 00:02:46.247 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:02:46.248 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.published = true and b.type_id = ? and b.recommend = ? LIMIT ? 
2020-04-17 00:02:46.248 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 6(Long), 1(Integer), 3(Integer)
2020-04-17 00:02:46.249 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 3
2020-04-17 00:02:55.280 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? and b.published = true 
2020-04-17 00:02:55.291 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 2(Long)
2020-04-17 00:02:55.293 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 00:02:55.294  INFO 11096 --- [http-nio-8080-exec-4] com.by.controller.admin.BlogsController  : blog-input-1:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:02:33, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=null)
2020-04-17 00:02:55.295  INFO 11096 --- [http-nio-8080-exec-4] com.by.controller.admin.BlogsController  : blog-input-2:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:02:33, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=5)
2020-04-17 00:02:55.296 DEBUG 11096 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:02:55.296 DEBUG 11096 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:02:55.297 DEBUG 11096 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:02:55.298 DEBUG 11096 --- [http-nio-8080-exec-4] com.by.mapper.TagMapper.listTag          : ==>  Preparing: select * from t_tag 
2020-04-17 00:02:55.299 DEBUG 11096 --- [http-nio-8080-exec-4] com.by.mapper.TagMapper.listTag          : ==> Parameters: 
2020-04-17 00:02:55.300 DEBUG 11096 --- [http-nio-8080-exec-4] com.by.mapper.TagMapper.listTag          : <==      Total: 8
2020-04-17 00:02:58.542  INFO 11096 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 2])
2020-04-17 00:02:58.543 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 00:02:58.544 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 00:02:58.544 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 00:02:58.545 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ?, ? 
2020-04-17 00:02:58.545 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer), 3(Integer)
2020-04-17 00:02:58.576 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 1
2020-04-17 00:02:58.577 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 00:02:58.577 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 00:02:58.579 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 00:02:58.579 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 00:02:58.579 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 00:02:58.581 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 00:02:58.582 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 00:02:58.582 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 00:02:58.583 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 00:02:58.584  INFO 11096 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 00:02:58.584  INFO 11096 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Result : index
2020-04-17 00:03:07.990  INFO 11096 --- [http-nio-8080-exec-10] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 00:03:07.992 DEBUG 11096 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 00:03:07.992 DEBUG 11096 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 00:03:07.993 DEBUG 11096 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 00:03:07.995  INFO 11096 --- [http-nio-8080-exec-10] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 00:03:07.995  INFO 11096 --- [http-nio-8080-exec-10] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 00:03:16.372 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.published = true AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:03:16.373 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 6(Long), 1(Integer)
2020-04-17 00:03:16.374 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:03:16.375 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.published = true and b.type_id = ? and b.recommend = ? LIMIT ? 
2020-04-17 00:03:16.375 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 6(Long), 1(Integer), 3(Integer)
2020-04-17 00:03:16.376 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 3
2020-04-17 00:03:19.430 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.published = true AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:03:19.430 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 6(Long), 0(Integer)
2020-04-17 00:03:19.431 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:03:21.384 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.published = true AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:03:21.385 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 6(Long), 1(Integer)
2020-04-17 00:03:21.386 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:03:21.386 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.published = true and b.type_id = ? and b.recommend = ? LIMIT ? 
2020-04-17 00:03:21.387 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 6(Long), 1(Integer), 3(Integer)
2020-04-17 00:03:21.388 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 3
2020-04-17 00:03:49.865  INFO 11096 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 00:03:49.901 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 00:03:49.901 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 00:03:49.902 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 00:03:49.903 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 00:03:49.903 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 00:03:49.905 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 00:03:49.906 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 00:03:49.906 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 00:03:49.907 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 00:03:49.907 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 00:03:49.907 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 00:03:49.908 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 00:03:49.909 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 00:03:49.909 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 00:03:49.911 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 00:03:49.911  INFO 11096 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 00:03:49.912  INFO 11096 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : Result : index
2020-04-17 00:03:50.549  INFO 11096 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 00:03:50.550 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 00:03:50.551 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 00:03:50.551 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 00:03:50.552  INFO 11096 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 00:03:50.552  INFO 11096 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 00:03:55.896 DEBUG 11096 --- [http-nio-8080-exec-10] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? and b.published = true 
2020-04-17 00:03:55.897 DEBUG 11096 --- [http-nio-8080-exec-10] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 1(Long)
2020-04-17 00:03:55.899 DEBUG 11096 --- [http-nio-8080-exec-10] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 00:03:55.900  INFO 11096 --- [http-nio-8080-exec-10] com.by.controller.admin.BlogsController  : blog-input-1:Blog(id=1, title=冒泡排序, content=```java
public class BubbleSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int arr[] = {3,9,-1,10,-2};
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		System.out.println(Arrays.toString(arr));
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
		bubbleSort(arr);
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		/**
		 * 
		int temp = 0;
		//第一趟排序，就是将最大的排在最后
		for(int j=0;j<arr.length-1-0;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第一趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第二趟排序，就是将第二大的排在倒数第二位
		for(int j=0;j<arr.length-1-1;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第二趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第三趟排序，就是将第三大的排在倒数第三位
		for(int j=0;j<arr.length-1-2;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第三趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第四趟排序，就是将第四大的排在倒数第四位
		for(int j=0;j<arr.length-1-3;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第四趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		System.out.println("排序结果");
		System.out.println(Arrays.toString(arr));
		*/
		
		
	}
	
	public static void bubbleSort(int[] arr)
	{
		//冒泡排序的时间复杂度O(n^2)
		int temp = 0;
		boolean flag = false;//没有发生交换，没有发生交换说明已经有序
		for(int i=0;i<arr.length-1;i++)
		{	
			//减i的原因是每次排完最大的在最后，也就是后面逐渐有序，把大的往后排，从后依次向前有序
			for(int j=0;j<arr.length-1-i;j++)
			{
				if(arr[j]>arr[j+1])
				{
					flag = true;
					temp = arr[j];
					arr[j] = arr[j+1];
					arr[j+1] = temp;
				}
			}			
			//每一趟排序后做一次判断，如果一趟不会发生交换则以后都不会发生交换
			if(!flag)
			{
				break;
			}else{
//				System.out.println("第"+(i+1)+"趟排序后的数组");
//				System.out.println(Arrays.toString(arr));
				flag = false;//发生了交换就重置flag进行下次判断
			}
		}
				
	}
	

}
```, firstPicture=https://pic.images.ac.cn/image/5e987ff6927b8, flag=原创, views=4, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=Thu Apr 16 20:57:14 CST 2020, updateTime=2020-04-16 23:56:05, description=这是关于冒泡排序算法的讲解，有助于理解冒泡排序的本质。, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=4, name=冒泡排序, blogs=[])], user=null, comments=[], tagIds=null)
2020-04-17 00:03:55.900  INFO 11096 --- [http-nio-8080-exec-10] com.by.controller.admin.BlogsController  : blog-input-2:Blog(id=1, title=冒泡排序, content=```java
public class BubbleSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int arr[] = {3,9,-1,10,-2};
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		System.out.println(Arrays.toString(arr));
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
		bubbleSort(arr);
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		/**
		 * 
		int temp = 0;
		//第一趟排序，就是将最大的排在最后
		for(int j=0;j<arr.length-1-0;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第一趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第二趟排序，就是将第二大的排在倒数第二位
		for(int j=0;j<arr.length-1-1;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第二趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第三趟排序，就是将第三大的排在倒数第三位
		for(int j=0;j<arr.length-1-2;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第三趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第四趟排序，就是将第四大的排在倒数第四位
		for(int j=0;j<arr.length-1-3;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第四趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		System.out.println("排序结果");
		System.out.println(Arrays.toString(arr));
		*/
		
		
	}
	
	public static void bubbleSort(int[] arr)
	{
		//冒泡排序的时间复杂度O(n^2)
		int temp = 0;
		boolean flag = false;//没有发生交换，没有发生交换说明已经有序
		for(int i=0;i<arr.length-1;i++)
		{	
			//减i的原因是每次排完最大的在最后，也就是后面逐渐有序，把大的往后排，从后依次向前有序
			for(int j=0;j<arr.length-1-i;j++)
			{
				if(arr[j]>arr[j+1])
				{
					flag = true;
					temp = arr[j];
					arr[j] = arr[j+1];
					arr[j+1] = temp;
				}
			}			
			//每一趟排序后做一次判断，如果一趟不会发生交换则以后都不会发生交换
			if(!flag)
			{
				break;
			}else{
//				System.out.println("第"+(i+1)+"趟排序后的数组");
//				System.out.println(Arrays.toString(arr));
				flag = false;//发生了交换就重置flag进行下次判断
			}
		}
				
	}
	

}
```, firstPicture=https://pic.images.ac.cn/image/5e987ff6927b8, flag=原创, views=4, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=Thu Apr 16 20:57:14 CST 2020, updateTime=2020-04-16 23:56:05, description=这是关于冒泡排序算法的讲解，有助于理解冒泡排序的本质。, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=4, name=冒泡排序, blogs=[])], user=null, comments=[], tagIds=4)
2020-04-17 00:03:55.901 DEBUG 11096 --- [http-nio-8080-exec-10] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:03:55.901 DEBUG 11096 --- [http-nio-8080-exec-10] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:03:55.903 DEBUG 11096 --- [http-nio-8080-exec-10] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:03:55.905 DEBUG 11096 --- [http-nio-8080-exec-10] com.by.mapper.TagMapper.listTag          : ==>  Preparing: select * from t_tag 
2020-04-17 00:03:55.905 DEBUG 11096 --- [http-nio-8080-exec-10] com.by.mapper.TagMapper.listTag          : ==> Parameters: 
2020-04-17 00:03:55.907 DEBUG 11096 --- [http-nio-8080-exec-10] com.by.mapper.TagMapper.listTag          : <==      Total: 8
2020-04-17 00:04:02.461 DEBUG 11096 --- [http-nio-8080-exec-8] com.by.mapper.TypeMapper.getType         : ==>  Preparing: select id,name from blog.t_type where id = ? 
2020-04-17 00:04:02.462 DEBUG 11096 --- [http-nio-8080-exec-8] com.by.mapper.TypeMapper.getType         : ==> Parameters: 6(Long)
2020-04-17 00:04:02.462 DEBUG 11096 --- [http-nio-8080-exec-8] com.by.mapper.TypeMapper.getType         : <==      Total: 1
2020-04-17 00:04:02.466 DEBUG 11096 --- [http-nio-8080-exec-8] com.by.mapper.TagMapper.listTagByList    : ==>  Preparing: select id,name from t_tag WHERE id in( ? ) 
2020-04-17 00:04:02.466 DEBUG 11096 --- [http-nio-8080-exec-8] com.by.mapper.TagMapper.listTagByList    : ==> Parameters: 4(Long)
2020-04-17 00:04:02.467 DEBUG 11096 --- [http-nio-8080-exec-8] com.by.mapper.TagMapper.listTagByList    : <==      Total: 1
2020-04-17 00:04:02.469 DEBUG 11096 --- [http-nio-8080-exec-8] com.by.mapper.BlogMapper.getBlog         : ==>  Preparing: select * from t_blog where id = ? and published = true 
2020-04-17 00:04:02.470 DEBUG 11096 --- [http-nio-8080-exec-8] com.by.mapper.BlogMapper.getBlog         : ==> Parameters: 1(Long)
2020-04-17 00:04:02.471 DEBUG 11096 --- [http-nio-8080-exec-8] com.by.mapper.BlogMapper.getBlog         : <==      Total: 1
2020-04-17 00:04:02.472  INFO 11096 --- [http-nio-8080-exec-8] com.by.service.BlogServiceImpl           : blog:Blog(id=1, title=冒泡排序, content=```java
public class BubbleSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int arr[] = {3,9,-1,10,-2};
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		System.out.println(Arrays.toString(arr));
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
		bubbleSort(arr);
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		/**
		 * 
		int temp = 0;
		//第一趟排序，就是将最大的排在最后
		for(int j=0;j<arr.length-1-0;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第一趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第二趟排序，就是将第二大的排在倒数第二位
		for(int j=0;j<arr.length-1-1;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第二趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第三趟排序，就是将第三大的排在倒数第三位
		for(int j=0;j<arr.length-1-2;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第三趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第四趟排序，就是将第四大的排在倒数第四位
		for(int j=0;j<arr.length-1-3;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第四趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		System.out.println("排序结果");
		System.out.println(Arrays.toString(arr));
		*/
		
		
	}
	
	public static void bubbleSort(int[] arr)
	{
		//冒泡排序的时间复杂度O(n^2)
		int temp = 0;
		boolean flag = false;//没有发生交换，没有发生交换说明已经有序
		for(int i=0;i<arr.length-1;i++)
		{	
			//减i的原因是每次排完最大的在最后，也就是后面逐渐有序，把大的往后排，从后依次向前有序
			for(int j=0;j<arr.length-1-i;j++)
			{
				if(arr[j]>arr[j+1])
				{
					flag = true;
					temp = arr[j];
					arr[j] = arr[j+1];
					arr[j+1] = temp;
				}
			}			
			//每一趟排序后做一次判断，如果一趟不会发生交换则以后都不会发生交换
			if(!flag)
			{
				break;
			}else{
//				System.out.println("第"+(i+1)+"趟排序后的数组");
//				System.out.println(Arrays.toString(arr));
				flag = false;//发生了交换就重置flag进行下次判断
			}
		}
				
	}
	

}
```, firstPicture=https://pic.images.ac.cn/image/5e987ff6927b8, flag=原创, views=4, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=Thu Apr 16 20:57:14 CST 2020, updateTime=2020-04-16 23:56:05, description=这是关于冒泡排序算法的讲解，有助于理解冒泡排序的本质。, type=null, tags=[], user=null, comments=[], tagIds=null)
2020-04-17 00:04:02.472 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.updateBlogWithTags      : ==>  Preparing: update t_blog set description = ?,appreciation = ?,commentabled = ?,content = ?,create_time = ?,first_picture = ?,flag = ?, published = ?,recommend = ?,share_statement = ?,title = ?, update_time = ?,views = ?,type_id = ?,user_id = ? where id = ? 
2020-04-17 00:04:02.517 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.updateBlogWithTags      : ==> Parameters: 这是关于冒泡排序算法的讲解，有助于理解冒泡排序的本质。(String), true(Boolean), true(Boolean), ```java
public class BubbleSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int arr[] = {3,9,-1,10,-2};
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		System.out.println(Arrays.toString(arr));
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
		bubbleSort(arr);
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		/**
		 * 
		int temp = 0;
		//第一趟排序，就是将最大的排在最后
		for(int j=0;j<arr.length-1-0;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第一趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第二趟排序，就是将第二大的排在倒数第二位
		for(int j=0;j<arr.length-1-1;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第二趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第三趟排序，就是将第三大的排在倒数第三位
		for(int j=0;j<arr.length-1-2;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第三趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第四趟排序，就是将第四大的排在倒数第四位
		for(int j=0;j<arr.length-1-3;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第四趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		System.out.println("排序结果");
		System.out.println(Arrays.toString(arr));
		*/
		
		
	}
	
	public static void bubbleSort(int[] arr)
	{
		//冒泡排序的时间复杂度O(n^2)
		int temp = 0;
		boolean flag = false;//没有发生交换，没有发生交换说明已经有序
		for(int i=0;i<arr.length-1;i++)
		{	
			//减i的原因是每次排完最大的在最后，也就是后面逐渐有序，把大的往后排，从后依次向前有序
			for(int j=0;j<arr.length-1-i;j++)
			{
				if(arr[j]>arr[j+1])
				{
					flag = true;
					temp = arr[j];
					arr[j] = arr[j+1];
					arr[j+1] = temp;
				}
			}			
			//每一趟排序后做一次判断，如果一趟不会发生交换则以后都不会发生交换
			if(!flag)
			{
				break;
			}else{
//				System.out.println("第"+(i+1)+"趟排序后的数组");
//				System.out.println(Arrays.toString(arr));
				flag = false;//发生了交换就重置flag进行下次判断
			}
		}
				
	}
	

}
```(String), 2020-04-16 20:57:14.0(Timestamp), https://pic.images.ac.cn/image/5e987ff6927b8(String), 原创(String), false(Boolean), true(Boolean), true(Boolean), 冒泡排序(String), 2020-04-17 00:04:02(String), 4(Integer), 6(Long), 1(Long), 1(Long)
2020-04-17 00:04:02.519 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.updateBlogWithTags      : <==    Updates: 1
2020-04-17 00:04:02.519 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.deleteBlogWithTags      : ==>  Preparing: delete from t_blog_tags where blog_id = ? 
2020-04-17 00:04:02.519 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.deleteBlogWithTags      : ==> Parameters: 1(Long)
2020-04-17 00:04:02.520 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.deleteBlogWithTags      : <==    Updates: 1
2020-04-17 00:04:02.532 DEBUG 11096 --- [http-nio-8080-exec-8] c.by.mapper.BlogMapper.saveBlogWithTags  : ==>  Preparing: insert into t_blog_tags(blog_id, tag_id) values (?,?) 
2020-04-17 00:04:02.532 DEBUG 11096 --- [http-nio-8080-exec-8] c.by.mapper.BlogMapper.saveBlogWithTags  : ==> Parameters: 1(Long), 4(Long)
2020-04-17 00:04:02.562 DEBUG 11096 --- [http-nio-8080-exec-8] c.by.mapper.BlogMapper.saveBlogWithTags  : <==    Updates: 1
2020-04-17 00:04:02.642  INFO 11096 --- [http-nio-8080-exec-8] com.by.controller.admin.BlogsController  : 成功：Blog(id=1, title=冒泡排序, content=```java
public class BubbleSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int arr[] = {3,9,-1,10,-2};
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		System.out.println(Arrays.toString(arr));
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
		bubbleSort(arr);
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		/**
		 * 
		int temp = 0;
		//第一趟排序，就是将最大的排在最后
		for(int j=0;j<arr.length-1-0;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第一趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第二趟排序，就是将第二大的排在倒数第二位
		for(int j=0;j<arr.length-1-1;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第二趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第三趟排序，就是将第三大的排在倒数第三位
		for(int j=0;j<arr.length-1-2;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第三趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第四趟排序，就是将第四大的排在倒数第四位
		for(int j=0;j<arr.length-1-3;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第四趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		System.out.println("排序结果");
		System.out.println(Arrays.toString(arr));
		*/
		
		
	}
	
	public static void bubbleSort(int[] arr)
	{
		//冒泡排序的时间复杂度O(n^2)
		int temp = 0;
		boolean flag = false;//没有发生交换，没有发生交换说明已经有序
		for(int i=0;i<arr.length-1;i++)
		{	
			//减i的原因是每次排完最大的在最后，也就是后面逐渐有序，把大的往后排，从后依次向前有序
			for(int j=0;j<arr.length-1-i;j++)
			{
				if(arr[j]>arr[j+1])
				{
					flag = true;
					temp = arr[j];
					arr[j] = arr[j+1];
					arr[j+1] = temp;
				}
			}			
			//每一趟排序后做一次判断，如果一趟不会发生交换则以后都不会发生交换
			if(!flag)
			{
				break;
			}else{
//				System.out.println("第"+(i+1)+"趟排序后的数组");
//				System.out.println(Arrays.toString(arr));
				flag = false;//发生了交换就重置flag进行下次判断
			}
		}
				
	}
	

}
```, firstPicture=https://pic.images.ac.cn/image/5e987ff6927b8, flag=原创, views=4, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=Thu Apr 16 20:57:14 CST 2020, updateTime=2020-04-17 00:04:02, description=这是关于冒泡排序算法的讲解，有助于理解冒泡排序的本质。, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=4, name=冒泡排序, blogs=[])], user=User(id=1, username=zhouboyang, password=null, email=2423623805@qq.com, avatar=http://temp.im/50x50, type=1, createTime=Tue Apr 07 04:37:21 CST 2020, updateTime=Tue Apr 07 04:37:25 CST 2020, nickname=周博洋, blogs=[]), comments=[], tagIds=4)
2020-04-17 00:04:02.693 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE b.published = true 
2020-04-17 00:04:02.693 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 00:04:02.694 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 00:04:02.694 DEBUG 11096 --- [http-nio-8080-exec-7] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 00:04:02.695 DEBUG 11096 --- [http-nio-8080-exec-7] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 00:04:02.696 DEBUG 11096 --- [http-nio-8080-exec-7] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 00:04:02.697 DEBUG 11096 --- [http-nio-8080-exec-7] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:04:02.697 DEBUG 11096 --- [http-nio-8080-exec-7] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:04:02.698 DEBUG 11096 --- [http-nio-8080-exec-7] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:04:13.438 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.published = true AND b.recommend = ? 
2020-04-17 00:04:13.439 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 1(Integer)
2020-04-17 00:04:13.440 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:04:13.441 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.published = true and b.recommend = ? LIMIT ? 
2020-04-17 00:04:13.441 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 1(Integer), 3(Integer)
2020-04-17 00:04:13.442 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 3
2020-04-17 00:04:56.297  INFO 11096 --- [http-nio-8080-exec-4] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 00:04:56.300 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 00:04:56.300 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 00:04:56.301 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 00:04:56.303 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 00:04:56.303 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 00:04:56.317 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 00:04:56.318 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 00:04:56.318 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 00:04:56.319 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 3
2020-04-17 00:04:56.320 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 00:04:56.320 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 00:04:56.323 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 5
2020-04-17 00:04:56.324 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 00:04:56.324 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 00:04:56.326 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 00:04:56.327  INFO 11096 --- [http-nio-8080-exec-4] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 00:04:56.327  INFO 11096 --- [http-nio-8080-exec-4] com.by.aspect.LogAspect                  : Result : index
2020-04-17 00:04:57.037  INFO 11096 --- [http-nio-8080-exec-2] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 00:04:57.038 DEBUG 11096 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 00:04:57.038 DEBUG 11096 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 00:04:57.040 DEBUG 11096 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 00:04:57.041  INFO 11096 --- [http-nio-8080-exec-2] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 00:04:57.041  INFO 11096 --- [http-nio-8080-exec-2] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 00:05:09.269 DEBUG 11096 --- [http-nio-8080-exec-3] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? and b.published = true 
2020-04-17 00:05:09.270 DEBUG 11096 --- [http-nio-8080-exec-3] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 2(Long)
2020-04-17 00:05:09.271 DEBUG 11096 --- [http-nio-8080-exec-3] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 00:05:09.272  INFO 11096 --- [http-nio-8080-exec-3] com.by.controller.admin.BlogsController  : blog-input-1:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:02:33, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=null)
2020-04-17 00:05:09.272  INFO 11096 --- [http-nio-8080-exec-3] com.by.controller.admin.BlogsController  : blog-input-2:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:02:33, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=5)
2020-04-17 00:05:09.273 DEBUG 11096 --- [http-nio-8080-exec-3] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:05:09.273 DEBUG 11096 --- [http-nio-8080-exec-3] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:05:09.274 DEBUG 11096 --- [http-nio-8080-exec-3] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:05:09.276 DEBUG 11096 --- [http-nio-8080-exec-3] com.by.mapper.TagMapper.listTag          : ==>  Preparing: select * from t_tag 
2020-04-17 00:05:09.276 DEBUG 11096 --- [http-nio-8080-exec-3] com.by.mapper.TagMapper.listTag          : ==> Parameters: 
2020-04-17 00:05:09.277 DEBUG 11096 --- [http-nio-8080-exec-3] com.by.mapper.TagMapper.listTag          : <==      Total: 8
2020-04-17 00:05:14.125 DEBUG 11096 --- [http-nio-8080-exec-7] com.by.mapper.TypeMapper.getType         : ==>  Preparing: select id,name from blog.t_type where id = ? 
2020-04-17 00:05:14.125 DEBUG 11096 --- [http-nio-8080-exec-7] com.by.mapper.TypeMapper.getType         : ==> Parameters: 6(Long)
2020-04-17 00:05:14.126 DEBUG 11096 --- [http-nio-8080-exec-7] com.by.mapper.TypeMapper.getType         : <==      Total: 1
2020-04-17 00:05:14.127 DEBUG 11096 --- [http-nio-8080-exec-7] com.by.mapper.TagMapper.listTagByList    : ==>  Preparing: select id,name from t_tag WHERE id in( ? ) 
2020-04-17 00:05:14.128 DEBUG 11096 --- [http-nio-8080-exec-7] com.by.mapper.TagMapper.listTagByList    : ==> Parameters: 5(Long)
2020-04-17 00:05:14.129 DEBUG 11096 --- [http-nio-8080-exec-7] com.by.mapper.TagMapper.listTagByList    : <==      Total: 1
2020-04-17 00:05:14.131 DEBUG 11096 --- [http-nio-8080-exec-7] com.by.mapper.BlogMapper.getBlog         : ==>  Preparing: select * from t_blog where id = ? and published = true 
2020-04-17 00:05:14.131 DEBUG 11096 --- [http-nio-8080-exec-7] com.by.mapper.BlogMapper.getBlog         : ==> Parameters: 2(Long)
2020-04-17 00:05:14.132 DEBUG 11096 --- [http-nio-8080-exec-7] com.by.mapper.BlogMapper.getBlog         : <==      Total: 1
2020-04-17 00:05:14.132  INFO 11096 --- [http-nio-8080-exec-7] com.by.service.BlogServiceImpl           : blog:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:02:33, description=这是关于插入排序的讲解，一步一步理解插入排序, type=null, tags=[], user=null, comments=[], tagIds=null)
2020-04-17 00:05:14.132 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.updateBlogWithTags      : ==>  Preparing: update t_blog set description = ?,appreciation = ?,commentabled = ?,content = ?,create_time = ?,first_picture = ?,flag = ?, published = ?,recommend = ?,share_statement = ?,title = ?, update_time = ?,views = ?,type_id = ?,user_id = ? where id = ? 
2020-04-17 00:05:14.133 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.updateBlogWithTags      : ==> Parameters: 这是关于插入排序的讲解，一步一步理解插入排序(String), true(Boolean), true(Boolean), ```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```(String), 2020-04-16 21:16:22.0(Timestamp), https://pic.images.ac.cn/image/5e988196aa315(String), 原创(String), true(Boolean), true(Boolean), true(Boolean), 插入排序(String), 2020-04-17 00:05:14(String), 5(Integer), 6(Long), 1(Long), 2(Long)
2020-04-17 00:05:14.134 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.updateBlogWithTags      : <==    Updates: 1
2020-04-17 00:05:14.134 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.deleteBlogWithTags      : ==>  Preparing: delete from t_blog_tags where blog_id = ? 
2020-04-17 00:05:14.134 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.deleteBlogWithTags      : ==> Parameters: 2(Long)
2020-04-17 00:05:14.135 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.deleteBlogWithTags      : <==    Updates: 1
2020-04-17 00:05:14.135 DEBUG 11096 --- [http-nio-8080-exec-7] c.by.mapper.BlogMapper.saveBlogWithTags  : ==>  Preparing: insert into t_blog_tags(blog_id, tag_id) values (?,?) 
2020-04-17 00:05:14.136 DEBUG 11096 --- [http-nio-8080-exec-7] c.by.mapper.BlogMapper.saveBlogWithTags  : ==> Parameters: 2(Long), 5(Long)
2020-04-17 00:05:14.150 DEBUG 11096 --- [http-nio-8080-exec-7] c.by.mapper.BlogMapper.saveBlogWithTags  : <==    Updates: 1
2020-04-17 00:05:14.268  INFO 11096 --- [http-nio-8080-exec-7] com.by.controller.admin.BlogsController  : 成功：Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:05:14, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=User(id=1, username=zhouboyang, password=null, email=2423623805@qq.com, avatar=http://temp.im/50x50, type=1, createTime=Tue Apr 07 04:37:21 CST 2020, updateTime=Tue Apr 07 04:37:25 CST 2020, nickname=周博洋, blogs=[]), comments=[], tagIds=5)
2020-04-17 00:05:14.273 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE b.published = true 
2020-04-17 00:05:14.274 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 00:05:14.274 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 00:05:14.275 DEBUG 11096 --- [http-nio-8080-exec-6] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 00:05:14.275 DEBUG 11096 --- [http-nio-8080-exec-6] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 00:05:14.276 DEBUG 11096 --- [http-nio-8080-exec-6] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 00:05:14.277 DEBUG 11096 --- [http-nio-8080-exec-6] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:05:14.277 DEBUG 11096 --- [http-nio-8080-exec-6] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:05:14.278 DEBUG 11096 --- [http-nio-8080-exec-6] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:05:22.748  INFO 11096 --- [http-nio-8080-exec-4] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 00:05:22.750 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 00:05:22.750 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 00:05:22.751 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 00:05:22.752 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 00:05:22.752 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 00:05:22.753 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 00:05:22.754 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 00:05:22.755 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 00:05:22.756 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 3
2020-04-17 00:05:22.756 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 00:05:22.756 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 00:05:22.757 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 5
2020-04-17 00:05:22.759 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 00:05:22.759 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 00:05:22.760 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 00:05:22.761  INFO 11096 --- [http-nio-8080-exec-4] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 00:05:22.762  INFO 11096 --- [http-nio-8080-exec-4] com.by.aspect.LogAspect                  : Result : index
2020-04-17 00:05:23.306  INFO 11096 --- [http-nio-8080-exec-10] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 00:05:23.306 DEBUG 11096 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 00:05:23.307 DEBUG 11096 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 00:05:23.308 DEBUG 11096 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 00:05:23.310  INFO 11096 --- [http-nio-8080-exec-10] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 00:05:23.310  INFO 11096 --- [http-nio-8080-exec-10] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 00:05:32.051 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.published = true AND b.recommend = ? 
2020-04-17 00:05:32.051 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 0(Integer)
2020-04-17 00:05:32.052 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:05:33.066 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.published = true AND b.recommend = ? 
2020-04-17 00:05:33.066 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 1(Integer)
2020-04-17 00:05:33.067 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:05:33.067 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.published = true and b.recommend = ? LIMIT ? 
2020-04-17 00:05:33.068 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 1(Integer), 3(Integer)
2020-04-17 00:05:33.069 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 3
2020-04-17 00:05:36.137 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.published = true AND b.recommend = ? 
2020-04-17 00:05:36.138 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 1(Integer)
2020-04-17 00:05:36.139 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:05:36.141 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.published = true and b.recommend = ? LIMIT ? 
2020-04-17 00:05:36.142 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 1(Integer), 3(Integer)
2020-04-17 00:05:36.143 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 3
2020-04-17 00:05:40.578 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.published = true AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:05:40.578 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 6(Long), 1(Integer)
2020-04-17 00:05:40.579 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:05:40.580 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.published = true and b.type_id = ? and b.recommend = ? LIMIT ? 
2020-04-17 00:05:40.581 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 6(Long), 1(Integer), 3(Integer)
2020-04-17 00:05:40.582 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 3
2020-04-17 00:05:44.468 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.published = true AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:05:44.469 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 6(Long), 0(Integer)
2020-04-17 00:05:44.470 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:05:47.454 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.published = true AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:05:47.456 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 6(Long), 1(Integer)
2020-04-17 00:05:47.457 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:05:47.458 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.published = true and b.type_id = ? and b.recommend = ? LIMIT ? 
2020-04-17 00:05:47.458 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 6(Long), 1(Integer), 3(Integer)
2020-04-17 00:05:47.459 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 3
2020-04-17 00:05:49.870 DEBUG 11096 --- [http-nio-8080-exec-2] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.published = true AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:05:49.871 DEBUG 11096 --- [http-nio-8080-exec-2] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 6(Long), 0(Integer)
2020-04-17 00:05:49.872 DEBUG 11096 --- [http-nio-8080-exec-2] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:06:01.320 DEBUG 11096 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE b.published = true 
2020-04-17 00:06:01.321 DEBUG 11096 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 00:06:01.321 DEBUG 11096 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 00:06:01.322 DEBUG 11096 --- [http-nio-8080-exec-9] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 00:06:01.323 DEBUG 11096 --- [http-nio-8080-exec-9] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 00:06:01.323 DEBUG 11096 --- [http-nio-8080-exec-9] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 00:06:01.324 DEBUG 11096 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:06:01.324 DEBUG 11096 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:06:01.325 DEBUG 11096 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:06:06.991 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.published = true AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:06:06.992 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 6(Long), 0(Integer)
2020-04-17 00:06:06.993 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:06:12.302 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.published = true AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:06:12.302 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 6(Long), 0(Integer)
2020-04-17 00:06:12.303 DEBUG 11096 --- [http-nio-8080-exec-6] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:06:13.055 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.published = true AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:06:13.055 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 6(Long), 0(Integer)
2020-04-17 00:06:13.057 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:06:14.692 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE b.published = true 
2020-04-17 00:06:14.693 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 00:06:14.694 DEBUG 11096 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 00:06:14.695 DEBUG 11096 --- [http-nio-8080-exec-1] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 00:06:14.696 DEBUG 11096 --- [http-nio-8080-exec-1] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 00:06:14.698 DEBUG 11096 --- [http-nio-8080-exec-1] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 00:06:14.700 DEBUG 11096 --- [http-nio-8080-exec-1] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:06:14.701 DEBUG 11096 --- [http-nio-8080-exec-1] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:06:14.702 DEBUG 11096 --- [http-nio-8080-exec-1] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:06:21.638 DEBUG 11096 --- [http-nio-8080-exec-10] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.published = true AND b.recommend = ? 
2020-04-17 00:06:21.639 DEBUG 11096 --- [http-nio-8080-exec-10] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 0(Integer)
2020-04-17 00:06:21.642 DEBUG 11096 --- [http-nio-8080-exec-10] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:06:23.707 DEBUG 11096 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE b.published = true 
2020-04-17 00:06:23.707 DEBUG 11096 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 00:06:23.708 DEBUG 11096 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 00:06:23.709 DEBUG 11096 --- [http-nio-8080-exec-3] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 00:06:23.709 DEBUG 11096 --- [http-nio-8080-exec-3] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 00:06:23.710 DEBUG 11096 --- [http-nio-8080-exec-3] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 00:06:23.711 DEBUG 11096 --- [http-nio-8080-exec-3] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:06:23.711 DEBUG 11096 --- [http-nio-8080-exec-3] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:06:23.712 DEBUG 11096 --- [http-nio-8080-exec-3] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:06:30.361 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.published = true AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:06:30.362 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 6(Long), 0(Integer)
2020-04-17 00:06:30.364 DEBUG 11096 --- [http-nio-8080-exec-5] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:06:32.028 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE b.published = true 
2020-04-17 00:06:32.029 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 00:06:32.030 DEBUG 11096 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 00:06:32.031 DEBUG 11096 --- [http-nio-8080-exec-4] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 00:06:32.031 DEBUG 11096 --- [http-nio-8080-exec-4] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 00:06:32.032 DEBUG 11096 --- [http-nio-8080-exec-4] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 00:06:32.034 DEBUG 11096 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:06:32.034 DEBUG 11096 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:06:32.035 DEBUG 11096 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:06:37.231 DEBUG 11096 --- [http-nio-8080-exec-10] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.published = true AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:06:37.232 DEBUG 11096 --- [http-nio-8080-exec-10] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 6(Long), 1(Integer)
2020-04-17 00:06:37.232 DEBUG 11096 --- [http-nio-8080-exec-10] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:06:37.234 DEBUG 11096 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.published = true and b.type_id = ? and b.recommend = ? LIMIT ? 
2020-04-17 00:06:37.234 DEBUG 11096 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 6(Long), 1(Integer), 3(Integer)
2020-04-17 00:06:37.236 DEBUG 11096 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 3
2020-04-17 00:06:47.708 DEBUG 11096 --- [http-nio-8080-exec-3] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.published = true AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:06:47.709 DEBUG 11096 --- [http-nio-8080-exec-3] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 6(Long), 1(Integer)
2020-04-17 00:06:47.710 DEBUG 11096 --- [http-nio-8080-exec-3] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:06:47.711 DEBUG 11096 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.published = true and b.type_id = ? and b.recommend = ? LIMIT ? 
2020-04-17 00:06:47.712 DEBUG 11096 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 6(Long), 1(Integer), 3(Integer)
2020-04-17 00:06:47.713 DEBUG 11096 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 3
2020-04-17 00:06:50.214 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.published = true AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:06:50.214 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 6(Long), 1(Integer)
2020-04-17 00:06:50.216 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:06:50.218 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.published = true and b.type_id = ? and b.recommend = ? LIMIT ? 
2020-04-17 00:06:50.218 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 6(Long), 1(Integer), 3(Integer)
2020-04-17 00:06:50.220 DEBUG 11096 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 3
2020-04-17 00:07:17.946 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.published = true AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:07:17.947 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 6(Long), 0(Integer)
2020-04-17 00:07:17.948 DEBUG 11096 --- [http-nio-8080-exec-7] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:24:01.123  INFO 2276 --- [main] com.by.BlogApplication                   : Starting BlogApplication on SD-20190630IDLV with PID 2276 (F:\Project\blog\target\classes started by Administrator in F:\Project\blog)
2020-04-17 00:24:01.158 DEBUG 2276 --- [main] com.by.BlogApplication                   : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 00:24:01.158  INFO 2276 --- [main] com.by.BlogApplication                   : The following profiles are active: dev
2020-04-17 00:24:07.433  INFO 2276 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-17 00:24:07.466  INFO 2276 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-17 00:24:07.466  INFO 2276 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-17 00:24:08.111  INFO 2276 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-17 00:24:08.111  INFO 2276 --- [main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 6563 ms
2020-04-17 00:24:12.537  INFO 2276 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 00:24:12.852  INFO 2276 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 00:24:14.550  INFO 2276 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-17 00:24:14.554  INFO 2276 --- [main] com.by.BlogApplication                   : Started BlogApplication in 23.891 seconds (JVM running for 90.095)
2020-04-17 00:24:23.154  INFO 2276 --- [http-nio-8080-exec-2] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1587011901,1587014773,1587017022; Hm_lpvt_38911ce56b435d67224d876856bc0eb0=1587046402; monitor_count=1648; JSESSIONID=30527D6701616E3B21CCE9B8EFF044F0] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-17 00:24:23.162  INFO 2276 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-17 00:24:23.163  INFO 2276 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-17 00:24:23.179  INFO 2276 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 16 ms
2020-04-17 00:24:36.751  INFO 2276 --- [http-nio-8080-exec-6] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 00:24:37.241 DEBUG 2276 --- [http-nio-8080-exec-6] com.by.mapper.UserMapper.checkUser       : ==>  Preparing: select * from t_user where user_name = ? and pass_word = ? 
2020-04-17 00:24:37.340 DEBUG 2276 --- [http-nio-8080-exec-6] com.by.mapper.UserMapper.checkUser       : ==> Parameters: zhouboyang(String), 96e79218965eb72c92a549dd5a330112(String)
2020-04-17 00:24:37.436 DEBUG 2276 --- [http-nio-8080-exec-6] com.by.mapper.UserMapper.checkUser       : <==      Total: 1
2020-04-17 00:24:39.589 DEBUG 2276 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id 
2020-04-17 00:24:39.590 DEBUG 2276 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 00:24:39.661 DEBUG 2276 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 00:24:39.663 DEBUG 2276 --- [http-nio-8080-exec-8] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id order by b.update_time desc LIMIT ? 
2020-04-17 00:24:39.663 DEBUG 2276 --- [http-nio-8080-exec-8] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 00:24:39.682 DEBUG 2276 --- [http-nio-8080-exec-8] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 00:24:39.690 DEBUG 2276 --- [http-nio-8080-exec-8] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:24:39.690 DEBUG 2276 --- [http-nio-8080-exec-8] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:24:39.692 DEBUG 2276 --- [http-nio-8080-exec-8] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:25:00.887 DEBUG 2276 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id 
2020-04-17 00:25:00.888 DEBUG 2276 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 00:25:00.889 DEBUG 2276 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 00:25:00.890 DEBUG 2276 --- [http-nio-8080-exec-5] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id order by b.update_time desc LIMIT ? 
2020-04-17 00:25:00.891 DEBUG 2276 --- [http-nio-8080-exec-5] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 00:25:00.894 DEBUG 2276 --- [http-nio-8080-exec-5] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 00:25:00.896 DEBUG 2276 --- [http-nio-8080-exec-5] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:25:00.896 DEBUG 2276 --- [http-nio-8080-exec-5] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:25:00.899 DEBUG 2276 --- [http-nio-8080-exec-5] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:25:36.687 DEBUG 2276 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_type 
2020-04-17 00:25:36.687 DEBUG 2276 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType_COUNT  : ==> Parameters: 
2020-04-17 00:25:36.688 DEBUG 2276 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType_COUNT  : <==      Total: 1
2020-04-17 00:25:36.689 DEBUG 2276 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type LIMIT ? 
2020-04-17 00:25:36.689 DEBUG 2276 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : ==> Parameters: 3(Integer)
2020-04-17 00:25:36.691 DEBUG 2276 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : <==      Total: 3
2020-04-17 00:25:39.796 DEBUG 2276 --- [http-nio-8080-exec-7] com.by.mapper.TypeMapper.listType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_type 
2020-04-17 00:25:39.796 DEBUG 2276 --- [http-nio-8080-exec-7] com.by.mapper.TypeMapper.listType_COUNT  : ==> Parameters: 
2020-04-17 00:25:39.798 DEBUG 2276 --- [http-nio-8080-exec-7] com.by.mapper.TypeMapper.listType_COUNT  : <==      Total: 1
2020-04-17 00:25:39.799 DEBUG 2276 --- [http-nio-8080-exec-7] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type LIMIT ?, ? 
2020-04-17 00:25:39.800 DEBUG 2276 --- [http-nio-8080-exec-7] com.by.mapper.TypeMapper.listType        : ==> Parameters: 3(Integer), 3(Integer)
2020-04-17 00:25:39.801 DEBUG 2276 --- [http-nio-8080-exec-7] com.by.mapper.TypeMapper.listType        : <==      Total: 2
2020-04-17 00:25:41.748 DEBUG 2276 --- [http-nio-8080-exec-8] com.by.mapper.TypeMapper.listType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_type 
2020-04-17 00:25:41.748 DEBUG 2276 --- [http-nio-8080-exec-8] com.by.mapper.TypeMapper.listType_COUNT  : ==> Parameters: 
2020-04-17 00:25:41.750 DEBUG 2276 --- [http-nio-8080-exec-8] com.by.mapper.TypeMapper.listType_COUNT  : <==      Total: 1
2020-04-17 00:25:41.752 DEBUG 2276 --- [http-nio-8080-exec-8] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type LIMIT ? 
2020-04-17 00:25:41.752 DEBUG 2276 --- [http-nio-8080-exec-8] com.by.mapper.TypeMapper.listType        : ==> Parameters: 3(Integer)
2020-04-17 00:25:41.753 DEBUG 2276 --- [http-nio-8080-exec-8] com.by.mapper.TypeMapper.listType        : <==      Total: 3
2020-04-17 00:25:43.975 DEBUG 2276 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id 
2020-04-17 00:25:43.976 DEBUG 2276 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 00:25:43.979 DEBUG 2276 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 00:25:43.980 DEBUG 2276 --- [http-nio-8080-exec-2] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id order by b.update_time desc LIMIT ? 
2020-04-17 00:25:43.981 DEBUG 2276 --- [http-nio-8080-exec-2] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 00:25:43.986 DEBUG 2276 --- [http-nio-8080-exec-2] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 00:25:43.989 DEBUG 2276 --- [http-nio-8080-exec-2] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:25:43.990 DEBUG 2276 --- [http-nio-8080-exec-2] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:25:43.992 DEBUG 2276 --- [http-nio-8080-exec-2] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:26:09.006 DEBUG 2276 --- [http-nio-8080-exec-10] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? 
2020-04-17 00:26:09.007 DEBUG 2276 --- [http-nio-8080-exec-10] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 2(Long)
2020-04-17 00:26:09.091 DEBUG 2276 --- [http-nio-8080-exec-10] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 00:26:09.094  INFO 2276 --- [http-nio-8080-exec-10] com.by.controller.admin.BlogsController  : blog-input-1:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:05:14, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=null)
2020-04-17 00:26:09.095  INFO 2276 --- [http-nio-8080-exec-10] com.by.controller.admin.BlogsController  : blog-input-2:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:05:14, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=5)
2020-04-17 00:26:09.096 DEBUG 2276 --- [http-nio-8080-exec-10] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:26:09.097 DEBUG 2276 --- [http-nio-8080-exec-10] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:26:09.099 DEBUG 2276 --- [http-nio-8080-exec-10] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:26:09.105 DEBUG 2276 --- [http-nio-8080-exec-10] com.by.mapper.TagMapper.listTag          : ==>  Preparing: select * from t_tag 
2020-04-17 00:26:09.106 DEBUG 2276 --- [http-nio-8080-exec-10] com.by.mapper.TagMapper.listTag          : ==> Parameters: 
2020-04-17 00:26:09.108 DEBUG 2276 --- [http-nio-8080-exec-10] com.by.mapper.TagMapper.listTag          : <==      Total: 8
2020-04-17 00:26:20.153 DEBUG 2276 --- [http-nio-8080-exec-3] com.by.mapper.TypeMapper.getType         : ==>  Preparing: select id,name from blog.t_type where id = ? 
2020-04-17 00:26:20.154 DEBUG 2276 --- [http-nio-8080-exec-3] com.by.mapper.TypeMapper.getType         : ==> Parameters: 6(Long)
2020-04-17 00:26:20.155 DEBUG 2276 --- [http-nio-8080-exec-3] com.by.mapper.TypeMapper.getType         : <==      Total: 1
2020-04-17 00:26:20.249 DEBUG 2276 --- [http-nio-8080-exec-3] com.by.mapper.TagMapper.listTagByList    : ==>  Preparing: select id,name from t_tag WHERE id in( ? ) 
2020-04-17 00:26:20.250 DEBUG 2276 --- [http-nio-8080-exec-3] com.by.mapper.TagMapper.listTagByList    : ==> Parameters: 5(Long)
2020-04-17 00:26:20.251 DEBUG 2276 --- [http-nio-8080-exec-3] com.by.mapper.TagMapper.listTagByList    : <==      Total: 1
2020-04-17 00:26:20.253 DEBUG 2276 --- [http-nio-8080-exec-3] com.by.mapper.BlogMapper.getBlog         : ==>  Preparing: select * from t_blog where id = ? and published = true 
2020-04-17 00:26:20.254 DEBUG 2276 --- [http-nio-8080-exec-3] com.by.mapper.BlogMapper.getBlog         : ==> Parameters: 2(Long)
2020-04-17 00:26:20.258 DEBUG 2276 --- [http-nio-8080-exec-3] com.by.mapper.BlogMapper.getBlog         : <==      Total: 1
2020-04-17 00:26:20.259  INFO 2276 --- [http-nio-8080-exec-3] com.by.service.BlogServiceImpl           : blog:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:05:14, description=这是关于插入排序的讲解，一步一步理解插入排序, type=null, tags=[], user=null, comments=[], tagIds=null)
2020-04-17 00:26:20.260 DEBUG 2276 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.updateBlogWithTags      : ==>  Preparing: update t_blog set description = ?,appreciation = ?,commentabled = ?,content = ?,create_time = ?,first_picture = ?,flag = ?, published = ?,recommend = ?,share_statement = ?,title = ?, update_time = ?,views = ?,type_id = ?,user_id = ? where id = ? 
2020-04-17 00:26:20.263 DEBUG 2276 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.updateBlogWithTags      : ==> Parameters: 这是关于插入排序的讲解，一步一步理解插入排序(String), true(Boolean), true(Boolean), ```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```(String), 2020-04-16 21:16:22.0(Timestamp), https://pic.images.ac.cn/image/5e988196aa315(String), 原创(String), true(Boolean), false(Boolean), true(Boolean), 插入排序(String), 2020-04-17 00:26:20(String), 5(Integer), 6(Long), 1(Long), 2(Long)
2020-04-17 00:26:20.264 DEBUG 2276 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.updateBlogWithTags      : <==    Updates: 1
2020-04-17 00:26:20.265 DEBUG 2276 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.deleteBlogWithTags      : ==>  Preparing: delete from t_blog_tags where blog_id = ? 
2020-04-17 00:26:20.265 DEBUG 2276 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.deleteBlogWithTags      : ==> Parameters: 2(Long)
2020-04-17 00:26:20.266 DEBUG 2276 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.deleteBlogWithTags      : <==    Updates: 1
2020-04-17 00:26:20.268 DEBUG 2276 --- [http-nio-8080-exec-3] c.by.mapper.BlogMapper.saveBlogWithTags  : ==>  Preparing: insert into t_blog_tags(blog_id, tag_id) values (?,?) 
2020-04-17 00:26:20.268 DEBUG 2276 --- [http-nio-8080-exec-3] c.by.mapper.BlogMapper.saveBlogWithTags  : ==> Parameters: 2(Long), 5(Long)
2020-04-17 00:26:20.298 DEBUG 2276 --- [http-nio-8080-exec-3] c.by.mapper.BlogMapper.saveBlogWithTags  : <==    Updates: 1
2020-04-17 00:26:20.422  INFO 2276 --- [http-nio-8080-exec-3] com.by.controller.admin.BlogsController  : 成功：Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:26:20, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=User(id=1, username=zhouboyang, password=null, email=2423623805@qq.com, avatar=http://temp.im/50x50, type=1, createTime=Tue Apr 07 04:37:21 CST 2020, updateTime=Tue Apr 07 04:37:25 CST 2020, nickname=周博洋, blogs=[]), comments=[], tagIds=5)
2020-04-17 00:26:20.483 DEBUG 2276 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id 
2020-04-17 00:26:20.483 DEBUG 2276 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 00:26:20.484 DEBUG 2276 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 00:26:20.485 DEBUG 2276 --- [http-nio-8080-exec-4] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id order by b.update_time desc LIMIT ? 
2020-04-17 00:26:20.485 DEBUG 2276 --- [http-nio-8080-exec-4] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 00:26:20.487 DEBUG 2276 --- [http-nio-8080-exec-4] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 00:26:20.489 DEBUG 2276 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:26:20.489 DEBUG 2276 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:26:20.490 DEBUG 2276 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:26:43.041 DEBUG 2276 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id 
2020-04-17 00:26:43.041 DEBUG 2276 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 00:26:43.043 DEBUG 2276 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 00:26:43.044 DEBUG 2276 --- [http-nio-8080-exec-4] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id order by b.update_time desc LIMIT ? 
2020-04-17 00:26:43.045 DEBUG 2276 --- [http-nio-8080-exec-4] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 00:26:43.047 DEBUG 2276 --- [http-nio-8080-exec-4] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 00:26:43.049 DEBUG 2276 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:26:43.050 DEBUG 2276 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:26:43.051 DEBUG 2276 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:29:44.650  INFO 5520 --- [main] com.by.BlogApplication                   : Starting BlogApplication on SD-20190630IDLV with PID 5520 (F:\Project\blog\target\classes started by Administrator in F:\Project\blog)
2020-04-17 00:29:44.701 DEBUG 5520 --- [main] com.by.BlogApplication                   : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 00:29:44.702  INFO 5520 --- [main] com.by.BlogApplication                   : The following profiles are active: dev
2020-04-17 00:29:48.589  INFO 5520 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-17 00:29:48.700  INFO 5520 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-17 00:29:48.700  INFO 5520 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-17 00:29:49.254  INFO 5520 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-17 00:29:49.254  INFO 5520 --- [main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4228 ms
2020-04-17 00:29:51.428  INFO 5520 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 00:29:51.551  INFO 5520 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 00:29:52.154  INFO 5520 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-17 00:29:52.158  INFO 5520 --- [main] com.by.BlogApplication                   : Started BlogApplication in 10.353 seconds (JVM running for 18.858)
2020-04-17 00:30:23.261  INFO 5520 --- [http-nio-8080-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1587011901,1587014773,1587017022; Hm_lpvt_38911ce56b435d67224d876856bc0eb0=1587046402; monitor_count=1648; JSESSIONID=8F0B765A52C610A11747042F9FBE82A4] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-17 00:30:23.269  INFO 5520 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-17 00:30:23.270  INFO 5520 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-17 00:30:23.286  INFO 5520 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 16 ms
2020-04-17 00:30:31.446  INFO 5520 --- [http-nio-8080-exec-3] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 00:30:31.750 DEBUG 5520 --- [http-nio-8080-exec-3] com.by.mapper.UserMapper.checkUser       : ==>  Preparing: select * from t_user where user_name = ? and pass_word = ? 
2020-04-17 00:30:31.807 DEBUG 5520 --- [http-nio-8080-exec-3] com.by.mapper.UserMapper.checkUser       : ==> Parameters: zhouboyang(String), 96e79218965eb72c92a549dd5a330112(String)
2020-04-17 00:30:31.945 DEBUG 5520 --- [http-nio-8080-exec-3] com.by.mapper.UserMapper.checkUser       : <==      Total: 1
2020-04-17 00:30:33.940 DEBUG 5520 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id 
2020-04-17 00:30:33.941 DEBUG 5520 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 00:30:34.012 DEBUG 5520 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 00:30:34.014 DEBUG 5520 --- [http-nio-8080-exec-9] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id order by b.update_time desc LIMIT ? 
2020-04-17 00:30:34.015 DEBUG 5520 --- [http-nio-8080-exec-9] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 00:30:34.030 DEBUG 5520 --- [http-nio-8080-exec-9] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 00:30:34.039 DEBUG 5520 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:30:34.039 DEBUG 5520 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:30:34.041 DEBUG 5520 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:35:58.339  INFO 10280 --- [main] com.by.BlogApplication                   : Starting BlogApplication on SD-20190630IDLV with PID 10280 (F:\Project\blog\target\classes started by Administrator in F:\Project\blog)
2020-04-17 00:35:58.377 DEBUG 10280 --- [main] com.by.BlogApplication                   : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 00:35:58.378  INFO 10280 --- [main] com.by.BlogApplication                   : The following profiles are active: dev
2020-04-17 00:36:01.746  INFO 10280 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-17 00:36:01.790  INFO 10280 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-17 00:36:01.791  INFO 10280 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-17 00:36:02.301  INFO 10280 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-17 00:36:02.302  INFO 10280 --- [main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3697 ms
2020-04-17 00:36:04.450  INFO 10280 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 00:36:04.576  INFO 10280 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 00:36:05.186  INFO 10280 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-17 00:36:05.190  INFO 10280 --- [main] com.by.BlogApplication                   : Started BlogApplication in 9.554 seconds (JVM running for 22.08)
2020-04-17 00:36:39.088  INFO 10280 --- [http-nio-8080-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1587011901,1587014773,1587017022; Hm_lpvt_38911ce56b435d67224d876856bc0eb0=1587046402; monitor_count=1648; JSESSIONID=1AFDFF5EAA20B3F029A633C37C312D49] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-17 00:36:39.096  INFO 10280 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-17 00:36:39.096  INFO 10280 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-17 00:36:39.113  INFO 10280 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 16 ms
2020-04-17 00:36:59.037  INFO 10280 --- [http-nio-8080-exec-6] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 00:36:59.297 DEBUG 10280 --- [http-nio-8080-exec-6] com.by.mapper.UserMapper.checkUser       : ==>  Preparing: select * from t_user where user_name = ? and pass_word = ? 
2020-04-17 00:36:59.350 DEBUG 10280 --- [http-nio-8080-exec-6] com.by.mapper.UserMapper.checkUser       : ==> Parameters: zhouboyang(String), 96e79218965eb72c92a549dd5a330112(String)
2020-04-17 00:36:59.428 DEBUG 10280 --- [http-nio-8080-exec-6] com.by.mapper.UserMapper.checkUser       : <==      Total: 1
2020-04-17 00:37:01.469 DEBUG 10280 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id 
2020-04-17 00:37:01.470 DEBUG 10280 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 00:37:01.536 DEBUG 10280 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 00:37:01.538 DEBUG 10280 --- [http-nio-8080-exec-8] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id order by b.update_time desc LIMIT ? 
2020-04-17 00:37:01.539 DEBUG 10280 --- [http-nio-8080-exec-8] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 00:37:01.543 DEBUG 10280 --- [http-nio-8080-exec-8] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 00:37:01.552 DEBUG 10280 --- [http-nio-8080-exec-8] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:37:01.552 DEBUG 10280 --- [http-nio-8080-exec-8] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:37:01.555 DEBUG 10280 --- [http-nio-8080-exec-8] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:37:05.709 DEBUG 10280 --- [http-nio-8080-exec-10] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.recommend = ? 
2020-04-17 00:37:05.710 DEBUG 10280 --- [http-nio-8080-exec-10] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 0(Integer)
2020-04-17 00:37:05.711 DEBUG 10280 --- [http-nio-8080-exec-10] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:37:05.713 DEBUG 10280 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.recommend = ? LIMIT ?, ? 
2020-04-17 00:37:05.714 DEBUG 10280 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 0(Integer), 3(Integer), 3(Integer)
2020-04-17 00:37:05.750 DEBUG 10280 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 0
2020-04-17 00:37:07.188 DEBUG 10280 --- [http-nio-8080-exec-1] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.recommend = ? 
2020-04-17 00:37:07.188 DEBUG 10280 --- [http-nio-8080-exec-1] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 0(Integer)
2020-04-17 00:37:07.189 DEBUG 10280 --- [http-nio-8080-exec-1] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:37:07.191 DEBUG 10280 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.recommend = ? LIMIT ? 
2020-04-17 00:37:07.192 DEBUG 10280 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 0(Integer), 3(Integer)
2020-04-17 00:37:07.194 DEBUG 10280 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 1
2020-04-17 00:37:11.996 DEBUG 10280 --- [http-nio-8080-exec-2] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.recommend = ? 
2020-04-17 00:37:11.997 DEBUG 10280 --- [http-nio-8080-exec-2] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 0(Integer)
2020-04-17 00:37:11.999 DEBUG 10280 --- [http-nio-8080-exec-2] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:37:12.000 DEBUG 10280 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.recommend = ? LIMIT ? 
2020-04-17 00:37:12.000 DEBUG 10280 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 0(Integer), 3(Integer)
2020-04-17 00:37:12.002 DEBUG 10280 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 1
2020-04-17 00:37:13.020 DEBUG 10280 --- [http-nio-8080-exec-3] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.recommend = ? 
2020-04-17 00:37:13.021 DEBUG 10280 --- [http-nio-8080-exec-3] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 0(Integer)
2020-04-17 00:37:13.022 DEBUG 10280 --- [http-nio-8080-exec-3] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:37:13.023 DEBUG 10280 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.recommend = ? LIMIT ? 
2020-04-17 00:37:13.024 DEBUG 10280 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 0(Integer), 3(Integer)
2020-04-17 00:37:13.027 DEBUG 10280 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 1
2020-04-17 00:37:14.075 DEBUG 10280 --- [http-nio-8080-exec-4] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.recommend = ? 
2020-04-17 00:37:14.075 DEBUG 10280 --- [http-nio-8080-exec-4] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 0(Integer)
2020-04-17 00:37:14.076 DEBUG 10280 --- [http-nio-8080-exec-4] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:37:14.079 DEBUG 10280 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.recommend = ? LIMIT ? 
2020-04-17 00:37:14.080 DEBUG 10280 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 0(Integer), 3(Integer)
2020-04-17 00:37:14.081 DEBUG 10280 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 1
2020-04-17 00:37:14.698 DEBUG 10280 --- [http-nio-8080-exec-5] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.recommend = ? 
2020-04-17 00:37:14.699 DEBUG 10280 --- [http-nio-8080-exec-5] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 0(Integer)
2020-04-17 00:37:14.701 DEBUG 10280 --- [http-nio-8080-exec-5] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:37:14.703 DEBUG 10280 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.recommend = ? LIMIT ? 
2020-04-17 00:37:14.704 DEBUG 10280 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 0(Integer), 3(Integer)
2020-04-17 00:37:14.707 DEBUG 10280 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 1
2020-04-17 00:37:19.282 DEBUG 10280 --- [http-nio-8080-exec-6] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? 
2020-04-17 00:37:19.283 DEBUG 10280 --- [http-nio-8080-exec-6] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 2(Long)
2020-04-17 00:37:19.304 DEBUG 10280 --- [http-nio-8080-exec-6] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 00:37:19.306  INFO 10280 --- [http-nio-8080-exec-6] com.by.controller.admin.BlogsController  : blog-input-1:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:26:20, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=null)
2020-04-17 00:37:19.307  INFO 10280 --- [http-nio-8080-exec-6] com.by.controller.admin.BlogsController  : blog-input-2:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:26:20, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=5)
2020-04-17 00:37:19.308 DEBUG 10280 --- [http-nio-8080-exec-6] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:37:19.308 DEBUG 10280 --- [http-nio-8080-exec-6] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:37:19.312 DEBUG 10280 --- [http-nio-8080-exec-6] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:37:19.321 DEBUG 10280 --- [http-nio-8080-exec-6] com.by.mapper.TagMapper.listTag          : ==>  Preparing: select * from t_tag 
2020-04-17 00:37:19.321 DEBUG 10280 --- [http-nio-8080-exec-6] com.by.mapper.TagMapper.listTag          : ==> Parameters: 
2020-04-17 00:37:19.357 DEBUG 10280 --- [http-nio-8080-exec-6] com.by.mapper.TagMapper.listTag          : <==      Total: 8
2020-04-17 00:37:24.615 DEBUG 10280 --- [http-nio-8080-exec-8] com.by.mapper.TypeMapper.getType         : ==>  Preparing: select id,name from blog.t_type where id = ? 
2020-04-17 00:37:24.616 DEBUG 10280 --- [http-nio-8080-exec-8] com.by.mapper.TypeMapper.getType         : ==> Parameters: 6(Long)
2020-04-17 00:37:24.619 DEBUG 10280 --- [http-nio-8080-exec-8] com.by.mapper.TypeMapper.getType         : <==      Total: 1
2020-04-17 00:37:24.648 DEBUG 10280 --- [http-nio-8080-exec-8] com.by.mapper.TagMapper.listTagByList    : ==>  Preparing: select id,name from t_tag WHERE id in( ? ) 
2020-04-17 00:37:24.648 DEBUG 10280 --- [http-nio-8080-exec-8] com.by.mapper.TagMapper.listTagByList    : ==> Parameters: 5(Long)
2020-04-17 00:37:24.649 DEBUG 10280 --- [http-nio-8080-exec-8] com.by.mapper.TagMapper.listTagByList    : <==      Total: 1
2020-04-17 00:37:24.651 DEBUG 10280 --- [http-nio-8080-exec-8] com.by.mapper.BlogMapper.getBlog         : ==>  Preparing: select * from t_blog where id = ? and published = true 
2020-04-17 00:37:24.652 DEBUG 10280 --- [http-nio-8080-exec-8] com.by.mapper.BlogMapper.getBlog         : ==> Parameters: 2(Long)
2020-04-17 00:37:24.654 DEBUG 10280 --- [http-nio-8080-exec-8] com.by.mapper.BlogMapper.getBlog         : <==      Total: 1
2020-04-17 00:37:24.654  INFO 10280 --- [http-nio-8080-exec-8] com.by.service.BlogServiceImpl           : blog:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:26:20, description=这是关于插入排序的讲解，一步一步理解插入排序, type=null, tags=[], user=null, comments=[], tagIds=null)
2020-04-17 00:37:24.655 DEBUG 10280 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.updateBlogWithTags      : ==>  Preparing: update t_blog set description = ?,appreciation = ?,commentabled = ?,content = ?,create_time = ?,first_picture = ?,flag = ?, published = ?,recommend = ?,share_statement = ?,title = ?, update_time = ?,views = ?,type_id = ?,user_id = ? where id = ? 
2020-04-17 00:37:24.659 DEBUG 10280 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.updateBlogWithTags      : ==> Parameters: 这是关于插入排序的讲解，一步一步理解插入排序(String), true(Boolean), true(Boolean), ```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```(String), 2020-04-16 21:16:22.0(Timestamp), https://pic.images.ac.cn/image/5e988196aa315(String), 原创(String), true(Boolean), false(Boolean), true(Boolean), 插入排序(String), 2020-04-17 00:37:24(String), 5(Integer), 6(Long), 1(Long), 2(Long)
2020-04-17 00:37:24.669 DEBUG 10280 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.updateBlogWithTags      : <==    Updates: 1
2020-04-17 00:37:24.670 DEBUG 10280 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.deleteBlogWithTags      : ==>  Preparing: delete from t_blog_tags where blog_id = ? 
2020-04-17 00:37:24.670 DEBUG 10280 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.deleteBlogWithTags      : ==> Parameters: 2(Long)
2020-04-17 00:37:24.671 DEBUG 10280 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.deleteBlogWithTags      : <==    Updates: 1
2020-04-17 00:37:24.672 DEBUG 10280 --- [http-nio-8080-exec-8] c.by.mapper.BlogMapper.saveBlogWithTags  : ==>  Preparing: insert into t_blog_tags(blog_id, tag_id) values (?,?) 
2020-04-17 00:37:24.673 DEBUG 10280 --- [http-nio-8080-exec-8] c.by.mapper.BlogMapper.saveBlogWithTags  : ==> Parameters: 2(Long), 5(Long)
2020-04-17 00:37:24.694 DEBUG 10280 --- [http-nio-8080-exec-8] c.by.mapper.BlogMapper.saveBlogWithTags  : <==    Updates: 1
2020-04-17 00:37:24.822  INFO 10280 --- [http-nio-8080-exec-8] com.by.controller.admin.BlogsController  : 成功：Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:37:24, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=User(id=1, username=zhouboyang, password=null, email=2423623805@qq.com, avatar=http://temp.im/50x50, type=1, createTime=Tue Apr 07 04:37:21 CST 2020, updateTime=Tue Apr 07 04:37:25 CST 2020, nickname=周博洋, blogs=[]), comments=[], tagIds=5)
2020-04-17 00:37:24.886 DEBUG 10280 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id 
2020-04-17 00:37:24.886 DEBUG 10280 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 00:37:24.887 DEBUG 10280 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 00:37:24.888 DEBUG 10280 --- [http-nio-8080-exec-9] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id order by b.update_time desc LIMIT ? 
2020-04-17 00:37:24.888 DEBUG 10280 --- [http-nio-8080-exec-9] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 00:37:24.891 DEBUG 10280 --- [http-nio-8080-exec-9] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 00:37:24.893 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:37:24.894 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:37:24.895 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:37:33.422 DEBUG 10280 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? 
2020-04-17 00:37:33.423 DEBUG 10280 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 1(Long)
2020-04-17 00:37:33.425 DEBUG 10280 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 00:37:33.427  INFO 10280 --- [http-nio-8080-exec-5] com.by.controller.admin.BlogsController  : blog-input-1:Blog(id=1, title=冒泡排序, content=```java
public class BubbleSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int arr[] = {3,9,-1,10,-2};
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		System.out.println(Arrays.toString(arr));
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
		bubbleSort(arr);
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		/**
		 * 
		int temp = 0;
		//第一趟排序，就是将最大的排在最后
		for(int j=0;j<arr.length-1-0;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第一趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第二趟排序，就是将第二大的排在倒数第二位
		for(int j=0;j<arr.length-1-1;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第二趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第三趟排序，就是将第三大的排在倒数第三位
		for(int j=0;j<arr.length-1-2;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第三趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第四趟排序，就是将第四大的排在倒数第四位
		for(int j=0;j<arr.length-1-3;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第四趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		System.out.println("排序结果");
		System.out.println(Arrays.toString(arr));
		*/
		
		
	}
	
	public static void bubbleSort(int[] arr)
	{
		//冒泡排序的时间复杂度O(n^2)
		int temp = 0;
		boolean flag = false;//没有发生交换，没有发生交换说明已经有序
		for(int i=0;i<arr.length-1;i++)
		{	
			//减i的原因是每次排完最大的在最后，也就是后面逐渐有序，把大的往后排，从后依次向前有序
			for(int j=0;j<arr.length-1-i;j++)
			{
				if(arr[j]>arr[j+1])
				{
					flag = true;
					temp = arr[j];
					arr[j] = arr[j+1];
					arr[j+1] = temp;
				}
			}			
			//每一趟排序后做一次判断，如果一趟不会发生交换则以后都不会发生交换
			if(!flag)
			{
				break;
			}else{
//				System.out.println("第"+(i+1)+"趟排序后的数组");
//				System.out.println(Arrays.toString(arr));
				flag = false;//发生了交换就重置flag进行下次判断
			}
		}
				
	}
	

}
```, firstPicture=https://pic.images.ac.cn/image/5e987ff6927b8, flag=原创, views=4, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=Thu Apr 16 20:57:14 CST 2020, updateTime=2020-04-17 00:04:02, description=这是关于冒泡排序算法的讲解，有助于理解冒泡排序的本质。, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=4, name=冒泡排序, blogs=[])], user=null, comments=[], tagIds=null)
2020-04-17 00:37:33.427  INFO 10280 --- [http-nio-8080-exec-5] com.by.controller.admin.BlogsController  : blog-input-2:Blog(id=1, title=冒泡排序, content=```java
public class BubbleSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int arr[] = {3,9,-1,10,-2};
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		System.out.println(Arrays.toString(arr));
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
		bubbleSort(arr);
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		/**
		 * 
		int temp = 0;
		//第一趟排序，就是将最大的排在最后
		for(int j=0;j<arr.length-1-0;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第一趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第二趟排序，就是将第二大的排在倒数第二位
		for(int j=0;j<arr.length-1-1;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第二趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第三趟排序，就是将第三大的排在倒数第三位
		for(int j=0;j<arr.length-1-2;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第三趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第四趟排序，就是将第四大的排在倒数第四位
		for(int j=0;j<arr.length-1-3;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第四趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		System.out.println("排序结果");
		System.out.println(Arrays.toString(arr));
		*/
		
		
	}
	
	public static void bubbleSort(int[] arr)
	{
		//冒泡排序的时间复杂度O(n^2)
		int temp = 0;
		boolean flag = false;//没有发生交换，没有发生交换说明已经有序
		for(int i=0;i<arr.length-1;i++)
		{	
			//减i的原因是每次排完最大的在最后，也就是后面逐渐有序，把大的往后排，从后依次向前有序
			for(int j=0;j<arr.length-1-i;j++)
			{
				if(arr[j]>arr[j+1])
				{
					flag = true;
					temp = arr[j];
					arr[j] = arr[j+1];
					arr[j+1] = temp;
				}
			}			
			//每一趟排序后做一次判断，如果一趟不会发生交换则以后都不会发生交换
			if(!flag)
			{
				break;
			}else{
//				System.out.println("第"+(i+1)+"趟排序后的数组");
//				System.out.println(Arrays.toString(arr));
				flag = false;//发生了交换就重置flag进行下次判断
			}
		}
				
	}
	

}
```, firstPicture=https://pic.images.ac.cn/image/5e987ff6927b8, flag=原创, views=4, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=Thu Apr 16 20:57:14 CST 2020, updateTime=2020-04-17 00:04:02, description=这是关于冒泡排序算法的讲解，有助于理解冒泡排序的本质。, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=4, name=冒泡排序, blogs=[])], user=null, comments=[], tagIds=4)
2020-04-17 00:37:33.428 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:37:33.429 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:37:33.430 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:37:33.432 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.TagMapper.listTag          : ==>  Preparing: select * from t_tag 
2020-04-17 00:37:33.432 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.TagMapper.listTag          : ==> Parameters: 
2020-04-17 00:37:33.434 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.TagMapper.listTag          : <==      Total: 8
2020-04-17 00:37:37.455 DEBUG 10280 --- [http-nio-8080-exec-7] com.by.mapper.TypeMapper.getType         : ==>  Preparing: select id,name from blog.t_type where id = ? 
2020-04-17 00:37:37.456 DEBUG 10280 --- [http-nio-8080-exec-7] com.by.mapper.TypeMapper.getType         : ==> Parameters: 6(Long)
2020-04-17 00:37:37.457 DEBUG 10280 --- [http-nio-8080-exec-7] com.by.mapper.TypeMapper.getType         : <==      Total: 1
2020-04-17 00:37:37.460 DEBUG 10280 --- [http-nio-8080-exec-7] com.by.mapper.TagMapper.listTagByList    : ==>  Preparing: select id,name from t_tag WHERE id in( ? ) 
2020-04-17 00:37:37.461 DEBUG 10280 --- [http-nio-8080-exec-7] com.by.mapper.TagMapper.listTagByList    : ==> Parameters: 4(Long)
2020-04-17 00:37:37.462 DEBUG 10280 --- [http-nio-8080-exec-7] com.by.mapper.TagMapper.listTagByList    : <==      Total: 1
2020-04-17 00:37:37.465 DEBUG 10280 --- [http-nio-8080-exec-7] com.by.mapper.BlogMapper.getBlog         : ==>  Preparing: select * from t_blog where id = ? and published = true 
2020-04-17 00:37:37.465 DEBUG 10280 --- [http-nio-8080-exec-7] com.by.mapper.BlogMapper.getBlog         : ==> Parameters: 1(Long)
2020-04-17 00:37:37.466 DEBUG 10280 --- [http-nio-8080-exec-7] com.by.mapper.BlogMapper.getBlog         : <==      Total: 0
2020-04-17 00:37:37.467  INFO 10280 --- [http-nio-8080-exec-7] com.by.service.BlogServiceImpl           : blog:null
2020-04-17 00:37:37.600 ERROR 10280 --- [http-nio-8080-exec-7] c.by.handler.ControllerExceptionHandler  : Request URL : http://localhost:8080/admin/blogs,Exception : {}

java.lang.NullPointerException: null
	at com.by.service.BlogServiceImpl.saveBlog(BlogServiceImpl.java:68) ~[classes/:na]
	at com.by.service.BlogServiceImpl$$FastClassBySpringCGLIB$$e470c810.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:366) ~[spring-tx-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118) ~[spring-tx-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at com.by.service.BlogServiceImpl$$EnhancerBySpringCGLIB$$ebdd8f70.saveBlog(<generated>) ~[classes/:na]
	at com.by.controller.admin.BlogsController.postBlog(BlogsController.java:90) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_231]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_231]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_231]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_231]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) [spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_231]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_231]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_231]

2020-04-17 00:38:54.251 DEBUG 10280 --- [http-nio-8080-exec-9] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? 
2020-04-17 00:38:54.251 DEBUG 10280 --- [http-nio-8080-exec-9] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 1(Long)
2020-04-17 00:38:54.256 DEBUG 10280 --- [http-nio-8080-exec-9] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 00:38:54.257  INFO 10280 --- [http-nio-8080-exec-9] com.by.controller.admin.BlogsController  : blog-input-1:Blog(id=1, title=冒泡排序, content=```java
public class BubbleSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int arr[] = {3,9,-1,10,-2};
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		System.out.println(Arrays.toString(arr));
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
		bubbleSort(arr);
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		/**
		 * 
		int temp = 0;
		//第一趟排序，就是将最大的排在最后
		for(int j=0;j<arr.length-1-0;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第一趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第二趟排序，就是将第二大的排在倒数第二位
		for(int j=0;j<arr.length-1-1;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第二趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第三趟排序，就是将第三大的排在倒数第三位
		for(int j=0;j<arr.length-1-2;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第三趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第四趟排序，就是将第四大的排在倒数第四位
		for(int j=0;j<arr.length-1-3;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第四趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		System.out.println("排序结果");
		System.out.println(Arrays.toString(arr));
		*/
		
		
	}
	
	public static void bubbleSort(int[] arr)
	{
		//冒泡排序的时间复杂度O(n^2)
		int temp = 0;
		boolean flag = false;//没有发生交换，没有发生交换说明已经有序
		for(int i=0;i<arr.length-1;i++)
		{	
			//减i的原因是每次排完最大的在最后，也就是后面逐渐有序，把大的往后排，从后依次向前有序
			for(int j=0;j<arr.length-1-i;j++)
			{
				if(arr[j]>arr[j+1])
				{
					flag = true;
					temp = arr[j];
					arr[j] = arr[j+1];
					arr[j+1] = temp;
				}
			}			
			//每一趟排序后做一次判断，如果一趟不会发生交换则以后都不会发生交换
			if(!flag)
			{
				break;
			}else{
//				System.out.println("第"+(i+1)+"趟排序后的数组");
//				System.out.println(Arrays.toString(arr));
				flag = false;//发生了交换就重置flag进行下次判断
			}
		}
				
	}
	

}
```, firstPicture=https://pic.images.ac.cn/image/5e987ff6927b8, flag=原创, views=4, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=Thu Apr 16 20:57:14 CST 2020, updateTime=2020-04-17 00:04:02, description=这是关于冒泡排序算法的讲解，有助于理解冒泡排序的本质。, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=4, name=冒泡排序, blogs=[])], user=null, comments=[], tagIds=null)
2020-04-17 00:38:54.258  INFO 10280 --- [http-nio-8080-exec-9] com.by.controller.admin.BlogsController  : blog-input-2:Blog(id=1, title=冒泡排序, content=```java
public class BubbleSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int arr[] = {3,9,-1,10,-2};
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		System.out.println(Arrays.toString(arr));
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
		bubbleSort(arr);
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		/**
		 * 
		int temp = 0;
		//第一趟排序，就是将最大的排在最后
		for(int j=0;j<arr.length-1-0;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第一趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第二趟排序，就是将第二大的排在倒数第二位
		for(int j=0;j<arr.length-1-1;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第二趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第三趟排序，就是将第三大的排在倒数第三位
		for(int j=0;j<arr.length-1-2;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第三趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第四趟排序，就是将第四大的排在倒数第四位
		for(int j=0;j<arr.length-1-3;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第四趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		System.out.println("排序结果");
		System.out.println(Arrays.toString(arr));
		*/
		
		
	}
	
	public static void bubbleSort(int[] arr)
	{
		//冒泡排序的时间复杂度O(n^2)
		int temp = 0;
		boolean flag = false;//没有发生交换，没有发生交换说明已经有序
		for(int i=0;i<arr.length-1;i++)
		{	
			//减i的原因是每次排完最大的在最后，也就是后面逐渐有序，把大的往后排，从后依次向前有序
			for(int j=0;j<arr.length-1-i;j++)
			{
				if(arr[j]>arr[j+1])
				{
					flag = true;
					temp = arr[j];
					arr[j] = arr[j+1];
					arr[j+1] = temp;
				}
			}			
			//每一趟排序后做一次判断，如果一趟不会发生交换则以后都不会发生交换
			if(!flag)
			{
				break;
			}else{
//				System.out.println("第"+(i+1)+"趟排序后的数组");
//				System.out.println(Arrays.toString(arr));
				flag = false;//发生了交换就重置flag进行下次判断
			}
		}
				
	}
	

}
```, firstPicture=https://pic.images.ac.cn/image/5e987ff6927b8, flag=原创, views=4, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=Thu Apr 16 20:57:14 CST 2020, updateTime=2020-04-17 00:04:02, description=这是关于冒泡排序算法的讲解，有助于理解冒泡排序的本质。, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=4, name=冒泡排序, blogs=[])], user=null, comments=[], tagIds=4)
2020-04-17 00:38:54.259 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:38:54.259 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:38:54.260 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:38:54.262 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TagMapper.listTag          : ==>  Preparing: select * from t_tag 
2020-04-17 00:38:54.262 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TagMapper.listTag          : ==> Parameters: 
2020-04-17 00:38:54.264 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TagMapper.listTag          : <==      Total: 8
2020-04-17 00:39:04.878 DEBUG 10280 --- [http-nio-8080-exec-3] com.by.mapper.TypeMapper.getType         : ==>  Preparing: select id,name from blog.t_type where id = ? 
2020-04-17 00:39:04.880 DEBUG 10280 --- [http-nio-8080-exec-3] com.by.mapper.TypeMapper.getType         : ==> Parameters: 6(Long)
2020-04-17 00:39:04.881 DEBUG 10280 --- [http-nio-8080-exec-3] com.by.mapper.TypeMapper.getType         : <==      Total: 1
2020-04-17 00:39:04.884 DEBUG 10280 --- [http-nio-8080-exec-3] com.by.mapper.TagMapper.listTagByList    : ==>  Preparing: select id,name from t_tag WHERE id in( ? ) 
2020-04-17 00:39:04.884 DEBUG 10280 --- [http-nio-8080-exec-3] com.by.mapper.TagMapper.listTagByList    : ==> Parameters: 4(Long)
2020-04-17 00:39:04.886 DEBUG 10280 --- [http-nio-8080-exec-3] com.by.mapper.TagMapper.listTagByList    : <==      Total: 1
2020-04-17 00:39:04.889 DEBUG 10280 --- [http-nio-8080-exec-3] com.by.mapper.BlogMapper.getBlog         : ==>  Preparing: select * from t_blog where id = ? and published = true 
2020-04-17 00:39:04.889 DEBUG 10280 --- [http-nio-8080-exec-3] com.by.mapper.BlogMapper.getBlog         : ==> Parameters: 1(Long)
2020-04-17 00:39:04.891 DEBUG 10280 --- [http-nio-8080-exec-3] com.by.mapper.BlogMapper.getBlog         : <==      Total: 0
2020-04-17 00:39:04.891  INFO 10280 --- [http-nio-8080-exec-3] com.by.service.BlogServiceImpl           : blog:null
2020-04-17 00:39:04.894 ERROR 10280 --- [http-nio-8080-exec-3] c.by.handler.ControllerExceptionHandler  : Request URL : http://localhost:8080/admin/blogs,Exception : {}

java.lang.NullPointerException: null
	at com.by.service.BlogServiceImpl.saveBlog(BlogServiceImpl.java:68) ~[classes/:na]
	at com.by.service.BlogServiceImpl$$FastClassBySpringCGLIB$$e470c810.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:366) ~[spring-tx-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118) ~[spring-tx-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at com.by.service.BlogServiceImpl$$EnhancerBySpringCGLIB$$ebdd8f70.saveBlog(<generated>) ~[classes/:na]
	at com.by.controller.admin.BlogsController.postBlog(BlogsController.java:90) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_231]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_231]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_231]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_231]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) [spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_231]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_231]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_231]

2020-04-17 00:39:06.830 DEBUG 10280 --- [http-nio-8080-exec-6] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? 
2020-04-17 00:39:06.831 DEBUG 10280 --- [http-nio-8080-exec-6] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 1(Long)
2020-04-17 00:39:06.833 DEBUG 10280 --- [http-nio-8080-exec-6] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 00:39:06.834  INFO 10280 --- [http-nio-8080-exec-6] com.by.controller.admin.BlogsController  : blog-input-1:Blog(id=1, title=冒泡排序, content=```java
public class BubbleSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int arr[] = {3,9,-1,10,-2};
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		System.out.println(Arrays.toString(arr));
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
		bubbleSort(arr);
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		/**
		 * 
		int temp = 0;
		//第一趟排序，就是将最大的排在最后
		for(int j=0;j<arr.length-1-0;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第一趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第二趟排序，就是将第二大的排在倒数第二位
		for(int j=0;j<arr.length-1-1;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第二趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第三趟排序，就是将第三大的排在倒数第三位
		for(int j=0;j<arr.length-1-2;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第三趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第四趟排序，就是将第四大的排在倒数第四位
		for(int j=0;j<arr.length-1-3;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第四趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		System.out.println("排序结果");
		System.out.println(Arrays.toString(arr));
		*/
		
		
	}
	
	public static void bubbleSort(int[] arr)
	{
		//冒泡排序的时间复杂度O(n^2)
		int temp = 0;
		boolean flag = false;//没有发生交换，没有发生交换说明已经有序
		for(int i=0;i<arr.length-1;i++)
		{	
			//减i的原因是每次排完最大的在最后，也就是后面逐渐有序，把大的往后排，从后依次向前有序
			for(int j=0;j<arr.length-1-i;j++)
			{
				if(arr[j]>arr[j+1])
				{
					flag = true;
					temp = arr[j];
					arr[j] = arr[j+1];
					arr[j+1] = temp;
				}
			}			
			//每一趟排序后做一次判断，如果一趟不会发生交换则以后都不会发生交换
			if(!flag)
			{
				break;
			}else{
//				System.out.println("第"+(i+1)+"趟排序后的数组");
//				System.out.println(Arrays.toString(arr));
				flag = false;//发生了交换就重置flag进行下次判断
			}
		}
				
	}
	

}
```, firstPicture=https://pic.images.ac.cn/image/5e987ff6927b8, flag=原创, views=4, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=Thu Apr 16 20:57:14 CST 2020, updateTime=2020-04-17 00:04:02, description=这是关于冒泡排序算法的讲解，有助于理解冒泡排序的本质。, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=4, name=冒泡排序, blogs=[])], user=null, comments=[], tagIds=null)
2020-04-17 00:39:06.835  INFO 10280 --- [http-nio-8080-exec-6] com.by.controller.admin.BlogsController  : blog-input-2:Blog(id=1, title=冒泡排序, content=```java
public class BubbleSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int arr[] = {3,9,-1,10,-2};
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		System.out.println(Arrays.toString(arr));
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
		bubbleSort(arr);
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		/**
		 * 
		int temp = 0;
		//第一趟排序，就是将最大的排在最后
		for(int j=0;j<arr.length-1-0;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第一趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第二趟排序，就是将第二大的排在倒数第二位
		for(int j=0;j<arr.length-1-1;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第二趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第三趟排序，就是将第三大的排在倒数第三位
		for(int j=0;j<arr.length-1-2;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第三趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第四趟排序，就是将第四大的排在倒数第四位
		for(int j=0;j<arr.length-1-3;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第四趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		System.out.println("排序结果");
		System.out.println(Arrays.toString(arr));
		*/
		
		
	}
	
	public static void bubbleSort(int[] arr)
	{
		//冒泡排序的时间复杂度O(n^2)
		int temp = 0;
		boolean flag = false;//没有发生交换，没有发生交换说明已经有序
		for(int i=0;i<arr.length-1;i++)
		{	
			//减i的原因是每次排完最大的在最后，也就是后面逐渐有序，把大的往后排，从后依次向前有序
			for(int j=0;j<arr.length-1-i;j++)
			{
				if(arr[j]>arr[j+1])
				{
					flag = true;
					temp = arr[j];
					arr[j] = arr[j+1];
					arr[j+1] = temp;
				}
			}			
			//每一趟排序后做一次判断，如果一趟不会发生交换则以后都不会发生交换
			if(!flag)
			{
				break;
			}else{
//				System.out.println("第"+(i+1)+"趟排序后的数组");
//				System.out.println(Arrays.toString(arr));
				flag = false;//发生了交换就重置flag进行下次判断
			}
		}
				
	}
	

}
```, firstPicture=https://pic.images.ac.cn/image/5e987ff6927b8, flag=原创, views=4, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=Thu Apr 16 20:57:14 CST 2020, updateTime=2020-04-17 00:04:02, description=这是关于冒泡排序算法的讲解，有助于理解冒泡排序的本质。, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=4, name=冒泡排序, blogs=[])], user=null, comments=[], tagIds=4)
2020-04-17 00:39:06.835 DEBUG 10280 --- [http-nio-8080-exec-6] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:39:06.836 DEBUG 10280 --- [http-nio-8080-exec-6] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:39:06.837 DEBUG 10280 --- [http-nio-8080-exec-6] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:39:06.838 DEBUG 10280 --- [http-nio-8080-exec-6] com.by.mapper.TagMapper.listTag          : ==>  Preparing: select * from t_tag 
2020-04-17 00:39:06.839 DEBUG 10280 --- [http-nio-8080-exec-6] com.by.mapper.TagMapper.listTag          : ==> Parameters: 
2020-04-17 00:39:06.840 DEBUG 10280 --- [http-nio-8080-exec-6] com.by.mapper.TagMapper.listTag          : <==      Total: 8
2020-04-17 00:39:11.131 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.TypeMapper.getType         : ==>  Preparing: select id,name from blog.t_type where id = ? 
2020-04-17 00:39:11.132 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.TypeMapper.getType         : ==> Parameters: 6(Long)
2020-04-17 00:39:11.133 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.TypeMapper.getType         : <==      Total: 1
2020-04-17 00:39:11.136 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.TagMapper.listTagByList    : ==>  Preparing: select id,name from t_tag WHERE id in( ? ) 
2020-04-17 00:39:11.136 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.TagMapper.listTagByList    : ==> Parameters: 4(Long)
2020-04-17 00:39:11.138 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.TagMapper.listTagByList    : <==      Total: 1
2020-04-17 00:39:11.141 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.BlogMapper.getBlog         : ==>  Preparing: select * from t_blog where id = ? and published = true 
2020-04-17 00:39:11.141 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.BlogMapper.getBlog         : ==> Parameters: 1(Long)
2020-04-17 00:39:11.144 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.BlogMapper.getBlog         : <==      Total: 0
2020-04-17 00:39:11.144  INFO 10280 --- [http-nio-8080-exec-10] com.by.service.BlogServiceImpl           : blog:null
2020-04-17 00:39:11.147 ERROR 10280 --- [http-nio-8080-exec-10] c.by.handler.ControllerExceptionHandler  : Request URL : http://localhost:8080/admin/blogs,Exception : {}

java.lang.NullPointerException: null
	at com.by.service.BlogServiceImpl.saveBlog(BlogServiceImpl.java:68) ~[classes/:na]
	at com.by.service.BlogServiceImpl$$FastClassBySpringCGLIB$$e470c810.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:366) ~[spring-tx-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118) ~[spring-tx-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at com.by.service.BlogServiceImpl$$EnhancerBySpringCGLIB$$ebdd8f70.saveBlog(<generated>) ~[classes/:na]
	at com.by.controller.admin.BlogsController.postBlog(BlogsController.java:90) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_231]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_231]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_231]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_231]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) [spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_231]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_231]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_231]

2020-04-17 00:39:13.141 DEBUG 10280 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? 
2020-04-17 00:39:13.141 DEBUG 10280 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 1(Long)
2020-04-17 00:39:13.144 DEBUG 10280 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 00:39:13.145  INFO 10280 --- [http-nio-8080-exec-4] com.by.controller.admin.BlogsController  : blog-input-1:Blog(id=1, title=冒泡排序, content=```java
public class BubbleSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int arr[] = {3,9,-1,10,-2};
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		System.out.println(Arrays.toString(arr));
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
		bubbleSort(arr);
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		/**
		 * 
		int temp = 0;
		//第一趟排序，就是将最大的排在最后
		for(int j=0;j<arr.length-1-0;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第一趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第二趟排序，就是将第二大的排在倒数第二位
		for(int j=0;j<arr.length-1-1;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第二趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第三趟排序，就是将第三大的排在倒数第三位
		for(int j=0;j<arr.length-1-2;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第三趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第四趟排序，就是将第四大的排在倒数第四位
		for(int j=0;j<arr.length-1-3;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第四趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		System.out.println("排序结果");
		System.out.println(Arrays.toString(arr));
		*/
		
		
	}
	
	public static void bubbleSort(int[] arr)
	{
		//冒泡排序的时间复杂度O(n^2)
		int temp = 0;
		boolean flag = false;//没有发生交换，没有发生交换说明已经有序
		for(int i=0;i<arr.length-1;i++)
		{	
			//减i的原因是每次排完最大的在最后，也就是后面逐渐有序，把大的往后排，从后依次向前有序
			for(int j=0;j<arr.length-1-i;j++)
			{
				if(arr[j]>arr[j+1])
				{
					flag = true;
					temp = arr[j];
					arr[j] = arr[j+1];
					arr[j+1] = temp;
				}
			}			
			//每一趟排序后做一次判断，如果一趟不会发生交换则以后都不会发生交换
			if(!flag)
			{
				break;
			}else{
//				System.out.println("第"+(i+1)+"趟排序后的数组");
//				System.out.println(Arrays.toString(arr));
				flag = false;//发生了交换就重置flag进行下次判断
			}
		}
				
	}
	

}
```, firstPicture=https://pic.images.ac.cn/image/5e987ff6927b8, flag=原创, views=4, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=Thu Apr 16 20:57:14 CST 2020, updateTime=2020-04-17 00:04:02, description=这是关于冒泡排序算法的讲解，有助于理解冒泡排序的本质。, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=4, name=冒泡排序, blogs=[])], user=null, comments=[], tagIds=null)
2020-04-17 00:39:13.146  INFO 10280 --- [http-nio-8080-exec-4] com.by.controller.admin.BlogsController  : blog-input-2:Blog(id=1, title=冒泡排序, content=```java
public class BubbleSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int arr[] = {3,9,-1,10,-2};
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		System.out.println(Arrays.toString(arr));
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
		bubbleSort(arr);
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		/**
		 * 
		int temp = 0;
		//第一趟排序，就是将最大的排在最后
		for(int j=0;j<arr.length-1-0;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第一趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第二趟排序，就是将第二大的排在倒数第二位
		for(int j=0;j<arr.length-1-1;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第二趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第三趟排序，就是将第三大的排在倒数第三位
		for(int j=0;j<arr.length-1-2;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第三趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第四趟排序，就是将第四大的排在倒数第四位
		for(int j=0;j<arr.length-1-3;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第四趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		System.out.println("排序结果");
		System.out.println(Arrays.toString(arr));
		*/
		
		
	}
	
	public static void bubbleSort(int[] arr)
	{
		//冒泡排序的时间复杂度O(n^2)
		int temp = 0;
		boolean flag = false;//没有发生交换，没有发生交换说明已经有序
		for(int i=0;i<arr.length-1;i++)
		{	
			//减i的原因是每次排完最大的在最后，也就是后面逐渐有序，把大的往后排，从后依次向前有序
			for(int j=0;j<arr.length-1-i;j++)
			{
				if(arr[j]>arr[j+1])
				{
					flag = true;
					temp = arr[j];
					arr[j] = arr[j+1];
					arr[j+1] = temp;
				}
			}			
			//每一趟排序后做一次判断，如果一趟不会发生交换则以后都不会发生交换
			if(!flag)
			{
				break;
			}else{
//				System.out.println("第"+(i+1)+"趟排序后的数组");
//				System.out.println(Arrays.toString(arr));
				flag = false;//发生了交换就重置flag进行下次判断
			}
		}
				
	}
	

}
```, firstPicture=https://pic.images.ac.cn/image/5e987ff6927b8, flag=原创, views=4, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=Thu Apr 16 20:57:14 CST 2020, updateTime=2020-04-17 00:04:02, description=这是关于冒泡排序算法的讲解，有助于理解冒泡排序的本质。, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=4, name=冒泡排序, blogs=[])], user=null, comments=[], tagIds=4)
2020-04-17 00:39:13.147 DEBUG 10280 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:39:13.147 DEBUG 10280 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:39:13.148 DEBUG 10280 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:39:13.150 DEBUG 10280 --- [http-nio-8080-exec-4] com.by.mapper.TagMapper.listTag          : ==>  Preparing: select * from t_tag 
2020-04-17 00:39:13.150 DEBUG 10280 --- [http-nio-8080-exec-4] com.by.mapper.TagMapper.listTag          : ==> Parameters: 
2020-04-17 00:39:13.151 DEBUG 10280 --- [http-nio-8080-exec-4] com.by.mapper.TagMapper.listTag          : <==      Total: 8
2020-04-17 00:39:15.880 DEBUG 10280 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id 
2020-04-17 00:39:15.881 DEBUG 10280 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 00:39:15.882 DEBUG 10280 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 00:39:15.884 DEBUG 10280 --- [http-nio-8080-exec-6] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id order by b.update_time desc LIMIT ? 
2020-04-17 00:39:15.885 DEBUG 10280 --- [http-nio-8080-exec-6] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 00:39:15.889 DEBUG 10280 --- [http-nio-8080-exec-6] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 00:39:15.892 DEBUG 10280 --- [http-nio-8080-exec-6] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:39:15.892 DEBUG 10280 --- [http-nio-8080-exec-6] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:39:15.894 DEBUG 10280 --- [http-nio-8080-exec-6] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:39:19.807 DEBUG 10280 --- [http-nio-8080-exec-9] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? 
2020-04-17 00:39:19.808 DEBUG 10280 --- [http-nio-8080-exec-9] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 2(Long)
2020-04-17 00:39:19.810 DEBUG 10280 --- [http-nio-8080-exec-9] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 00:39:19.812  INFO 10280 --- [http-nio-8080-exec-9] com.by.controller.admin.BlogsController  : blog-input-1:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:37:24, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=null)
2020-04-17 00:39:19.813  INFO 10280 --- [http-nio-8080-exec-9] com.by.controller.admin.BlogsController  : blog-input-2:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:37:24, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=5)
2020-04-17 00:39:19.815 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:39:19.815 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:39:19.817 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:39:19.820 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TagMapper.listTag          : ==>  Preparing: select * from t_tag 
2020-04-17 00:39:19.820 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TagMapper.listTag          : ==> Parameters: 
2020-04-17 00:39:19.822 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TagMapper.listTag          : <==      Total: 8
2020-04-17 00:39:24.085 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.TypeMapper.getType         : ==>  Preparing: select id,name from blog.t_type where id = ? 
2020-04-17 00:39:24.085 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.TypeMapper.getType         : ==> Parameters: 6(Long)
2020-04-17 00:39:24.087 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.TypeMapper.getType         : <==      Total: 1
2020-04-17 00:39:24.090 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.TagMapper.listTagByList    : ==>  Preparing: select id,name from t_tag WHERE id in( ? ) 
2020-04-17 00:39:24.090 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.TagMapper.listTagByList    : ==> Parameters: 5(Long)
2020-04-17 00:39:24.091 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.TagMapper.listTagByList    : <==      Total: 1
2020-04-17 00:39:24.094 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.BlogMapper.getBlog         : ==>  Preparing: select * from t_blog where id = ? and published = true 
2020-04-17 00:39:24.095 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.BlogMapper.getBlog         : ==> Parameters: 2(Long)
2020-04-17 00:39:24.097 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.BlogMapper.getBlog         : <==      Total: 1
2020-04-17 00:39:24.098  INFO 10280 --- [http-nio-8080-exec-10] com.by.service.BlogServiceImpl           : blog:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:37:24, description=这是关于插入排序的讲解，一步一步理解插入排序, type=null, tags=[], user=null, comments=[], tagIds=null)
2020-04-17 00:39:24.099 DEBUG 10280 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.updateBlogWithTags      : ==>  Preparing: update t_blog set description = ?,appreciation = ?,commentabled = ?,content = ?,create_time = ?,first_picture = ?,flag = ?, published = ?,recommend = ?,share_statement = ?,title = ?, update_time = ?,views = ?,type_id = ?,user_id = ? where id = ? 
2020-04-17 00:39:24.101 DEBUG 10280 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.updateBlogWithTags      : ==> Parameters: 这是关于插入排序的讲解，一步一步理解插入排序(String), true(Boolean), true(Boolean), ```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```(String), 2020-04-16 21:16:22.0(Timestamp), https://pic.images.ac.cn/image/5e988196aa315(String), 原创(String), true(Boolean), false(Boolean), true(Boolean), 插入排序(String), 2020-04-17 00:39:24(String), 5(Integer), 6(Long), 1(Long), 2(Long)
2020-04-17 00:39:24.103 DEBUG 10280 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.updateBlogWithTags      : <==    Updates: 1
2020-04-17 00:39:24.104 DEBUG 10280 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.deleteBlogWithTags      : ==>  Preparing: delete from t_blog_tags where blog_id = ? 
2020-04-17 00:39:24.104 DEBUG 10280 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.deleteBlogWithTags      : ==> Parameters: 2(Long)
2020-04-17 00:39:24.105 DEBUG 10280 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.deleteBlogWithTags      : <==    Updates: 1
2020-04-17 00:39:24.105 DEBUG 10280 --- [http-nio-8080-exec-10] c.by.mapper.BlogMapper.saveBlogWithTags  : ==>  Preparing: insert into t_blog_tags(blog_id, tag_id) values (?,?) 
2020-04-17 00:39:24.106 DEBUG 10280 --- [http-nio-8080-exec-10] c.by.mapper.BlogMapper.saveBlogWithTags  : ==> Parameters: 2(Long), 5(Long)
2020-04-17 00:39:24.136 DEBUG 10280 --- [http-nio-8080-exec-10] c.by.mapper.BlogMapper.saveBlogWithTags  : <==    Updates: 1
2020-04-17 00:39:24.212  INFO 10280 --- [http-nio-8080-exec-10] com.by.controller.admin.BlogsController  : 成功：Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:39:24, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=User(id=1, username=zhouboyang, password=null, email=2423623805@qq.com, avatar=http://temp.im/50x50, type=1, createTime=Tue Apr 07 04:37:21 CST 2020, updateTime=Tue Apr 07 04:37:25 CST 2020, nickname=周博洋, blogs=[]), comments=[], tagIds=5)
2020-04-17 00:39:24.219 DEBUG 10280 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id 
2020-04-17 00:39:24.220 DEBUG 10280 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 00:39:24.222 DEBUG 10280 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 00:39:24.223 DEBUG 10280 --- [http-nio-8080-exec-1] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id order by b.update_time desc LIMIT ? 
2020-04-17 00:39:24.223 DEBUG 10280 --- [http-nio-8080-exec-1] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 00:39:24.228 DEBUG 10280 --- [http-nio-8080-exec-1] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 00:39:24.229 DEBUG 10280 --- [http-nio-8080-exec-1] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:39:24.230 DEBUG 10280 --- [http-nio-8080-exec-1] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:39:24.231 DEBUG 10280 --- [http-nio-8080-exec-1] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:39:45.494 DEBUG 10280 --- [http-nio-8080-exec-3] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? 
2020-04-17 00:39:45.494 DEBUG 10280 --- [http-nio-8080-exec-3] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 2(Long)
2020-04-17 00:39:45.498 DEBUG 10280 --- [http-nio-8080-exec-3] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 00:39:45.499  INFO 10280 --- [http-nio-8080-exec-3] com.by.controller.admin.BlogsController  : blog-input-1:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:39:24, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=null)
2020-04-17 00:39:45.500  INFO 10280 --- [http-nio-8080-exec-3] com.by.controller.admin.BlogsController  : blog-input-2:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:39:24, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=5)
2020-04-17 00:39:45.501 DEBUG 10280 --- [http-nio-8080-exec-3] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:39:45.502 DEBUG 10280 --- [http-nio-8080-exec-3] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:39:45.503 DEBUG 10280 --- [http-nio-8080-exec-3] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:39:45.506 DEBUG 10280 --- [http-nio-8080-exec-3] com.by.mapper.TagMapper.listTag          : ==>  Preparing: select * from t_tag 
2020-04-17 00:39:45.508 DEBUG 10280 --- [http-nio-8080-exec-3] com.by.mapper.TagMapper.listTag          : ==> Parameters: 
2020-04-17 00:39:45.509 DEBUG 10280 --- [http-nio-8080-exec-3] com.by.mapper.TagMapper.listTag          : <==      Total: 8
2020-04-17 00:39:49.201 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.TypeMapper.getType         : ==>  Preparing: select id,name from blog.t_type where id = ? 
2020-04-17 00:39:49.202 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.TypeMapper.getType         : ==> Parameters: 6(Long)
2020-04-17 00:39:49.204 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.TypeMapper.getType         : <==      Total: 1
2020-04-17 00:39:49.206 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.TagMapper.listTagByList    : ==>  Preparing: select id,name from t_tag WHERE id in( ? ) 
2020-04-17 00:39:49.207 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.TagMapper.listTagByList    : ==> Parameters: 5(Long)
2020-04-17 00:39:49.208 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.TagMapper.listTagByList    : <==      Total: 1
2020-04-17 00:39:49.211 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.BlogMapper.getBlog         : ==>  Preparing: select * from t_blog where id = ? and published = true 
2020-04-17 00:39:49.212 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.BlogMapper.getBlog         : ==> Parameters: 2(Long)
2020-04-17 00:39:49.215 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.BlogMapper.getBlog         : <==      Total: 1
2020-04-17 00:39:49.215  INFO 10280 --- [http-nio-8080-exec-5] com.by.service.BlogServiceImpl           : blog:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:39:24, description=这是关于插入排序的讲解，一步一步理解插入排序, type=null, tags=[], user=null, comments=[], tagIds=null)
2020-04-17 00:39:49.217 DEBUG 10280 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.updateBlogWithTags      : ==>  Preparing: update t_blog set description = ?,appreciation = ?,commentabled = ?,content = ?,create_time = ?,first_picture = ?,flag = ?, published = ?,recommend = ?,share_statement = ?,title = ?, update_time = ?,views = ?,type_id = ?,user_id = ? where id = ? 
2020-04-17 00:39:49.218 DEBUG 10280 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.updateBlogWithTags      : ==> Parameters: 这是关于插入排序的讲解，一步一步理解插入排序(String), true(Boolean), true(Boolean), ```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```(String), 2020-04-16 21:16:22.0(Timestamp), https://pic.images.ac.cn/image/5e988196aa315(String), 原创(String), false(Boolean), false(Boolean), true(Boolean), 插入排序(String), 2020-04-17 00:39:49(String), 5(Integer), 6(Long), 1(Long), 2(Long)
2020-04-17 00:39:49.248 DEBUG 10280 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.updateBlogWithTags      : <==    Updates: 1
2020-04-17 00:39:49.249 DEBUG 10280 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.deleteBlogWithTags      : ==>  Preparing: delete from t_blog_tags where blog_id = ? 
2020-04-17 00:39:49.249 DEBUG 10280 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.deleteBlogWithTags      : ==> Parameters: 2(Long)
2020-04-17 00:39:49.252 DEBUG 10280 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.deleteBlogWithTags      : <==    Updates: 1
2020-04-17 00:39:49.253 DEBUG 10280 --- [http-nio-8080-exec-5] c.by.mapper.BlogMapper.saveBlogWithTags  : ==>  Preparing: insert into t_blog_tags(blog_id, tag_id) values (?,?) 
2020-04-17 00:39:49.254 DEBUG 10280 --- [http-nio-8080-exec-5] c.by.mapper.BlogMapper.saveBlogWithTags  : ==> Parameters: 2(Long), 5(Long)
2020-04-17 00:39:49.278 DEBUG 10280 --- [http-nio-8080-exec-5] c.by.mapper.BlogMapper.saveBlogWithTags  : <==    Updates: 1
2020-04-17 00:39:49.343  INFO 10280 --- [http-nio-8080-exec-5] com.by.controller.admin.BlogsController  : 成功：Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:39:49, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=User(id=1, username=zhouboyang, password=null, email=2423623805@qq.com, avatar=http://temp.im/50x50, type=1, createTime=Tue Apr 07 04:37:21 CST 2020, updateTime=Tue Apr 07 04:37:25 CST 2020, nickname=周博洋, blogs=[]), comments=[], tagIds=5)
2020-04-17 00:39:49.349 DEBUG 10280 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id 
2020-04-17 00:39:49.349 DEBUG 10280 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 00:39:49.351 DEBUG 10280 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 00:39:49.352 DEBUG 10280 --- [http-nio-8080-exec-6] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id order by b.update_time desc LIMIT ? 
2020-04-17 00:39:49.353 DEBUG 10280 --- [http-nio-8080-exec-6] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 00:39:49.354 DEBUG 10280 --- [http-nio-8080-exec-6] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 00:39:49.356 DEBUG 10280 --- [http-nio-8080-exec-6] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:39:49.356 DEBUG 10280 --- [http-nio-8080-exec-6] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:39:49.357 DEBUG 10280 --- [http-nio-8080-exec-6] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:39:53.086 DEBUG 10280 --- [http-nio-8080-exec-9] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? 
2020-04-17 00:39:53.087 DEBUG 10280 --- [http-nio-8080-exec-9] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 2(Long)
2020-04-17 00:39:53.090 DEBUG 10280 --- [http-nio-8080-exec-9] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 00:39:53.092  INFO 10280 --- [http-nio-8080-exec-9] com.by.controller.admin.BlogsController  : blog-input-1:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:39:49, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=null)
2020-04-17 00:39:53.093  INFO 10280 --- [http-nio-8080-exec-9] com.by.controller.admin.BlogsController  : blog-input-2:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:39:49, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=5)
2020-04-17 00:39:53.094 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:39:53.094 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:39:53.096 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:39:53.098 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TagMapper.listTag          : ==>  Preparing: select * from t_tag 
2020-04-17 00:39:53.099 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TagMapper.listTag          : ==> Parameters: 
2020-04-17 00:39:53.100 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TagMapper.listTag          : <==      Total: 8
2020-04-17 00:39:56.760 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.TypeMapper.getType         : ==>  Preparing: select id,name from blog.t_type where id = ? 
2020-04-17 00:39:56.761 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.TypeMapper.getType         : ==> Parameters: 6(Long)
2020-04-17 00:39:56.762 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.TypeMapper.getType         : <==      Total: 1
2020-04-17 00:39:56.765 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.TagMapper.listTagByList    : ==>  Preparing: select id,name from t_tag WHERE id in( ? ) 
2020-04-17 00:39:56.766 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.TagMapper.listTagByList    : ==> Parameters: 5(Long)
2020-04-17 00:39:56.767 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.TagMapper.listTagByList    : <==      Total: 1
2020-04-17 00:39:56.770 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.BlogMapper.getBlog         : ==>  Preparing: select * from t_blog where id = ? and published = true 
2020-04-17 00:39:56.771 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.BlogMapper.getBlog         : ==> Parameters: 2(Long)
2020-04-17 00:39:56.772 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.BlogMapper.getBlog         : <==      Total: 0
2020-04-17 00:39:56.772  INFO 10280 --- [http-nio-8080-exec-10] com.by.service.BlogServiceImpl           : blog:null
2020-04-17 00:39:56.775 ERROR 10280 --- [http-nio-8080-exec-10] c.by.handler.ControllerExceptionHandler  : Request URL : http://localhost:8080/admin/blogs,Exception : {}

java.lang.NullPointerException: null
	at com.by.service.BlogServiceImpl.saveBlog(BlogServiceImpl.java:68) ~[classes/:na]
	at com.by.service.BlogServiceImpl$$FastClassBySpringCGLIB$$e470c810.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:366) ~[spring-tx-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118) ~[spring-tx-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at com.by.service.BlogServiceImpl$$EnhancerBySpringCGLIB$$ebdd8f70.saveBlog(<generated>) ~[classes/:na]
	at com.by.controller.admin.BlogsController.postBlog(BlogsController.java:90) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_231]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_231]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_231]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_231]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) [spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_231]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_231]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_231]

2020-04-17 00:40:18.902 DEBUG 10280 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? 
2020-04-17 00:40:18.902 DEBUG 10280 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 2(Long)
2020-04-17 00:40:18.904 DEBUG 10280 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 00:40:18.906  INFO 10280 --- [http-nio-8080-exec-4] com.by.controller.admin.BlogsController  : blog-input-1:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:39:49, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=null)
2020-04-17 00:40:18.988  INFO 10280 --- [http-nio-8080-exec-4] com.by.controller.admin.BlogsController  : blog-input-2:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:39:49, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=5)
2020-04-17 00:40:18.989 DEBUG 10280 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:40:18.989 DEBUG 10280 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:40:18.990 DEBUG 10280 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:40:18.992 DEBUG 10280 --- [http-nio-8080-exec-4] com.by.mapper.TagMapper.listTag          : ==>  Preparing: select * from t_tag 
2020-04-17 00:40:18.992 DEBUG 10280 --- [http-nio-8080-exec-4] com.by.mapper.TagMapper.listTag          : ==> Parameters: 
2020-04-17 00:40:18.993 DEBUG 10280 --- [http-nio-8080-exec-4] com.by.mapper.TagMapper.listTag          : <==      Total: 8
2020-04-17 00:42:42.333 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.getType         : ==>  Preparing: select id,name from blog.t_type where id = ? 
2020-04-17 00:42:42.334 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.getType         : ==> Parameters: 6(Long)
2020-04-17 00:42:42.335 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.getType         : <==      Total: 1
2020-04-17 00:42:42.337 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TagMapper.listTagByList    : ==>  Preparing: select id,name from t_tag WHERE id in( ? ) 
2020-04-17 00:42:42.338 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TagMapper.listTagByList    : ==> Parameters: 5(Long)
2020-04-17 00:42:42.338 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TagMapper.listTagByList    : <==      Total: 1
2020-04-17 00:42:42.340 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.BlogMapper.getBlog         : ==>  Preparing: select * from t_blog where id = ? and published = true 
2020-04-17 00:42:42.341 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.BlogMapper.getBlog         : ==> Parameters: 2(Long)
2020-04-17 00:42:42.342 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.BlogMapper.getBlog         : <==      Total: 0
2020-04-17 00:42:42.343  INFO 10280 --- [http-nio-8080-exec-9] com.by.service.BlogServiceImpl           : blog:null
2020-04-17 00:42:42.346 ERROR 10280 --- [http-nio-8080-exec-9] c.by.handler.ControllerExceptionHandler  : Request URL : http://localhost:8080/admin/blogs,Exception : {}

java.lang.NullPointerException: null
	at com.by.service.BlogServiceImpl.saveBlog(BlogServiceImpl.java:68) ~[classes/:na]
	at com.by.service.BlogServiceImpl$$FastClassBySpringCGLIB$$e470c810.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:366) ~[spring-tx-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118) ~[spring-tx-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at com.by.service.BlogServiceImpl$$EnhancerBySpringCGLIB$$ebdd8f70.saveBlog(<generated>) ~[classes/:na]
	at com.by.controller.admin.BlogsController.postBlog(BlogsController.java:90) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_231]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_231]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_231]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_231]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) [spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_231]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_231]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_231]

2020-04-17 00:42:43.923 DEBUG 10280 --- [http-nio-8080-exec-10] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? 
2020-04-17 00:42:43.924 DEBUG 10280 --- [http-nio-8080-exec-10] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 2(Long)
2020-04-17 00:42:43.926 DEBUG 10280 --- [http-nio-8080-exec-10] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 00:42:43.927  INFO 10280 --- [http-nio-8080-exec-10] com.by.controller.admin.BlogsController  : blog-input-1:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:39:49, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=null)
2020-04-17 00:42:43.928  INFO 10280 --- [http-nio-8080-exec-10] com.by.controller.admin.BlogsController  : blog-input-2:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:39:49, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=5)
2020-04-17 00:42:43.929 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:42:43.929 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:42:43.930 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:42:43.932 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.TagMapper.listTag          : ==>  Preparing: select * from t_tag 
2020-04-17 00:42:43.932 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.TagMapper.listTag          : ==> Parameters: 
2020-04-17 00:42:43.933 DEBUG 10280 --- [http-nio-8080-exec-10] com.by.mapper.TagMapper.listTag          : <==      Total: 8
2020-04-17 00:42:48.750 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.TypeMapper.getType         : ==>  Preparing: select id,name from blog.t_type where id = ? 
2020-04-17 00:42:48.751 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.TypeMapper.getType         : ==> Parameters: 6(Long)
2020-04-17 00:42:48.753 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.TypeMapper.getType         : <==      Total: 1
2020-04-17 00:42:48.755 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.TagMapper.listTagByList    : ==>  Preparing: select id,name from t_tag WHERE id in( ? ) 
2020-04-17 00:42:48.756 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.TagMapper.listTagByList    : ==> Parameters: 5(Long)
2020-04-17 00:42:48.757 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.TagMapper.listTagByList    : <==      Total: 1
2020-04-17 00:42:48.760 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.BlogMapper.getBlog         : ==>  Preparing: select * from t_blog where id = ? and published = true 
2020-04-17 00:42:48.760 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.BlogMapper.getBlog         : ==> Parameters: 2(Long)
2020-04-17 00:42:48.762 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.BlogMapper.getBlog         : <==      Total: 0
2020-04-17 00:42:48.762  INFO 10280 --- [http-nio-8080-exec-5] com.by.service.BlogServiceImpl           : blog:null
2020-04-17 00:42:48.766 ERROR 10280 --- [http-nio-8080-exec-5] c.by.handler.ControllerExceptionHandler  : Request URL : http://localhost:8080/admin/blogs,Exception : {}

java.lang.NullPointerException: null
	at com.by.service.BlogServiceImpl.saveBlog(BlogServiceImpl.java:68) ~[classes/:na]
	at com.by.service.BlogServiceImpl$$FastClassBySpringCGLIB$$e470c810.invoke(<generated>) ~[classes/:na]
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218) ~[spring-core-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:366) ~[spring-tx-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:118) ~[spring-tx-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691) ~[spring-aop-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at com.by.service.BlogServiceImpl$$EnhancerBySpringCGLIB$$ebdd8f70.saveBlog(<generated>) ~[classes/:na]
	at com.by.controller.admin.BlogsController.postBlog(BlogsController.java:90) ~[classes/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_231]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_231]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_231]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_231]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909) [spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_231]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_231]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_231]

2020-04-17 00:42:50.922 DEBUG 10280 --- [http-nio-8080-exec-7] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? 
2020-04-17 00:42:50.923 DEBUG 10280 --- [http-nio-8080-exec-7] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 2(Long)
2020-04-17 00:42:50.924 DEBUG 10280 --- [http-nio-8080-exec-7] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 00:42:50.926  INFO 10280 --- [http-nio-8080-exec-7] com.by.controller.admin.BlogsController  : blog-input-1:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:39:49, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=null)
2020-04-17 00:42:50.926  INFO 10280 --- [http-nio-8080-exec-7] com.by.controller.admin.BlogsController  : blog-input-2:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:39:49, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=5)
2020-04-17 00:42:50.927 DEBUG 10280 --- [http-nio-8080-exec-7] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:42:50.928 DEBUG 10280 --- [http-nio-8080-exec-7] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:42:50.929 DEBUG 10280 --- [http-nio-8080-exec-7] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:42:50.931 DEBUG 10280 --- [http-nio-8080-exec-7] com.by.mapper.TagMapper.listTag          : ==>  Preparing: select * from t_tag 
2020-04-17 00:42:50.931 DEBUG 10280 --- [http-nio-8080-exec-7] com.by.mapper.TagMapper.listTag          : ==> Parameters: 
2020-04-17 00:42:50.932 DEBUG 10280 --- [http-nio-8080-exec-7] com.by.mapper.TagMapper.listTag          : <==      Total: 8
2020-04-17 00:42:53.485 DEBUG 10280 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id 
2020-04-17 00:42:53.486 DEBUG 10280 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 00:42:53.487 DEBUG 10280 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 00:42:53.488 DEBUG 10280 --- [http-nio-8080-exec-9] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id order by b.update_time desc LIMIT ? 
2020-04-17 00:42:53.489 DEBUG 10280 --- [http-nio-8080-exec-9] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 00:42:53.492 DEBUG 10280 --- [http-nio-8080-exec-9] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 00:42:53.494 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:42:53.494 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:42:53.496 DEBUG 10280 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:43:01.338 DEBUG 10280 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? 
2020-04-17 00:43:01.339 DEBUG 10280 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 4(Long)
2020-04-17 00:43:01.341 DEBUG 10280 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 2
2020-04-17 00:43:01.343  INFO 10280 --- [http-nio-8080-exec-4] com.by.controller.admin.BlogsController  : blog-input-1:Blog(id=4, title=选择排序, content=```java
public class SelectSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,90,123};
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
//		System.out.println("排序前");
//		System.out.println(Arrays.toString(arr));
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
		selectSort(arr);
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
//		System.out.println("排序后");
//		System.out.println(Arrays.toString(arr));
	}
	//简单选择排序，思想是逐渐从元素组中选择最小的元素，寻找最小值往前排，选出最小的交换，要先选
	public static void selectSort(int[] arr){
		
		//推导的过程发现了规律，因此用for循环解决
		for(int i=0;i<arr.length-1;i++)
		{
			int minIndex = i;//假定的最小值的下标，并不一定是真的最小值
			int min = arr[i];  
			//找到最小值，依次从前向后排
			for(int j=i+1;j<arr.length;j++)
			{
				if(min>arr[j])//说明假定的最小值并不是最小	
				{
					min = arr[j];//重置min
					minIndex = j;//重置minIndex 
				}
			}
			//找到最小值后将最小值放在arr[0]，即交换
			if(minIndex != i)
			{
				arr[minIndex] = arr[i];
				arr[i] = min;
			}		
//			System.out.println("第"+(i+1)+"轮后~");
//			System.out.println(Arrays.toString(arr));
		}			
		/**
		 * 
		
		//逐步推导的方式，先选出假定的最小值，然后比较，找出最小值
		//第1轮
		//原始数组：101、34、119、1
		//第一轮排序：1，34，119，101
		//算法先简单--》再复杂，就可以把一个复杂的算法，拆分成简单的问题-》逐步解决
		//第1轮
		int minIndex = 0;//假定的最小值的下标，并不一定是真的最小值
		int min = arr[0];
		for(int j=0+1;j<arr.length;j++)
		{
			if(min>arr[j])//说明假定的最小值并不是最小
			{
				min = arr[j];//重置min
				minIndex = j;//重置minIndex 
			}
		}
		//将最小值放在arr[0]，即交换
		if(minIndex != 0)
		{
			arr[minIndex] = arr[0];
			arr[0] = min;
		}		
		System.out.println("第1轮后~");
		System.out.println(Arrays.toString(arr));
		
		//第2轮
		minIndex = 1;//假定的最小值的下标，并不一定是真的最小值
		min = arr[1];
		for(int j=1+1;j<arr.length;j++)
		{
			if(min>arr[j])//说明假定的最小值并不是最小
			{
				min = arr[j];//重置min
				minIndex = j;//重置minIndex 
			}
		}
		//将最小值放在arr[0]，即交换
		if(minIndex != 1)
		{
			arr[minIndex] = arr[1];
			arr[1] = min;
		}		
		System.out.println("第2轮后~");
		System.out.println(Arrays.toString(arr));
		
		//第3轮
		minIndex = 2;//假定的最小值的下标，并不一定是真的最小值
		min = arr[2];
		for(int j=2+1;j<arr.length;j++)
		{
			if(min>arr[j])//说明假定的最小值并不是最小
			{
				min = arr[j];//重置min
				minIndex = j;//重置minIndex 
			}
		}
		//将最小值放在arr[0]，即交换
		if(minIndex != 2)
		{
			arr[minIndex] = arr[2];
			arr[2] = min;
		}		
		System.out.println("第3轮后~");
		System.out.println(Arrays.toString(arr));
		 */
	}

}

```, firstPicture=https://pic.images.ac.cn/image/5e9879df7ae6f, flag=原创, views=2, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=Thu Apr 16 21:50:38 CST 2020, updateTime=2020-04-16 23:59:35, description=这是选择排序的讲解，有助于你理解选择排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=7, name=排序, blogs=[]), Tag(id=8, name=选择排序, blogs=[])], user=null, comments=[], tagIds=null)
2020-04-17 00:43:01.344  INFO 10280 --- [http-nio-8080-exec-4] com.by.controller.admin.BlogsController  : blog-input-2:Blog(id=4, title=选择排序, content=```java
public class SelectSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,90,123};
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
//		System.out.println("排序前");
//		System.out.println(Arrays.toString(arr));
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
		selectSort(arr);
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
//		System.out.println("排序后");
//		System.out.println(Arrays.toString(arr));
	}
	//简单选择排序，思想是逐渐从元素组中选择最小的元素，寻找最小值往前排，选出最小的交换，要先选
	public static void selectSort(int[] arr){
		
		//推导的过程发现了规律，因此用for循环解决
		for(int i=0;i<arr.length-1;i++)
		{
			int minIndex = i;//假定的最小值的下标，并不一定是真的最小值
			int min = arr[i];  
			//找到最小值，依次从前向后排
			for(int j=i+1;j<arr.length;j++)
			{
				if(min>arr[j])//说明假定的最小值并不是最小	
				{
					min = arr[j];//重置min
					minIndex = j;//重置minIndex 
				}
			}
			//找到最小值后将最小值放在arr[0]，即交换
			if(minIndex != i)
			{
				arr[minIndex] = arr[i];
				arr[i] = min;
			}		
//			System.out.println("第"+(i+1)+"轮后~");
//			System.out.println(Arrays.toString(arr));
		}			
		/**
		 * 
		
		//逐步推导的方式，先选出假定的最小值，然后比较，找出最小值
		//第1轮
		//原始数组：101、34、119、1
		//第一轮排序：1，34，119，101
		//算法先简单--》再复杂，就可以把一个复杂的算法，拆分成简单的问题-》逐步解决
		//第1轮
		int minIndex = 0;//假定的最小值的下标，并不一定是真的最小值
		int min = arr[0];
		for(int j=0+1;j<arr.length;j++)
		{
			if(min>arr[j])//说明假定的最小值并不是最小
			{
				min = arr[j];//重置min
				minIndex = j;//重置minIndex 
			}
		}
		//将最小值放在arr[0]，即交换
		if(minIndex != 0)
		{
			arr[minIndex] = arr[0];
			arr[0] = min;
		}		
		System.out.println("第1轮后~");
		System.out.println(Arrays.toString(arr));
		
		//第2轮
		minIndex = 1;//假定的最小值的下标，并不一定是真的最小值
		min = arr[1];
		for(int j=1+1;j<arr.length;j++)
		{
			if(min>arr[j])//说明假定的最小值并不是最小
			{
				min = arr[j];//重置min
				minIndex = j;//重置minIndex 
			}
		}
		//将最小值放在arr[0]，即交换
		if(minIndex != 1)
		{
			arr[minIndex] = arr[1];
			arr[1] = min;
		}		
		System.out.println("第2轮后~");
		System.out.println(Arrays.toString(arr));
		
		//第3轮
		minIndex = 2;//假定的最小值的下标，并不一定是真的最小值
		min = arr[2];
		for(int j=2+1;j<arr.length;j++)
		{
			if(min>arr[j])//说明假定的最小值并不是最小
			{
				min = arr[j];//重置min
				minIndex = j;//重置minIndex 
			}
		}
		//将最小值放在arr[0]，即交换
		if(minIndex != 2)
		{
			arr[minIndex] = arr[2];
			arr[2] = min;
		}		
		System.out.println("第3轮后~");
		System.out.println(Arrays.toString(arr));
		 */
	}

}

```, firstPicture=https://pic.images.ac.cn/image/5e9879df7ae6f, flag=原创, views=2, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=Thu Apr 16 21:50:38 CST 2020, updateTime=2020-04-16 23:59:35, description=这是选择排序的讲解，有助于你理解选择排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=7, name=排序, blogs=[]), Tag(id=8, name=选择排序, blogs=[])], user=null, comments=[], tagIds=7,8)
2020-04-17 00:43:01.344 DEBUG 10280 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:43:01.345 DEBUG 10280 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:43:01.346 DEBUG 10280 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:43:01.349 DEBUG 10280 --- [http-nio-8080-exec-4] com.by.mapper.TagMapper.listTag          : ==>  Preparing: select * from t_tag 
2020-04-17 00:43:01.350 DEBUG 10280 --- [http-nio-8080-exec-4] com.by.mapper.TagMapper.listTag          : ==> Parameters: 
2020-04-17 00:43:01.351 DEBUG 10280 --- [http-nio-8080-exec-4] com.by.mapper.TagMapper.listTag          : <==      Total: 8
2020-04-17 00:43:13.044 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.TypeMapper.getType         : ==>  Preparing: select id,name from blog.t_type where id = ? 
2020-04-17 00:43:13.045 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.TypeMapper.getType         : ==> Parameters: 6(Long)
2020-04-17 00:43:13.046 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.TypeMapper.getType         : <==      Total: 1
2020-04-17 00:43:13.048 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.TagMapper.listTagByList    : ==>  Preparing: select id,name from t_tag WHERE id in( ? , ? ) 
2020-04-17 00:43:13.049 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.TagMapper.listTagByList    : ==> Parameters: 7(Long), 8(Long)
2020-04-17 00:43:13.050 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.TagMapper.listTagByList    : <==      Total: 2
2020-04-17 00:43:13.052 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.BlogMapper.getBlog         : ==>  Preparing: select * from t_blog where id = ? and published = true 
2020-04-17 00:43:13.053 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.BlogMapper.getBlog         : ==> Parameters: 4(Long)
2020-04-17 00:43:13.060 DEBUG 10280 --- [http-nio-8080-exec-5] com.by.mapper.BlogMapper.getBlog         : <==      Total: 1
2020-04-17 00:43:13.061  INFO 10280 --- [http-nio-8080-exec-5] com.by.service.BlogServiceImpl           : blog:Blog(id=4, title=选择排序, content=```java
public class SelectSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,90,123};
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
//		System.out.println("排序前");
//		System.out.println(Arrays.toString(arr));
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
		selectSort(arr);
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
//		System.out.println("排序后");
//		System.out.println(Arrays.toString(arr));
	}
	//简单选择排序，思想是逐渐从元素组中选择最小的元素，寻找最小值往前排，选出最小的交换，要先选
	public static void selectSort(int[] arr){
		
		//推导的过程发现了规律，因此用for循环解决
		for(int i=0;i<arr.length-1;i++)
		{
			int minIndex = i;//假定的最小值的下标，并不一定是真的最小值
			int min = arr[i];  
			//找到最小值，依次从前向后排
			for(int j=i+1;j<arr.length;j++)
			{
				if(min>arr[j])//说明假定的最小值并不是最小	
				{
					min = arr[j];//重置min
					minIndex = j;//重置minIndex 
				}
			}
			//找到最小值后将最小值放在arr[0]，即交换
			if(minIndex != i)
			{
				arr[minIndex] = arr[i];
				arr[i] = min;
			}		
//			System.out.println("第"+(i+1)+"轮后~");
//			System.out.println(Arrays.toString(arr));
		}			
		/**
		 * 
		
		//逐步推导的方式，先选出假定的最小值，然后比较，找出最小值
		//第1轮
		//原始数组：101、34、119、1
		//第一轮排序：1，34，119，101
		//算法先简单--》再复杂，就可以把一个复杂的算法，拆分成简单的问题-》逐步解决
		//第1轮
		int minIndex = 0;//假定的最小值的下标，并不一定是真的最小值
		int min = arr[0];
		for(int j=0+1;j<arr.length;j++)
		{
			if(min>arr[j])//说明假定的最小值并不是最小
			{
				min = arr[j];//重置min
				minIndex = j;//重置minIndex 
			}
		}
		//将最小值放在arr[0]，即交换
		if(minIndex != 0)
		{
			arr[minIndex] = arr[0];
			arr[0] = min;
		}		
		System.out.println("第1轮后~");
		System.out.println(Arrays.toString(arr));
		
		//第2轮
		minIndex = 1;//假定的最小值的下标，并不一定是真的最小值
		min = arr[1];
		for(int j=1+1;j<arr.length;j++)
		{
			if(min>arr[j])//说明假定的最小值并不是最小
			{
				min = arr[j];//重置min
				minIndex = j;//重置minIndex 
			}
		}
		//将最小值放在arr[0]，即交换
		if(minIndex != 1)
		{
			arr[minIndex] = arr[1];
			arr[1] = min;
		}		
		System.out.println("第2轮后~");
		System.out.println(Arrays.toString(arr));
		
		//第3轮
		minIndex = 2;//假定的最小值的下标，并不一定是真的最小值
		min = arr[2];
		for(int j=2+1;j<arr.length;j++)
		{
			if(min>arr[j])//说明假定的最小值并不是最小
			{
				min = arr[j];//重置min
				minIndex = j;//重置minIndex 
			}
		}
		//将最小值放在arr[0]，即交换
		if(minIndex != 2)
		{
			arr[minIndex] = arr[2];
			arr[2] = min;
		}		
		System.out.println("第3轮后~");
		System.out.println(Arrays.toString(arr));
		 */
	}

}

```, firstPicture=https://pic.images.ac.cn/image/5e9879df7ae6f, flag=原创, views=2, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=Thu Apr 16 21:50:38 CST 2020, updateTime=2020-04-16 23:59:35, description=这是选择排序的讲解，有助于你理解选择排序, type=null, tags=[], user=null, comments=[], tagIds=null)
2020-04-17 00:43:13.062 DEBUG 10280 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.updateBlogWithTags      : ==>  Preparing: update t_blog set description = ?,appreciation = ?,commentabled = ?,content = ?,create_time = ?,first_picture = ?,flag = ?, published = ?,recommend = ?,share_statement = ?,title = ?, update_time = ?,views = ?,type_id = ?,user_id = ? where id = ? 
2020-04-17 00:43:13.064 DEBUG 10280 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.updateBlogWithTags      : ==> Parameters: 这是选择排序的讲解，有助于你理解选择排序(String), true(Boolean), true(Boolean), ```java
public class SelectSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,90,123};
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
//		System.out.println("排序前");
//		System.out.println(Arrays.toString(arr));
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
		selectSort(arr);
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
//		System.out.println("排序后");
//		System.out.println(Arrays.toString(arr));
	}
	//简单选择排序，思想是逐渐从元素组中选择最小的元素，寻找最小值往前排，选出最小的交换，要先选
	public static void selectSort(int[] arr){
		
		//推导的过程发现了规律，因此用for循环解决
		for(int i=0;i<arr.length-1;i++)
		{
			int minIndex = i;//假定的最小值的下标，并不一定是真的最小值
			int min = arr[i];  
			//找到最小值，依次从前向后排
			for(int j=i+1;j<arr.length;j++)
			{
				if(min>arr[j])//说明假定的最小值并不是最小	
				{
					min = arr[j];//重置min
					minIndex = j;//重置minIndex 
				}
			}
			//找到最小值后将最小值放在arr[0]，即交换
			if(minIndex != i)
			{
				arr[minIndex] = arr[i];
				arr[i] = min;
			}		
//			System.out.println("第"+(i+1)+"轮后~");
//			System.out.println(Arrays.toString(arr));
		}			
		/**
		 * 
		
		//逐步推导的方式，先选出假定的最小值，然后比较，找出最小值
		//第1轮
		//原始数组：101、34、119、1
		//第一轮排序：1，34，119，101
		//算法先简单--》再复杂，就可以把一个复杂的算法，拆分成简单的问题-》逐步解决
		//第1轮
		int minIndex = 0;//假定的最小值的下标，并不一定是真的最小值
		int min = arr[0];
		for(int j=0+1;j<arr.length;j++)
		{
			if(min>arr[j])//说明假定的最小值并不是最小
			{
				min = arr[j];//重置min
				minIndex = j;//重置minIndex 
			}
		}
		//将最小值放在arr[0]，即交换
		if(minIndex != 0)
		{
			arr[minIndex] = arr[0];
			arr[0] = min;
		}		
		System.out.println("第1轮后~");
		System.out.println(Arrays.toString(arr));
		
		//第2轮
		minIndex = 1;//假定的最小值的下标，并不一定是真的最小值
		min = arr[1];
		for(int j=1+1;j<arr.length;j++)
		{
			if(min>arr[j])//说明假定的最小值并不是最小
			{
				min = arr[j];//重置min
				minIndex = j;//重置minIndex 
			}
		}
		//将最小值放在arr[0]，即交换
		if(minIndex != 1)
		{
			arr[minIndex] = arr[1];
			arr[1] = min;
		}		
		System.out.println("第2轮后~");
		System.out.println(Arrays.toString(arr));
		
		//第3轮
		minIndex = 2;//假定的最小值的下标，并不一定是真的最小值
		min = arr[2];
		for(int j=2+1;j<arr.length;j++)
		{
			if(min>arr[j])//说明假定的最小值并不是最小
			{
				min = arr[j];//重置min
				minIndex = j;//重置minIndex 
			}
		}
		//将最小值放在arr[0]，即交换
		if(minIndex != 2)
		{
			arr[minIndex] = arr[2];
			arr[2] = min;
		}		
		System.out.println("第3轮后~");
		System.out.println(Arrays.toString(arr));
		 */
	}

}

```(String), 2020-04-16 21:50:38.0(Timestamp), https://pic.images.ac.cn/image/5e9879df7ae6f(String), 原创(String), true(Boolean), true(Boolean), true(Boolean), 选择排序(String), 2020-04-17 00:43:13(String), 2(Integer), 6(Long), 1(Long), 4(Long)
2020-04-17 00:43:13.087 DEBUG 10280 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.updateBlogWithTags      : <==    Updates: 1
2020-04-17 00:43:13.087 DEBUG 10280 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.deleteBlogWithTags      : ==>  Preparing: delete from t_blog_tags where blog_id = ? 
2020-04-17 00:43:13.087 DEBUG 10280 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.deleteBlogWithTags      : ==> Parameters: 4(Long)
2020-04-17 00:43:13.088 DEBUG 10280 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.deleteBlogWithTags      : <==    Updates: 2
2020-04-17 00:43:13.090 DEBUG 10280 --- [http-nio-8080-exec-5] c.by.mapper.BlogMapper.saveBlogWithTags  : ==>  Preparing: insert into t_blog_tags(blog_id, tag_id) values (?,?) , (?,?) 
2020-04-17 00:43:13.091 DEBUG 10280 --- [http-nio-8080-exec-5] c.by.mapper.BlogMapper.saveBlogWithTags  : ==> Parameters: 4(Long), 7(Long), 4(Long), 8(Long)
2020-04-17 00:43:13.092 DEBUG 10280 --- [http-nio-8080-exec-5] c.by.mapper.BlogMapper.saveBlogWithTags  : <==    Updates: 2
2020-04-17 00:43:13.145  INFO 10280 --- [http-nio-8080-exec-5] com.by.controller.admin.BlogsController  : 成功：Blog(id=4, title=选择排序, content=```java
public class SelectSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,90,123};
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
//		System.out.println("排序前");
//		System.out.println(Arrays.toString(arr));
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
		selectSort(arr);
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
//		System.out.println("排序后");
//		System.out.println(Arrays.toString(arr));
	}
	//简单选择排序，思想是逐渐从元素组中选择最小的元素，寻找最小值往前排，选出最小的交换，要先选
	public static void selectSort(int[] arr){
		
		//推导的过程发现了规律，因此用for循环解决
		for(int i=0;i<arr.length-1;i++)
		{
			int minIndex = i;//假定的最小值的下标，并不一定是真的最小值
			int min = arr[i];  
			//找到最小值，依次从前向后排
			for(int j=i+1;j<arr.length;j++)
			{
				if(min>arr[j])//说明假定的最小值并不是最小	
				{
					min = arr[j];//重置min
					minIndex = j;//重置minIndex 
				}
			}
			//找到最小值后将最小值放在arr[0]，即交换
			if(minIndex != i)
			{
				arr[minIndex] = arr[i];
				arr[i] = min;
			}		
//			System.out.println("第"+(i+1)+"轮后~");
//			System.out.println(Arrays.toString(arr));
		}			
		/**
		 * 
		
		//逐步推导的方式，先选出假定的最小值，然后比较，找出最小值
		//第1轮
		//原始数组：101、34、119、1
		//第一轮排序：1，34，119，101
		//算法先简单--》再复杂，就可以把一个复杂的算法，拆分成简单的问题-》逐步解决
		//第1轮
		int minIndex = 0;//假定的最小值的下标，并不一定是真的最小值
		int min = arr[0];
		for(int j=0+1;j<arr.length;j++)
		{
			if(min>arr[j])//说明假定的最小值并不是最小
			{
				min = arr[j];//重置min
				minIndex = j;//重置minIndex 
			}
		}
		//将最小值放在arr[0]，即交换
		if(minIndex != 0)
		{
			arr[minIndex] = arr[0];
			arr[0] = min;
		}		
		System.out.println("第1轮后~");
		System.out.println(Arrays.toString(arr));
		
		//第2轮
		minIndex = 1;//假定的最小值的下标，并不一定是真的最小值
		min = arr[1];
		for(int j=1+1;j<arr.length;j++)
		{
			if(min>arr[j])//说明假定的最小值并不是最小
			{
				min = arr[j];//重置min
				minIndex = j;//重置minIndex 
			}
		}
		//将最小值放在arr[0]，即交换
		if(minIndex != 1)
		{
			arr[minIndex] = arr[1];
			arr[1] = min;
		}		
		System.out.println("第2轮后~");
		System.out.println(Arrays.toString(arr));
		
		//第3轮
		minIndex = 2;//假定的最小值的下标，并不一定是真的最小值
		min = arr[2];
		for(int j=2+1;j<arr.length;j++)
		{
			if(min>arr[j])//说明假定的最小值并不是最小
			{
				min = arr[j];//重置min
				minIndex = j;//重置minIndex 
			}
		}
		//将最小值放在arr[0]，即交换
		if(minIndex != 2)
		{
			arr[minIndex] = arr[2];
			arr[2] = min;
		}		
		System.out.println("第3轮后~");
		System.out.println(Arrays.toString(arr));
		 */
	}

}

```, firstPicture=https://pic.images.ac.cn/image/5e9879df7ae6f, flag=原创, views=2, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=Thu Apr 16 21:50:38 CST 2020, updateTime=2020-04-17 00:43:13, description=这是选择排序的讲解，有助于你理解选择排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=7, name=排序, blogs=[]), Tag(id=8, name=选择排序, blogs=[])], user=User(id=1, username=zhouboyang, password=null, email=2423623805@qq.com, avatar=http://temp.im/50x50, type=1, createTime=Tue Apr 07 04:37:21 CST 2020, updateTime=Tue Apr 07 04:37:25 CST 2020, nickname=周博洋, blogs=[]), comments=[], tagIds=7,8)
2020-04-17 00:43:13.153 DEBUG 10280 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id 
2020-04-17 00:43:13.153 DEBUG 10280 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 00:43:13.155 DEBUG 10280 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 00:43:13.156 DEBUG 10280 --- [http-nio-8080-exec-2] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id order by b.update_time desc LIMIT ? 
2020-04-17 00:43:13.156 DEBUG 10280 --- [http-nio-8080-exec-2] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 00:43:13.158 DEBUG 10280 --- [http-nio-8080-exec-2] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 00:43:13.159 DEBUG 10280 --- [http-nio-8080-exec-2] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:43:13.160 DEBUG 10280 --- [http-nio-8080-exec-2] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:43:13.161 DEBUG 10280 --- [http-nio-8080-exec-2] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:47:32.392  INFO 10432 --- [main] com.by.BlogApplication                   : Starting BlogApplication on SD-20190630IDLV with PID 10432 (F:\Project\blog\target\classes started by Administrator in F:\Project\blog)
2020-04-17 00:47:32.425 DEBUG 10432 --- [main] com.by.BlogApplication                   : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 00:47:32.425  INFO 10432 --- [main] com.by.BlogApplication                   : The following profiles are active: dev
2020-04-17 00:47:35.306  INFO 10432 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-17 00:47:35.349  INFO 10432 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-17 00:47:35.349  INFO 10432 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-17 00:47:35.840  INFO 10432 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-17 00:47:35.840  INFO 10432 --- [main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3219 ms
2020-04-17 00:47:37.660  INFO 10432 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 00:47:37.782  INFO 10432 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 00:47:38.246  INFO 10432 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-17 00:47:38.250  INFO 10432 --- [main] com.by.BlogApplication                   : Started BlogApplication in 9.384 seconds (JVM running for 17.911)
2020-04-17 00:48:27.385  INFO 10432 --- [http-nio-8080-exec-2] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1587011901,1587014773,1587017022; Hm_lpvt_38911ce56b435d67224d876856bc0eb0=1587046402; monitor_count=1648; JSESSIONID=96F3EECDAC5FC30A0B3E6190D63B0264] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-17 00:48:27.392  INFO 10432 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-17 00:48:27.393  INFO 10432 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-17 00:48:27.413  INFO 10432 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 20 ms
2020-04-17 00:48:38.832  INFO 10432 --- [http-nio-8080-exec-6] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 00:48:39.225 DEBUG 10432 --- [http-nio-8080-exec-6] com.by.mapper.UserMapper.checkUser       : ==>  Preparing: select * from t_user where user_name = ? and pass_word = ? 
2020-04-17 00:48:39.260 DEBUG 10432 --- [http-nio-8080-exec-6] com.by.mapper.UserMapper.checkUser       : ==> Parameters: zhouboyang(String), 96e79218965eb72c92a549dd5a330112(String)
2020-04-17 00:48:39.337 DEBUG 10432 --- [http-nio-8080-exec-6] com.by.mapper.UserMapper.checkUser       : <==      Total: 1
2020-04-17 00:48:41.379 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id 
2020-04-17 00:48:41.379 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 00:48:41.506 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 00:48:41.508 DEBUG 10432 --- [http-nio-8080-exec-8] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id order by b.update_time desc LIMIT ? 
2020-04-17 00:48:41.509 DEBUG 10432 --- [http-nio-8080-exec-8] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 00:48:41.528 DEBUG 10432 --- [http-nio-8080-exec-8] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 00:48:41.536 DEBUG 10432 --- [http-nio-8080-exec-8] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:48:41.537 DEBUG 10432 --- [http-nio-8080-exec-8] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:48:41.539 DEBUG 10432 --- [http-nio-8080-exec-8] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:48:45.436 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.recommend = ? 
2020-04-17 00:48:45.437 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 0(Integer)
2020-04-17 00:48:45.438 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:48:45.440 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.recommend = ? LIMIT ?, ? 
2020-04-17 00:48:45.442 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 0(Integer), 3(Integer), 3(Integer)
2020-04-17 00:48:45.443 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 0
2020-04-17 00:48:46.701 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.recommend = ? 
2020-04-17 00:48:46.702 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 0(Integer)
2020-04-17 00:48:46.704 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:48:46.705 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.recommend = ? LIMIT ? 
2020-04-17 00:48:46.706 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 0(Integer), 3(Integer)
2020-04-17 00:48:46.708 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 1
2020-04-17 00:48:51.901 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.recommend = ? 
2020-04-17 00:48:51.901 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 1(Integer)
2020-04-17 00:48:51.902 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:48:51.905 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.recommend = ? LIMIT ? 
2020-04-17 00:48:51.905 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 1(Integer), 3(Integer)
2020-04-17 00:48:51.907 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 3
2020-04-17 00:48:54.726 DEBUG 10432 --- [http-nio-8080-exec-2] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.recommend = ? 
2020-04-17 00:48:54.727 DEBUG 10432 --- [http-nio-8080-exec-2] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 0(Integer)
2020-04-17 00:48:54.728 DEBUG 10432 --- [http-nio-8080-exec-2] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:48:54.729 DEBUG 10432 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.recommend = ? LIMIT ? 
2020-04-17 00:48:54.730 DEBUG 10432 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 0(Integer), 3(Integer)
2020-04-17 00:48:54.732 DEBUG 10432 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 1
2020-04-17 00:48:58.000 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:48:58.002 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 6(Long), 0(Integer)
2020-04-17 00:48:58.003 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:48:58.006 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.type_id = ? and b.recommend = ? LIMIT ? 
2020-04-17 00:48:58.007 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 6(Long), 0(Integer), 3(Integer)
2020-04-17 00:48:58.008 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 1
2020-04-17 00:48:58.778 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:48:58.779 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 6(Long), 0(Integer)
2020-04-17 00:48:58.781 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:48:58.782 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.type_id = ? and b.recommend = ? LIMIT ? 
2020-04-17 00:48:58.783 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 6(Long), 0(Integer), 3(Integer)
2020-04-17 00:48:58.786 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 1
2020-04-17 00:49:00.369 DEBUG 10432 --- [http-nio-8080-exec-6] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:49:00.370 DEBUG 10432 --- [http-nio-8080-exec-6] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 6(Long), 1(Integer)
2020-04-17 00:49:00.372 DEBUG 10432 --- [http-nio-8080-exec-6] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:49:00.373 DEBUG 10432 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.type_id = ? and b.recommend = ? LIMIT ? 
2020-04-17 00:49:00.373 DEBUG 10432 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 6(Long), 1(Integer), 3(Integer)
2020-04-17 00:49:00.378 DEBUG 10432 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 3
2020-04-17 00:49:03.432 DEBUG 10432 --- [http-nio-8080-exec-7] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:49:03.434 DEBUG 10432 --- [http-nio-8080-exec-7] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 2(Long), 1(Integer)
2020-04-17 00:49:03.435 DEBUG 10432 --- [http-nio-8080-exec-7] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:49:06.508 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:49:06.510 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 2(Long), 0(Integer)
2020-04-17 00:49:06.512 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:49:08.145 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:49:08.146 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 2(Long), 0(Integer)
2020-04-17 00:49:08.149 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:49:10.263 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.recommend = ? 
2020-04-17 00:49:10.264 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 0(Integer)
2020-04-17 00:49:10.265 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:49:10.267 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.recommend = ? LIMIT ? 
2020-04-17 00:49:10.268 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 0(Integer), 3(Integer)
2020-04-17 00:49:10.271 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 1
2020-04-17 00:49:14.076 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? 
2020-04-17 00:49:14.077 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 2(Long)
2020-04-17 00:49:14.117 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 00:49:14.119  INFO 10432 --- [http-nio-8080-exec-3] com.by.controller.admin.BlogsController  : blog-input-1:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:39:49, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=null)
2020-04-17 00:49:14.120  INFO 10432 --- [http-nio-8080-exec-3] com.by.controller.admin.BlogsController  : blog-input-2:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:39:49, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=5)
2020-04-17 00:49:14.121 DEBUG 10432 --- [http-nio-8080-exec-3] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:49:14.121 DEBUG 10432 --- [http-nio-8080-exec-3] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:49:14.123 DEBUG 10432 --- [http-nio-8080-exec-3] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:49:14.131 DEBUG 10432 --- [http-nio-8080-exec-3] com.by.mapper.TagMapper.listTag          : ==>  Preparing: select * from t_tag 
2020-04-17 00:49:14.132 DEBUG 10432 --- [http-nio-8080-exec-3] com.by.mapper.TagMapper.listTag          : ==> Parameters: 
2020-04-17 00:49:14.162 DEBUG 10432 --- [http-nio-8080-exec-3] com.by.mapper.TagMapper.listTag          : <==      Total: 8
2020-04-17 00:49:19.122 DEBUG 10432 --- [http-nio-8080-exec-2] com.by.mapper.TypeMapper.getType         : ==>  Preparing: select id,name from blog.t_type where id = ? 
2020-04-17 00:49:19.122 DEBUG 10432 --- [http-nio-8080-exec-2] com.by.mapper.TypeMapper.getType         : ==> Parameters: 6(Long)
2020-04-17 00:49:19.123 DEBUG 10432 --- [http-nio-8080-exec-2] com.by.mapper.TypeMapper.getType         : <==      Total: 1
2020-04-17 00:49:19.138 DEBUG 10432 --- [http-nio-8080-exec-2] com.by.mapper.TagMapper.listTagByList    : ==>  Preparing: select id,name from t_tag WHERE id in( ? ) 
2020-04-17 00:49:19.138 DEBUG 10432 --- [http-nio-8080-exec-2] com.by.mapper.TagMapper.listTagByList    : ==> Parameters: 5(Long)
2020-04-17 00:49:19.139 DEBUG 10432 --- [http-nio-8080-exec-2] com.by.mapper.TagMapper.listTagByList    : <==      Total: 1
2020-04-17 00:49:19.142 DEBUG 10432 --- [http-nio-8080-exec-2] com.by.mapper.BlogMapper.getBlog         : ==>  Preparing: select * from t_blog where id = ? 
2020-04-17 00:49:19.143 DEBUG 10432 --- [http-nio-8080-exec-2] com.by.mapper.BlogMapper.getBlog         : ==> Parameters: 2(Long)
2020-04-17 00:49:19.145 DEBUG 10432 --- [http-nio-8080-exec-2] com.by.mapper.BlogMapper.getBlog         : <==      Total: 1
2020-04-17 00:49:19.146  INFO 10432 --- [http-nio-8080-exec-2] com.by.service.BlogServiceImpl           : blog:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:39:49, description=这是关于插入排序的讲解，一步一步理解插入排序, type=null, tags=[], user=null, comments=[], tagIds=null)
2020-04-17 00:49:19.147 DEBUG 10432 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.updateBlogWithTags      : ==>  Preparing: update t_blog set description = ?,appreciation = ?,commentabled = ?,content = ?,create_time = ?,first_picture = ?,flag = ?, published = ?,recommend = ?,share_statement = ?,title = ?, update_time = ?,views = ?,type_id = ?,user_id = ? where id = ? 
2020-04-17 00:49:19.152 DEBUG 10432 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.updateBlogWithTags      : ==> Parameters: 这是关于插入排序的讲解，一步一步理解插入排序(String), true(Boolean), true(Boolean), ```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```(String), 2020-04-16 21:16:22.0(Timestamp), https://pic.images.ac.cn/image/5e988196aa315(String), 原创(String), true(Boolean), false(Boolean), true(Boolean), 插入排序(String), 2020-04-17 00:49:19(String), 5(Integer), 6(Long), 1(Long), 2(Long)
2020-04-17 00:49:19.183 DEBUG 10432 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.updateBlogWithTags      : <==    Updates: 1
2020-04-17 00:49:19.184 DEBUG 10432 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.deleteBlogWithTags      : ==>  Preparing: delete from t_blog_tags where blog_id = ? 
2020-04-17 00:49:19.184 DEBUG 10432 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.deleteBlogWithTags      : ==> Parameters: 2(Long)
2020-04-17 00:49:19.185 DEBUG 10432 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.deleteBlogWithTags      : <==    Updates: 1
2020-04-17 00:49:19.187 DEBUG 10432 --- [http-nio-8080-exec-2] c.by.mapper.BlogMapper.saveBlogWithTags  : ==>  Preparing: insert into t_blog_tags(blog_id, tag_id) values (?,?) 
2020-04-17 00:49:19.188 DEBUG 10432 --- [http-nio-8080-exec-2] c.by.mapper.BlogMapper.saveBlogWithTags  : ==> Parameters: 2(Long), 5(Long)
2020-04-17 00:49:19.207 DEBUG 10432 --- [http-nio-8080-exec-2] c.by.mapper.BlogMapper.saveBlogWithTags  : <==    Updates: 1
2020-04-17 00:49:19.268  INFO 10432 --- [http-nio-8080-exec-2] com.by.controller.admin.BlogsController  : 成功：Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:49:19, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=User(id=1, username=zhouboyang, password=null, email=2423623805@qq.com, avatar=http://temp.im/50x50, type=1, createTime=Tue Apr 07 04:37:21 CST 2020, updateTime=Tue Apr 07 04:37:25 CST 2020, nickname=周博洋, blogs=[]), comments=[], tagIds=5)
2020-04-17 00:49:19.301 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id 
2020-04-17 00:49:19.302 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 00:49:19.303 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 00:49:19.303 DEBUG 10432 --- [http-nio-8080-exec-4] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id order by b.update_time desc LIMIT ? 
2020-04-17 00:49:19.304 DEBUG 10432 --- [http-nio-8080-exec-4] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 00:49:19.308 DEBUG 10432 --- [http-nio-8080-exec-4] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 00:49:19.310 DEBUG 10432 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:49:19.310 DEBUG 10432 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:49:19.311 DEBUG 10432 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:49:25.001 DEBUG 10432 --- [http-nio-8080-exec-6] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.recommend = ? 
2020-04-17 00:49:25.002 DEBUG 10432 --- [http-nio-8080-exec-6] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 1(Integer)
2020-04-17 00:49:25.003 DEBUG 10432 --- [http-nio-8080-exec-6] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:49:25.004 DEBUG 10432 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.recommend = ? LIMIT ? 
2020-04-17 00:49:25.005 DEBUG 10432 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 1(Integer), 3(Integer)
2020-04-17 00:49:25.007 DEBUG 10432 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 3
2020-04-17 00:49:30.164 DEBUG 10432 --- [http-nio-8080-exec-7] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.recommend = ? 
2020-04-17 00:49:30.165 DEBUG 10432 --- [http-nio-8080-exec-7] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 0(Integer)
2020-04-17 00:49:30.169 DEBUG 10432 --- [http-nio-8080-exec-7] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:49:30.170 DEBUG 10432 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.recommend = ? LIMIT ? 
2020-04-17 00:49:30.170 DEBUG 10432 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 0(Integer), 3(Integer)
2020-04-17 00:49:30.171 DEBUG 10432 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 1
2020-04-17 00:49:32.530 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.recommend = ? 
2020-04-17 00:49:32.531 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 1(Integer)
2020-04-17 00:49:32.532 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:49:32.533 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.recommend = ? LIMIT ? 
2020-04-17 00:49:32.534 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 1(Integer), 3(Integer)
2020-04-17 00:49:32.536 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 3
2020-04-17 00:49:38.778 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:49:38.779 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 6(Long), 1(Integer)
2020-04-17 00:49:38.780 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:49:38.781 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.type_id = ? and b.recommend = ? LIMIT ? 
2020-04-17 00:49:38.781 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 6(Long), 1(Integer), 3(Integer)
2020-04-17 00:49:38.783 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 3
2020-04-17 00:49:40.146 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:49:40.147 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 6(Long), 0(Integer)
2020-04-17 00:49:40.149 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:49:40.150 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.type_id = ? and b.recommend = ? LIMIT ? 
2020-04-17 00:49:40.150 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 6(Long), 0(Integer), 3(Integer)
2020-04-17 00:49:40.152 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 1
2020-04-17 00:49:41.955 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.type_id = ? AND b.recommend = ? 
2020-04-17 00:49:41.956 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 6(Long), 1(Integer)
2020-04-17 00:49:41.958 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:49:41.960 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.type_id = ? and b.recommend = ? LIMIT ? 
2020-04-17 00:49:41.960 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 6(Long), 1(Integer), 3(Integer)
2020-04-17 00:49:41.963 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 3
2020-04-17 00:49:45.697 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? 
2020-04-17 00:49:45.698 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 1(Long)
2020-04-17 00:49:45.701 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 00:49:45.703  INFO 10432 --- [http-nio-8080-exec-1] com.by.controller.admin.BlogsController  : blog-input-1:Blog(id=1, title=冒泡排序, content=```java
public class BubbleSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int arr[] = {3,9,-1,10,-2};
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		System.out.println(Arrays.toString(arr));
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
		bubbleSort(arr);
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		/**
		 * 
		int temp = 0;
		//第一趟排序，就是将最大的排在最后
		for(int j=0;j<arr.length-1-0;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第一趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第二趟排序，就是将第二大的排在倒数第二位
		for(int j=0;j<arr.length-1-1;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第二趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第三趟排序，就是将第三大的排在倒数第三位
		for(int j=0;j<arr.length-1-2;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第三趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第四趟排序，就是将第四大的排在倒数第四位
		for(int j=0;j<arr.length-1-3;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第四趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		System.out.println("排序结果");
		System.out.println(Arrays.toString(arr));
		*/
		
		
	}
	
	public static void bubbleSort(int[] arr)
	{
		//冒泡排序的时间复杂度O(n^2)
		int temp = 0;
		boolean flag = false;//没有发生交换，没有发生交换说明已经有序
		for(int i=0;i<arr.length-1;i++)
		{	
			//减i的原因是每次排完最大的在最后，也就是后面逐渐有序，把大的往后排，从后依次向前有序
			for(int j=0;j<arr.length-1-i;j++)
			{
				if(arr[j]>arr[j+1])
				{
					flag = true;
					temp = arr[j];
					arr[j] = arr[j+1];
					arr[j+1] = temp;
				}
			}			
			//每一趟排序后做一次判断，如果一趟不会发生交换则以后都不会发生交换
			if(!flag)
			{
				break;
			}else{
//				System.out.println("第"+(i+1)+"趟排序后的数组");
//				System.out.println(Arrays.toString(arr));
				flag = false;//发生了交换就重置flag进行下次判断
			}
		}
				
	}
	

}
```, firstPicture=https://pic.images.ac.cn/image/5e987ff6927b8, flag=原创, views=4, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=Thu Apr 16 20:57:14 CST 2020, updateTime=2020-04-17 00:04:02, description=这是关于冒泡排序算法的讲解，有助于理解冒泡排序的本质。, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=4, name=冒泡排序, blogs=[])], user=null, comments=[], tagIds=null)
2020-04-17 00:49:45.704  INFO 10432 --- [http-nio-8080-exec-1] com.by.controller.admin.BlogsController  : blog-input-2:Blog(id=1, title=冒泡排序, content=```java
public class BubbleSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int arr[] = {3,9,-1,10,-2};
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		System.out.println(Arrays.toString(arr));
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
		bubbleSort(arr);
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		/**
		 * 
		int temp = 0;
		//第一趟排序，就是将最大的排在最后
		for(int j=0;j<arr.length-1-0;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第一趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第二趟排序，就是将第二大的排在倒数第二位
		for(int j=0;j<arr.length-1-1;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第二趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第三趟排序，就是将第三大的排在倒数第三位
		for(int j=0;j<arr.length-1-2;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第三趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第四趟排序，就是将第四大的排在倒数第四位
		for(int j=0;j<arr.length-1-3;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第四趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		System.out.println("排序结果");
		System.out.println(Arrays.toString(arr));
		*/
		
		
	}
	
	public static void bubbleSort(int[] arr)
	{
		//冒泡排序的时间复杂度O(n^2)
		int temp = 0;
		boolean flag = false;//没有发生交换，没有发生交换说明已经有序
		for(int i=0;i<arr.length-1;i++)
		{	
			//减i的原因是每次排完最大的在最后，也就是后面逐渐有序，把大的往后排，从后依次向前有序
			for(int j=0;j<arr.length-1-i;j++)
			{
				if(arr[j]>arr[j+1])
				{
					flag = true;
					temp = arr[j];
					arr[j] = arr[j+1];
					arr[j+1] = temp;
				}
			}			
			//每一趟排序后做一次判断，如果一趟不会发生交换则以后都不会发生交换
			if(!flag)
			{
				break;
			}else{
//				System.out.println("第"+(i+1)+"趟排序后的数组");
//				System.out.println(Arrays.toString(arr));
				flag = false;//发生了交换就重置flag进行下次判断
			}
		}
				
	}
	

}
```, firstPicture=https://pic.images.ac.cn/image/5e987ff6927b8, flag=原创, views=4, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=Thu Apr 16 20:57:14 CST 2020, updateTime=2020-04-17 00:04:02, description=这是关于冒泡排序算法的讲解，有助于理解冒泡排序的本质。, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=4, name=冒泡排序, blogs=[])], user=null, comments=[], tagIds=4)
2020-04-17 00:49:45.706 DEBUG 10432 --- [http-nio-8080-exec-1] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:49:45.707 DEBUG 10432 --- [http-nio-8080-exec-1] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:49:45.710 DEBUG 10432 --- [http-nio-8080-exec-1] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:49:45.712 DEBUG 10432 --- [http-nio-8080-exec-1] com.by.mapper.TagMapper.listTag          : ==>  Preparing: select * from t_tag 
2020-04-17 00:49:45.713 DEBUG 10432 --- [http-nio-8080-exec-1] com.by.mapper.TagMapper.listTag          : ==> Parameters: 
2020-04-17 00:49:45.715 DEBUG 10432 --- [http-nio-8080-exec-1] com.by.mapper.TagMapper.listTag          : <==      Total: 8
2020-04-17 00:49:49.643 DEBUG 10432 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.getType         : ==>  Preparing: select id,name from blog.t_type where id = ? 
2020-04-17 00:49:49.643 DEBUG 10432 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.getType         : ==> Parameters: 6(Long)
2020-04-17 00:49:49.645 DEBUG 10432 --- [http-nio-8080-exec-4] com.by.mapper.TypeMapper.getType         : <==      Total: 1
2020-04-17 00:49:49.647 DEBUG 10432 --- [http-nio-8080-exec-4] com.by.mapper.TagMapper.listTagByList    : ==>  Preparing: select id,name from t_tag WHERE id in( ? ) 
2020-04-17 00:49:49.648 DEBUG 10432 --- [http-nio-8080-exec-4] com.by.mapper.TagMapper.listTagByList    : ==> Parameters: 4(Long)
2020-04-17 00:49:49.650 DEBUG 10432 --- [http-nio-8080-exec-4] com.by.mapper.TagMapper.listTagByList    : <==      Total: 1
2020-04-17 00:49:49.652 DEBUG 10432 --- [http-nio-8080-exec-4] com.by.mapper.BlogMapper.getBlog         : ==>  Preparing: select * from t_blog where id = ? 
2020-04-17 00:49:49.653 DEBUG 10432 --- [http-nio-8080-exec-4] com.by.mapper.BlogMapper.getBlog         : ==> Parameters: 1(Long)
2020-04-17 00:49:49.656 DEBUG 10432 --- [http-nio-8080-exec-4] com.by.mapper.BlogMapper.getBlog         : <==      Total: 1
2020-04-17 00:49:49.657  INFO 10432 --- [http-nio-8080-exec-4] com.by.service.BlogServiceImpl           : blog:Blog(id=1, title=冒泡排序, content=```java
public class BubbleSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int arr[] = {3,9,-1,10,-2};
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		System.out.println(Arrays.toString(arr));
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
		bubbleSort(arr);
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		/**
		 * 
		int temp = 0;
		//第一趟排序，就是将最大的排在最后
		for(int j=0;j<arr.length-1-0;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第一趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第二趟排序，就是将第二大的排在倒数第二位
		for(int j=0;j<arr.length-1-1;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第二趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第三趟排序，就是将第三大的排在倒数第三位
		for(int j=0;j<arr.length-1-2;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第三趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第四趟排序，就是将第四大的排在倒数第四位
		for(int j=0;j<arr.length-1-3;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第四趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		System.out.println("排序结果");
		System.out.println(Arrays.toString(arr));
		*/
		
		
	}
	
	public static void bubbleSort(int[] arr)
	{
		//冒泡排序的时间复杂度O(n^2)
		int temp = 0;
		boolean flag = false;//没有发生交换，没有发生交换说明已经有序
		for(int i=0;i<arr.length-1;i++)
		{	
			//减i的原因是每次排完最大的在最后，也就是后面逐渐有序，把大的往后排，从后依次向前有序
			for(int j=0;j<arr.length-1-i;j++)
			{
				if(arr[j]>arr[j+1])
				{
					flag = true;
					temp = arr[j];
					arr[j] = arr[j+1];
					arr[j+1] = temp;
				}
			}			
			//每一趟排序后做一次判断，如果一趟不会发生交换则以后都不会发生交换
			if(!flag)
			{
				break;
			}else{
//				System.out.println("第"+(i+1)+"趟排序后的数组");
//				System.out.println(Arrays.toString(arr));
				flag = false;//发生了交换就重置flag进行下次判断
			}
		}
				
	}
	

}
```, firstPicture=https://pic.images.ac.cn/image/5e987ff6927b8, flag=原创, views=4, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=Thu Apr 16 20:57:14 CST 2020, updateTime=2020-04-17 00:04:02, description=这是关于冒泡排序算法的讲解，有助于理解冒泡排序的本质。, type=null, tags=[], user=null, comments=[], tagIds=null)
2020-04-17 00:49:49.658 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.updateBlogWithTags      : ==>  Preparing: update t_blog set description = ?,appreciation = ?,commentabled = ?,content = ?,create_time = ?,first_picture = ?,flag = ?, published = ?,recommend = ?,share_statement = ?,title = ?, update_time = ?,views = ?,type_id = ?,user_id = ? where id = ? 
2020-04-17 00:49:49.659 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.updateBlogWithTags      : ==> Parameters: 这是关于冒泡排序算法的讲解，有助于理解冒泡排序的本质。(String), true(Boolean), true(Boolean), ```java
public class BubbleSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int arr[] = {3,9,-1,10,-2};
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		System.out.println(Arrays.toString(arr));
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
		bubbleSort(arr);
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		/**
		 * 
		int temp = 0;
		//第一趟排序，就是将最大的排在最后
		for(int j=0;j<arr.length-1-0;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第一趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第二趟排序，就是将第二大的排在倒数第二位
		for(int j=0;j<arr.length-1-1;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第二趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第三趟排序，就是将第三大的排在倒数第三位
		for(int j=0;j<arr.length-1-2;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第三趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第四趟排序，就是将第四大的排在倒数第四位
		for(int j=0;j<arr.length-1-3;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第四趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		System.out.println("排序结果");
		System.out.println(Arrays.toString(arr));
		*/
		
		
	}
	
	public static void bubbleSort(int[] arr)
	{
		//冒泡排序的时间复杂度O(n^2)
		int temp = 0;
		boolean flag = false;//没有发生交换，没有发生交换说明已经有序
		for(int i=0;i<arr.length-1;i++)
		{	
			//减i的原因是每次排完最大的在最后，也就是后面逐渐有序，把大的往后排，从后依次向前有序
			for(int j=0;j<arr.length-1-i;j++)
			{
				if(arr[j]>arr[j+1])
				{
					flag = true;
					temp = arr[j];
					arr[j] = arr[j+1];
					arr[j+1] = temp;
				}
			}			
			//每一趟排序后做一次判断，如果一趟不会发生交换则以后都不会发生交换
			if(!flag)
			{
				break;
			}else{
//				System.out.println("第"+(i+1)+"趟排序后的数组");
//				System.out.println(Arrays.toString(arr));
				flag = false;//发生了交换就重置flag进行下次判断
			}
		}
				
	}
	

}
```(String), 2020-04-16 20:57:14.0(Timestamp), https://pic.images.ac.cn/image/5e987ff6927b8(String), 原创(String), true(Boolean), true(Boolean), true(Boolean), 冒泡排序(String), 2020-04-17 00:49:49(String), 4(Integer), 6(Long), 1(Long), 1(Long)
2020-04-17 00:49:49.686 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.updateBlogWithTags      : <==    Updates: 1
2020-04-17 00:49:49.686 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.deleteBlogWithTags      : ==>  Preparing: delete from t_blog_tags where blog_id = ? 
2020-04-17 00:49:49.688 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.deleteBlogWithTags      : ==> Parameters: 1(Long)
2020-04-17 00:49:49.689 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.deleteBlogWithTags      : <==    Updates: 1
2020-04-17 00:49:49.690 DEBUG 10432 --- [http-nio-8080-exec-4] c.by.mapper.BlogMapper.saveBlogWithTags  : ==>  Preparing: insert into t_blog_tags(blog_id, tag_id) values (?,?) 
2020-04-17 00:49:49.691 DEBUG 10432 --- [http-nio-8080-exec-4] c.by.mapper.BlogMapper.saveBlogWithTags  : ==> Parameters: 1(Long), 4(Long)
2020-04-17 00:49:49.693 DEBUG 10432 --- [http-nio-8080-exec-4] c.by.mapper.BlogMapper.saveBlogWithTags  : <==    Updates: 1
2020-04-17 00:49:49.747  INFO 10432 --- [http-nio-8080-exec-4] com.by.controller.admin.BlogsController  : 成功：Blog(id=1, title=冒泡排序, content=```java
public class BubbleSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int arr[] = {3,9,-1,10,-2};
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		System.out.println(Arrays.toString(arr));
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
		bubbleSort(arr);
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		/**
		 * 
		int temp = 0;
		//第一趟排序，就是将最大的排在最后
		for(int j=0;j<arr.length-1-0;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第一趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第二趟排序，就是将第二大的排在倒数第二位
		for(int j=0;j<arr.length-1-1;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第二趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第三趟排序，就是将第三大的排在倒数第三位
		for(int j=0;j<arr.length-1-2;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第三趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		//第四趟排序，就是将第四大的排在倒数第四位
		for(int j=0;j<arr.length-1-3;j++)
		{
			if(arr[j]>arr[j+1])
			{
				temp = arr[j];
				arr[j] = arr[j+1];
				arr[j+1] = temp;
			}
		}
		System.out.println("第四趟排序后的数组");
		System.out.println(Arrays.toString(arr));
		System.out.println("排序结果");
		System.out.println(Arrays.toString(arr));
		*/
		
		
	}
	
	public static void bubbleSort(int[] arr)
	{
		//冒泡排序的时间复杂度O(n^2)
		int temp = 0;
		boolean flag = false;//没有发生交换，没有发生交换说明已经有序
		for(int i=0;i<arr.length-1;i++)
		{	
			//减i的原因是每次排完最大的在最后，也就是后面逐渐有序，把大的往后排，从后依次向前有序
			for(int j=0;j<arr.length-1-i;j++)
			{
				if(arr[j]>arr[j+1])
				{
					flag = true;
					temp = arr[j];
					arr[j] = arr[j+1];
					arr[j+1] = temp;
				}
			}			
			//每一趟排序后做一次判断，如果一趟不会发生交换则以后都不会发生交换
			if(!flag)
			{
				break;
			}else{
//				System.out.println("第"+(i+1)+"趟排序后的数组");
//				System.out.println(Arrays.toString(arr));
				flag = false;//发生了交换就重置flag进行下次判断
			}
		}
				
	}
	

}
```, firstPicture=https://pic.images.ac.cn/image/5e987ff6927b8, flag=原创, views=4, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=Thu Apr 16 20:57:14 CST 2020, updateTime=2020-04-17 00:49:49, description=这是关于冒泡排序算法的讲解，有助于理解冒泡排序的本质。, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=4, name=冒泡排序, blogs=[])], user=User(id=1, username=zhouboyang, password=null, email=2423623805@qq.com, avatar=http://temp.im/50x50, type=1, createTime=Tue Apr 07 04:37:21 CST 2020, updateTime=Tue Apr 07 04:37:25 CST 2020, nickname=周博洋, blogs=[]), comments=[], tagIds=4)
2020-04-17 00:49:49.756 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id 
2020-04-17 00:49:49.756 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 00:49:49.795 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 00:49:49.796 DEBUG 10432 --- [http-nio-8080-exec-5] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id order by b.update_time desc LIMIT ? 
2020-04-17 00:49:49.796 DEBUG 10432 --- [http-nio-8080-exec-5] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 00:49:49.798 DEBUG 10432 --- [http-nio-8080-exec-5] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 00:49:49.799 DEBUG 10432 --- [http-nio-8080-exec-5] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:49:49.800 DEBUG 10432 --- [http-nio-8080-exec-5] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:49:49.800 DEBUG 10432 --- [http-nio-8080-exec-5] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:49:53.584 DEBUG 10432 --- [http-nio-8080-exec-7] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.recommend = ? 
2020-04-17 00:49:53.585 DEBUG 10432 --- [http-nio-8080-exec-7] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 0(Integer)
2020-04-17 00:49:53.586 DEBUG 10432 --- [http-nio-8080-exec-7] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:49:53.588 DEBUG 10432 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.recommend = ? LIMIT ?, ? 
2020-04-17 00:49:53.588 DEBUG 10432 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 0(Integer), 3(Integer), 3(Integer)
2020-04-17 00:49:53.589 DEBUG 10432 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 0
2020-04-17 00:49:55.249 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.recommend = ? 
2020-04-17 00:49:55.250 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 0(Integer)
2020-04-17 00:49:55.251 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:49:55.253 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.recommend = ? LIMIT ? 
2020-04-17 00:49:55.254 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 0(Integer), 3(Integer)
2020-04-17 00:49:55.255 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 1
2020-04-17 00:50:00.579 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.recommend = ? 
2020-04-17 00:50:00.580 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 1(Integer)
2020-04-17 00:50:00.581 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:50:00.582 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.recommend = ? LIMIT ? 
2020-04-17 00:50:00.582 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 1(Integer), 3(Integer)
2020-04-17 00:50:00.584 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 3
2020-04-17 00:50:03.376 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.recommend = ? 
2020-04-17 00:50:03.377 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 1(Integer)
2020-04-17 00:50:03.379 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:50:03.380 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.recommend = ? LIMIT ? 
2020-04-17 00:50:03.381 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 1(Integer), 3(Integer)
2020-04-17 00:50:03.382 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 3
2020-04-17 00:50:04.522 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.recommend = ? 
2020-04-17 00:50:04.522 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 1(Integer)
2020-04-17 00:50:04.523 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:50:04.524 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.recommend = ? LIMIT ? 
2020-04-17 00:50:04.525 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 1(Integer), 3(Integer)
2020-04-17 00:50:04.526 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 3
2020-04-17 00:50:07.050 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.recommend = ? 
2020-04-17 00:50:07.050 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 0(Integer)
2020-04-17 00:50:07.051 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:50:07.052 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.recommend = ? LIMIT ? 
2020-04-17 00:50:07.052 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 0(Integer), 3(Integer)
2020-04-17 00:50:07.054 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 1
2020-04-17 00:50:09.431 DEBUG 10432 --- [http-nio-8080-exec-2] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? 
2020-04-17 00:50:09.432 DEBUG 10432 --- [http-nio-8080-exec-2] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 2(Long)
2020-04-17 00:50:09.435 DEBUG 10432 --- [http-nio-8080-exec-2] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 00:50:09.436  INFO 10432 --- [http-nio-8080-exec-2] com.by.controller.admin.BlogsController  : blog-input-1:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:49:19, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=null)
2020-04-17 00:50:09.437  INFO 10432 --- [http-nio-8080-exec-2] com.by.controller.admin.BlogsController  : blog-input-2:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:49:19, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=null, comments=[], tagIds=5)
2020-04-17 00:50:09.439 DEBUG 10432 --- [http-nio-8080-exec-2] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:50:09.440 DEBUG 10432 --- [http-nio-8080-exec-2] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:50:09.442 DEBUG 10432 --- [http-nio-8080-exec-2] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:50:09.444 DEBUG 10432 --- [http-nio-8080-exec-2] com.by.mapper.TagMapper.listTag          : ==>  Preparing: select * from t_tag 
2020-04-17 00:50:09.445 DEBUG 10432 --- [http-nio-8080-exec-2] com.by.mapper.TagMapper.listTag          : ==> Parameters: 
2020-04-17 00:50:09.447 DEBUG 10432 --- [http-nio-8080-exec-2] com.by.mapper.TagMapper.listTag          : <==      Total: 8
2020-04-17 00:50:17.198 DEBUG 10432 --- [http-nio-8080-exec-5] com.by.mapper.TypeMapper.getType         : ==>  Preparing: select id,name from blog.t_type where id = ? 
2020-04-17 00:50:17.198 DEBUG 10432 --- [http-nio-8080-exec-5] com.by.mapper.TypeMapper.getType         : ==> Parameters: 6(Long)
2020-04-17 00:50:17.200 DEBUG 10432 --- [http-nio-8080-exec-5] com.by.mapper.TypeMapper.getType         : <==      Total: 1
2020-04-17 00:50:17.202 DEBUG 10432 --- [http-nio-8080-exec-5] com.by.mapper.TagMapper.listTagByList    : ==>  Preparing: select id,name from t_tag WHERE id in( ? ) 
2020-04-17 00:50:17.203 DEBUG 10432 --- [http-nio-8080-exec-5] com.by.mapper.TagMapper.listTagByList    : ==> Parameters: 5(Long)
2020-04-17 00:50:17.204 DEBUG 10432 --- [http-nio-8080-exec-5] com.by.mapper.TagMapper.listTagByList    : <==      Total: 1
2020-04-17 00:50:17.206 DEBUG 10432 --- [http-nio-8080-exec-5] com.by.mapper.BlogMapper.getBlog         : ==>  Preparing: select * from t_blog where id = ? 
2020-04-17 00:50:17.208 DEBUG 10432 --- [http-nio-8080-exec-5] com.by.mapper.BlogMapper.getBlog         : ==> Parameters: 2(Long)
2020-04-17 00:50:17.211 DEBUG 10432 --- [http-nio-8080-exec-5] com.by.mapper.BlogMapper.getBlog         : <==      Total: 1
2020-04-17 00:50:17.211  INFO 10432 --- [http-nio-8080-exec-5] com.by.service.BlogServiceImpl           : blog:Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=false, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:49:19, description=这是关于插入排序的讲解，一步一步理解插入排序, type=null, tags=[], user=null, comments=[], tagIds=null)
2020-04-17 00:50:17.212 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.updateBlogWithTags      : ==>  Preparing: update t_blog set description = ?,appreciation = ?,commentabled = ?,content = ?,create_time = ?,first_picture = ?,flag = ?, published = ?,recommend = ?,share_statement = ?,title = ?, update_time = ?,views = ?,type_id = ?,user_id = ? where id = ? 
2020-04-17 00:50:17.214 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.updateBlogWithTags      : ==> Parameters: 这是关于插入排序的讲解，一步一步理解插入排序(String), true(Boolean), true(Boolean), ```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```(String), 2020-04-16 21:16:22.0(Timestamp), https://pic.images.ac.cn/image/5e988196aa315(String), 原创(String), true(Boolean), true(Boolean), true(Boolean), 插入排序(String), 2020-04-17 00:50:17(String), 5(Integer), 6(Long), 1(Long), 2(Long)
2020-04-17 00:50:17.289 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.updateBlogWithTags      : <==    Updates: 1
2020-04-17 00:50:17.290 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.deleteBlogWithTags      : ==>  Preparing: delete from t_blog_tags where blog_id = ? 
2020-04-17 00:50:17.290 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.deleteBlogWithTags      : ==> Parameters: 2(Long)
2020-04-17 00:50:17.291 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.deleteBlogWithTags      : <==    Updates: 1
2020-04-17 00:50:17.292 DEBUG 10432 --- [http-nio-8080-exec-5] c.by.mapper.BlogMapper.saveBlogWithTags  : ==>  Preparing: insert into t_blog_tags(blog_id, tag_id) values (?,?) 
2020-04-17 00:50:17.292 DEBUG 10432 --- [http-nio-8080-exec-5] c.by.mapper.BlogMapper.saveBlogWithTags  : ==> Parameters: 2(Long), 5(Long)
2020-04-17 00:50:17.294 DEBUG 10432 --- [http-nio-8080-exec-5] c.by.mapper.BlogMapper.saveBlogWithTags  : <==    Updates: 1
2020-04-17 00:50:17.351  INFO 10432 --- [http-nio-8080-exec-5] com.by.controller.admin.BlogsController  : 成功：Blog(id=2, title=插入排序, content=```java
public class InsertSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		int[] arr = {101,34,119,1,-1,89};
//		System.out.println("原数组");
//		System.out.println(Arrays.toString(arr));
		int arr[] = new int[80000];
		for(int i=0;i<80000;i++)
		{
			arr[i] = (int)(Math.random()*8000000);
		}
		SimpleDateFormat simp = new SimpleDateFormat("yyyy-MM-hh:mm:ss");
		Date date1 = new Date();		
		String date1Str = simp.format(date1);
		System.out.println("排序前的时间="+date1Str);
//		System.out.println(Arrays.toString(arr));
		insertSort(arr);
//		System.out.println(Arrays.toString(arr));
		Date date2 = new Date();		
		String date2Str = simp.format(date2);
		System.out.println("排序后的时间="+date2Str);
		
	}
	public static void insertSort(int[] arr)
	{
		//for循环来把代码简化，直接插入排序思想为一个有序表一个无序表，默认第一个有序，所以i从1开始计数
		//利用移动的思想
		for(int i=1;i<arr.length;i++)
		{
			int insertVal = arr[i];		
			int preIndex = i-1;
			while(preIndex >= 0 && insertVal < arr[preIndex])
			{
				//利用移动
				arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
				preIndex--;//下标向前走
			}
			if(preIndex+1 != i)
			{
				arr[preIndex+1] = insertVal;
			}			
//			System.out.println("第"+(i)+"轮插入");
//			System.out.println(Arrays.toString(arr));
		}
		/*
		//使用逐步推导的方式来讲解，便于理解
		//第1轮{101，34，119，1}=》{34，101，119，1}
		//定义待插入的数
		int insertVal = arr[1];		
		int preIndex = 1 - 1;//即arr[1]的前面这个数的下标，待插入数前面的数的位置
		//给insertVal找到插入的位置
		//说明
		//1.insertIndex >= 0 保证在给insertVal找到插入位置，不越界
		//2.insertVal < arr[insertIndex]待插入的数，还没有找到插入位置
		//3.就需要将arr[insertIndex]后移
		//4.进入循环说明没有找到待插入的位置，没有找到就继续向前找
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		//当退出while循环时，说明插入的位置找到为preIndex+1
		arr[preIndex+1] = insertVal;
		System.out.println("第1轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第2轮{34，101，119，1}-》{34，101，119，1}
		insertVal = arr[2];		
		preIndex = 2 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第2轮插入");
		System.out.println(Arrays.toString(arr));
		
		//第3轮{34，101，119，1}-》
		insertVal = arr[3];		
		preIndex = 3 - 1;
		while(preIndex >= 0 && insertVal < arr[preIndex])
		{
			arr[preIndex+1] = arr[preIndex];//前一个数后移到后一个位置,例如：{101，101，119，1}
			preIndex--;//下标向前走
		}
		arr[preIndex+1] = insertVal;
		System.out.println("第3轮插入");
		System.out.println(Arrays.toString(arr));
		*/
	}
	
	
}

```, firstPicture=https://pic.images.ac.cn/image/5e988196aa315, flag=原创, views=5, appreciation=true, shareStatement=true, commentabled=true, published=true, recommend=true, createTime=Thu Apr 16 21:16:22 CST 2020, updateTime=2020-04-17 00:50:17, description=这是关于插入排序的讲解，一步一步理解插入排序, type=Type(id=6, name=常用算法, blogs=[]), tags=[Tag(id=5, name=插入排序, blogs=[])], user=User(id=1, username=zhouboyang, password=null, email=2423623805@qq.com, avatar=http://temp.im/50x50, type=1, createTime=Tue Apr 07 04:37:21 CST 2020, updateTime=Tue Apr 07 04:37:25 CST 2020, nickname=周博洋, blogs=[]), comments=[], tagIds=5)
2020-04-17 00:50:17.358 DEBUG 10432 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id 
2020-04-17 00:50:17.358 DEBUG 10432 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 00:50:17.359 DEBUG 10432 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 00:50:17.360 DEBUG 10432 --- [http-nio-8080-exec-6] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id order by b.update_time desc LIMIT ? 
2020-04-17 00:50:17.361 DEBUG 10432 --- [http-nio-8080-exec-6] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 00:50:17.362 DEBUG 10432 --- [http-nio-8080-exec-6] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 00:50:17.364 DEBUG 10432 --- [http-nio-8080-exec-6] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:50:17.364 DEBUG 10432 --- [http-nio-8080-exec-6] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:50:17.365 DEBUG 10432 --- [http-nio-8080-exec-6] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:50:23.556 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.recommend = ? 
2020-04-17 00:50:23.557 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 1(Integer)
2020-04-17 00:50:23.558 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:50:23.558 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.recommend = ? LIMIT ? 
2020-04-17 00:50:23.559 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 1(Integer), 3(Integer)
2020-04-17 00:50:23.560 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 3
2020-04-17 00:50:25.112 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.recommend = ? 
2020-04-17 00:50:25.113 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 1(Integer)
2020-04-17 00:50:25.115 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:50:25.116 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.recommend = ? LIMIT ?, ? 
2020-04-17 00:50:25.116 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 1(Integer), 3(Integer), 3(Integer)
2020-04-17 00:50:25.117 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 1
2020-04-17 00:50:26.238 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.B.listBlogFromSearch_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id WHERE 1 = 1 AND b.recommend = ? 
2020-04-17 00:50:26.238 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.B.listBlogFromSearch_COUNT         : ==> Parameters: 1(Integer)
2020-04-17 00:50:26.239 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.B.listBlogFromSearch_COUNT         : <==      Total: 1
2020-04-17 00:50:26.240 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.listBlogFromSearch      : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id where 1 = 1 and b.recommend = ? LIMIT ? 
2020-04-17 00:50:26.241 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.listBlogFromSearch      : ==> Parameters: 1(Integer), 3(Integer)
2020-04-17 00:50:26.243 DEBUG 10432 --- [http-nio-8080-exec-10] c.b.m.BlogMapper.listBlogFromSearch      : <==      Total: 3
2020-04-17 00:50:40.616  INFO 10432 --- [http-nio-8080-exec-3] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 00:50:40.641 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 00:50:40.641 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 00:50:40.642 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 00:50:40.643 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 00:50:40.643 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 00:50:40.715 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 00:50:40.717 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 00:50:40.717 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 00:50:40.719 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 00:50:40.720 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 00:50:40.721 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 00:50:40.723 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 00:50:40.725 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 00:50:40.726 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 00:50:40.738 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 00:50:40.739  INFO 10432 --- [http-nio-8080-exec-3] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 00:50:40.740  INFO 10432 --- [http-nio-8080-exec-3] com.by.aspect.LogAspect                  : Result : index
2020-04-17 00:50:58.521  INFO 10432 --- [http-nio-8080-exec-9] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 00:50:58.522 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 00:50:58.523 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 00:50:58.524 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 00:50:58.525  INFO 10432 --- [http-nio-8080-exec-9] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 00:50:58.525  INFO 10432 --- [http-nio-8080-exec-9] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 00:51:12.165  INFO 10432 --- [http-nio-8080-exec-4] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/types/-1, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.TypeShowController.types, args=[{}, 1, -1])
2020-04-17 00:51:12.168 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 00:51:12.169 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 00:51:12.171 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 00:51:12.172 DEBUG 10432 --- [http-nio-8080-exec-4] c.by.mapper.BlogMapper.getBlogsByTypeId  : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true and b.type_id = ? order by b.update_time desc 
2020-04-17 00:51:12.173 DEBUG 10432 --- [http-nio-8080-exec-4] c.by.mapper.BlogMapper.getBlogsByTypeId  : ==> Parameters: 6(Long)
2020-04-17 00:51:12.176 DEBUG 10432 --- [http-nio-8080-exec-4] c.by.mapper.BlogMapper.getBlogsByTypeId  : <==      Total: 4
2020-04-17 00:51:12.177  INFO 10432 --- [http-nio-8080-exec-4] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 00:51:12.177  INFO 10432 --- [http-nio-8080-exec-4] com.by.aspect.LogAspect                  : Result : types
2020-04-17 00:51:12.752  INFO 10432 --- [http-nio-8080-exec-3] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 00:51:12.753 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 00:51:12.754 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 00:51:12.755 DEBUG 10432 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 00:51:12.756  INFO 10432 --- [http-nio-8080-exec-3] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 00:51:12.756  INFO 10432 --- [http-nio-8080-exec-3] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 00:51:17.606  INFO 10432 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/tags/-1, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.TagShowController.types, args=[{}, 1, -1])
2020-04-17 00:51:17.609 DEBUG 10432 --- [http-nio-8080-exec-6] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 00:51:17.609 DEBUG 10432 --- [http-nio-8080-exec-6] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 00:51:17.611 DEBUG 10432 --- [http-nio-8080-exec-6] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 00:51:17.613 DEBUG 10432 --- [http-nio-8080-exec-6] c.by.mapper.BlogMapper.getBlogsByTagId   : ==>  Preparing: select blog.id,blog.description,blog.appreciation,blog.commentabled,blog.content, blog.create_time,blog.first_picture,blog.flag,blog.published,blog.recommend,blog.share_statement, blog.title,blog.update_time,blog.views,blog.type_id, t.id typeid,t.name typename,tag.id tagid,tag.name tagname,u.id uid,u.nickname,u.avatar from (select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,b.type_id,b.user_id from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag tag on tag.id = bt.tag_id where tag.id = ? and b.published = true) blog inner join t_type t on blog.type_id = t.id inner join t_blog_tags bt on bt.blog_id = blog.id inner join t_tag tag on tag.id = bt.tag_id inner join t_user u on u.id = blog.user_id 
2020-04-17 00:51:17.614 DEBUG 10432 --- [http-nio-8080-exec-6] c.by.mapper.BlogMapper.getBlogsByTagId   : ==> Parameters: 7(Long)
2020-04-17 00:51:17.654 DEBUG 10432 --- [http-nio-8080-exec-6] c.by.mapper.BlogMapper.getBlogsByTagId   : <==      Total: 4
2020-04-17 00:51:17.655  INFO 10432 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 00:51:17.655  INFO 10432 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : Result : tags
2020-04-17 00:51:18.686  INFO 10432 --- [http-nio-8080-exec-8] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 00:51:18.687 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 00:51:18.687 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 00:51:18.689 DEBUG 10432 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 00:51:18.690  INFO 10432 --- [http-nio-8080-exec-8] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 00:51:18.690  INFO 10432 --- [http-nio-8080-exec-8] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 00:51:23.915  INFO 10432 --- [http-nio-8080-exec-10] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/archives, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.ArchivesShowController.archives, args=[{}])
2020-04-17 00:51:23.918 DEBUG 10432 --- [http-nio-8080-exec-10] com.by.mapper.BlogMapper.findGroupYear   : ==>  Preparing: select date_format(b.update_time,'%Y') as year from t_blog b group by year order by year desc 
2020-04-17 00:51:23.919 DEBUG 10432 --- [http-nio-8080-exec-10] com.by.mapper.BlogMapper.findGroupYear   : ==> Parameters: 
2020-04-17 00:51:23.930 DEBUG 10432 --- [http-nio-8080-exec-10] com.by.mapper.BlogMapper.findGroupYear   : <==      Total: 1
2020-04-17 00:51:23.931 DEBUG 10432 --- [http-nio-8080-exec-10] com.by.mapper.BlogMapper.findBlogByYear  : ==>  Preparing: select blog.id,blog.description,blog.appreciation,blog.commentabled,blog.content, blog.create_time,blog.first_picture,blog.flag,blog.published,blog.recommend,blog.share_statement, blog.title,blog.update_time,blog.views,blog.type_id, t.id typeid,t.name typename,tag.id tagid,tag.name tagname,u.id uid,u.nickname,u.avatar from (select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,b.type_id,b.user_id from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag tag on tag.id = bt.tag_id where b.published = true and date_format(b.update_time,'%Y')=?) blog inner join t_type t on blog.type_id = t.id inner join t_blog_tags bt on bt.blog_id = blog.id inner join t_tag tag on tag.id = bt.tag_id inner join t_user u on u.id = blog.user_id 
2020-04-17 00:51:23.932 DEBUG 10432 --- [http-nio-8080-exec-10] com.by.mapper.BlogMapper.findBlogByYear  : ==> Parameters: 2020(String)
2020-04-17 00:51:23.939 DEBUG 10432 --- [http-nio-8080-exec-10] com.by.mapper.BlogMapper.findBlogByYear  : <==      Total: 10
2020-04-17 00:51:23.943 DEBUG 10432 --- [http-nio-8080-exec-10] com.by.mapper.BlogMapper.countBlog       : ==>  Preparing: select count(id) from t_blog where published = true 
2020-04-17 00:51:23.944 DEBUG 10432 --- [http-nio-8080-exec-10] com.by.mapper.BlogMapper.countBlog       : ==> Parameters: 
2020-04-17 00:51:23.946 DEBUG 10432 --- [http-nio-8080-exec-10] com.by.mapper.BlogMapper.countBlog       : <==      Total: 1
2020-04-17 00:51:23.948  INFO 10432 --- [http-nio-8080-exec-10] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 00:51:23.948  INFO 10432 --- [http-nio-8080-exec-10] com.by.aspect.LogAspect                  : Result : archives
2020-04-17 00:51:24.512  INFO 10432 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 00:51:24.513 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 00:51:24.514 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 00:51:24.517 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 00:51:24.518  INFO 10432 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 00:51:24.519  INFO 10432 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 00:51:27.629  INFO 10432 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/about, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.AboutShowController.about, args=[])
2020-04-17 00:51:27.631  INFO 10432 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 00:51:27.631  INFO 10432 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : Result : about
2020-04-17 00:51:28.602  INFO 10432 --- [http-nio-8080-exec-9] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 00:51:28.603 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 00:51:28.603 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 00:51:28.605 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 00:51:28.606  INFO 10432 --- [http-nio-8080-exec-9] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 00:51:28.606  INFO 10432 --- [http-nio-8080-exec-9] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 00:51:45.990  INFO 10432 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 00:51:45.992 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 00:51:45.993 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 00:51:45.994 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 00:51:45.995 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 00:51:45.995 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 00:51:46.012 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 00:51:46.014 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 00:51:46.015 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 00:51:46.016 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 00:51:46.017 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 00:51:46.017 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 00:51:46.019 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 00:51:46.021 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 00:51:46.021 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 00:51:46.023 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 00:51:46.024  INFO 10432 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 00:51:46.024  INFO 10432 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Result : index
2020-04-17 00:51:46.599  INFO 10432 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 00:51:46.602 DEBUG 10432 --- [http-nio-8080-exec-6] c.b.m.B.getBlogIsRecommend_COUNT         : ==>  Preparing: SELECT count(0) FROM t_blog b WHERE b.recommend = true AND b.published = true LIMIT 0, ? 
2020-04-17 00:51:46.602 DEBUG 10432 --- [http-nio-8080-exec-6] c.b.m.B.getBlogIsRecommend_COUNT         : ==> Parameters: 3(Integer)
2020-04-17 00:51:46.603 DEBUG 10432 --- [http-nio-8080-exec-6] c.b.m.B.getBlogIsRecommend_COUNT         : <==      Total: 1
2020-04-17 00:51:46.604 DEBUG 10432 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? LIMIT ? 
2020-04-17 00:51:46.604 DEBUG 10432 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer), 100(Integer)
2020-04-17 00:51:47.083  INFO 10432 --- [http-nio-8080-exec-6] com.by.controller.IndexController        : IndexController--newBlogs:
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'LIMIT 100' at line 1
### The error may exist in file [F:\Project\blog\target\classes\mapper\BlogMapper.xml]
### The error may involve com.by.mapper.BlogMapper.getBlogIsRecommend-Inline
### The error occurred while setting parameters
### SQL: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? LIMIT ?
### Cause: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'LIMIT 100' at line 1
; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'LIMIT 100' at line 1
2020-04-17 00:51:47.083  INFO 10432 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 00:51:47.083  INFO 10432 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 00:51:55.694  INFO 10432 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 00:51:55.698 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 00:51:55.698 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 00:51:55.699 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 00:51:55.700 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 00:51:55.700 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 00:51:55.702 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 00:51:55.703 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 00:51:55.703 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 00:51:55.705 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 00:51:55.706 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 00:51:55.706 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 00:51:55.708 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 00:51:55.709 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 00:51:55.709 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 00:51:55.710 DEBUG 10432 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 00:51:55.711  INFO 10432 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 00:51:55.711  INFO 10432 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : Result : index
2020-04-17 00:52:08.381  INFO 10432 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 00:52:08.382 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 00:52:08.383 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 00:52:08.384 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 00:52:08.385  INFO 10432 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 00:52:08.385  INFO 10432 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 00:52:26.131 DEBUG 10432 --- [http-nio-8080-exec-5] com.by.mapper.UserMapper.checkUser       : ==>  Preparing: select * from t_user where user_name = ? and pass_word = ? 
2020-04-17 00:52:26.132 DEBUG 10432 --- [http-nio-8080-exec-5] com.by.mapper.UserMapper.checkUser       : ==> Parameters: zhouboyang(String), 96e79218965eb72c92a549dd5a330112(String)
2020-04-17 00:52:26.133 DEBUG 10432 --- [http-nio-8080-exec-5] com.by.mapper.UserMapper.checkUser       : <==      Total: 1
2020-04-17 00:52:32.549 ERROR 10432 --- [http-nio-8080-exec-9] c.by.handler.ControllerExceptionHandler  : Request URL : http://localhost:8080/admin/login,Exception : {}

org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:213) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:422) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:367) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:110) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:59) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:395) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1234) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1016) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943) ~[spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006) [spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898) [spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883) [spring-webmvc-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) [spring-web-5.2.5.RELEASE.jar:5.2.5.RELEASE]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_231]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_231]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.33.jar:9.0.33]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_231]

2020-04-17 00:52:42.618 DEBUG 10432 --- [http-nio-8080-exec-1] com.by.mapper.UserMapper.checkUser       : ==>  Preparing: select * from t_user where user_name = ? and pass_word = ? 
2020-04-17 00:52:42.619 DEBUG 10432 --- [http-nio-8080-exec-1] com.by.mapper.UserMapper.checkUser       : ==> Parameters: zhouboyang(String), 96e79218965eb72c92a549dd5a330112(String)
2020-04-17 00:52:42.621 DEBUG 10432 --- [http-nio-8080-exec-1] com.by.mapper.UserMapper.checkUser       : <==      Total: 1
2020-04-17 00:52:45.270 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id 
2020-04-17 00:52:45.271 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 00:52:45.272 DEBUG 10432 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 00:52:45.273 DEBUG 10432 --- [http-nio-8080-exec-9] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id order by b.update_time desc LIMIT ? 
2020-04-17 00:52:45.273 DEBUG 10432 --- [http-nio-8080-exec-9] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 00:52:45.274 DEBUG 10432 --- [http-nio-8080-exec-9] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 00:52:45.276 DEBUG 10432 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 00:52:45.276 DEBUG 10432 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 00:52:45.277 DEBUG 10432 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 00:59:14.349  INFO 10432 --- [http-nio-8080-exec-4] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 00:59:14.443 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 00:59:14.444 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 00:59:14.445 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 00:59:14.446 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 00:59:14.446 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 00:59:14.447 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 00:59:14.449 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 00:59:14.449 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 00:59:14.450 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 00:59:14.451 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 00:59:14.451 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 00:59:14.452 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 00:59:14.453 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 00:59:14.454 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 00:59:14.455 DEBUG 10432 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 00:59:14.456  INFO 10432 --- [http-nio-8080-exec-4] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 00:59:14.456  INFO 10432 --- [http-nio-8080-exec-4] com.by.aspect.LogAspect                  : Result : index
2020-04-17 00:59:20.889  INFO 10432 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 00:59:20.890 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 00:59:20.891 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 00:59:20.892 DEBUG 10432 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 00:59:20.893  INFO 10432 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 00:59:20.894  INFO 10432 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 01:05:04.752  INFO 9708 --- [main] com.by.BlogApplication                   : Starting BlogApplication on SD-20190630IDLV with PID 9708 (F:\Project\blog\target\classes started by Administrator in F:\Project\blog)
2020-04-17 01:05:04.784 DEBUG 9708 --- [main] com.by.BlogApplication                   : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 01:05:04.785  INFO 9708 --- [main] com.by.BlogApplication                   : The following profiles are active: dev
2020-04-17 01:05:08.938  INFO 9708 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-17 01:05:08.972  INFO 9708 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-17 01:05:08.972  INFO 9708 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-17 01:05:09.454  INFO 9708 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-17 01:05:09.454  INFO 9708 --- [main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4430 ms
2020-04-17 01:05:11.820  INFO 9708 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 01:05:11.995  INFO 9708 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 01:05:12.801  INFO 9708 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-17 01:05:12.805  INFO 9708 --- [main] com.by.BlogApplication                   : Started BlogApplication in 15.143 seconds (JVM running for 40.903)
2020-04-17 01:11:18.850  INFO 9708 --- [http-nio-8080-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1587011901,1587014773,1587017022; Hm_lpvt_38911ce56b435d67224d876856bc0eb0=1587046402; monitor_count=1648; JSESSIONID=6893C6E807D501A2A9CB3A0C6BC99BB4] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-17 01:11:18.859  INFO 9708 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-17 01:11:18.859  INFO 9708 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-17 01:11:18.971  INFO 9708 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 111 ms
2020-04-17 01:11:53.772  INFO 9708 --- [http-nio-8080-exec-7] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 01:11:54.177 DEBUG 9708 --- [http-nio-8080-exec-7] com.by.mapper.UserMapper.checkUser       : ==>  Preparing: select * from t_user where user_name = ? and pass_word = ? 
2020-04-17 01:11:54.204 DEBUG 9708 --- [http-nio-8080-exec-7] com.by.mapper.UserMapper.checkUser       : ==> Parameters: zhouboyang(String), 96e79218965eb72c92a549dd5a330112(String)
2020-04-17 01:11:54.332 DEBUG 9708 --- [http-nio-8080-exec-7] com.by.mapper.UserMapper.checkUser       : <==      Total: 1
2020-04-17 01:15:48.604  INFO 3948 --- [main] com.by.BlogApplication                   : Starting BlogApplication on SD-20190630IDLV with PID 3948 (F:\Project\blog\target\classes started by Administrator in F:\Project\blog)
2020-04-17 01:15:48.611 DEBUG 3948 --- [main] com.by.BlogApplication                   : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 01:15:48.611  INFO 3948 --- [main] com.by.BlogApplication                   : The following profiles are active: dev
2020-04-17 01:15:52.913  INFO 3948 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-17 01:15:52.943  INFO 3948 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-17 01:15:52.944  INFO 3948 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-17 01:15:53.423  INFO 3948 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-17 01:15:53.423  INFO 3948 --- [main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4726 ms
2020-04-17 01:15:54.615  INFO 3948 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 01:15:54.748  INFO 3948 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 01:15:55.177  INFO 3948 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-17 01:15:55.181  INFO 3948 --- [main] com.by.BlogApplication                   : Started BlogApplication in 7.529 seconds (JVM running for 10.301)
2020-04-17 01:17:17.761  INFO 3948 --- [http-nio-8080-exec-3] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1587011901,1587014773,1587017022; Hm_lpvt_38911ce56b435d67224d876856bc0eb0=1587046402; monitor_count=1648; JSESSIONID=6DBC18EA7A18303904C31AF75E194C51] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-17 01:17:17.781  INFO 3948 --- [http-nio-8080-exec-3] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-17 01:17:17.781  INFO 3948 --- [http-nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-17 01:17:17.797  INFO 3948 --- [http-nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed initialization in 16 ms
2020-04-17 01:17:18.063  INFO 3948 --- [http-nio-8080-exec-3] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 01:17:18.445 DEBUG 3948 --- [http-nio-8080-exec-3] com.by.mapper.UserMapper.checkUser       : ==>  Preparing: select * from t_user where user_name = ? and pass_word = ? 
2020-04-17 01:17:18.506 DEBUG 3948 --- [http-nio-8080-exec-3] com.by.mapper.UserMapper.checkUser       : ==> Parameters: zhouboyang(String), 96e79218965eb72c92a549dd5a330112(String)
2020-04-17 01:17:18.637 DEBUG 3948 --- [http-nio-8080-exec-3] com.by.mapper.UserMapper.checkUser       : <==      Total: 1
2020-04-17 01:17:33.755 DEBUG 3948 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id 
2020-04-17 01:17:33.756 DEBUG 3948 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 01:17:34.079 DEBUG 3948 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 01:17:34.081 DEBUG 3948 --- [http-nio-8080-exec-2] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id order by b.update_time desc LIMIT ? 
2020-04-17 01:17:34.082 DEBUG 3948 --- [http-nio-8080-exec-2] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 01:17:34.396 DEBUG 3948 --- [http-nio-8080-exec-2] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 01:17:34.422 DEBUG 3948 --- [http-nio-8080-exec-2] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 01:17:34.422 DEBUG 3948 --- [http-nio-8080-exec-2] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 01:17:34.429 DEBUG 3948 --- [http-nio-8080-exec-2] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 01:17:38.071  INFO 3948 --- [http-nio-8080-exec-8] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 01:17:38.404 DEBUG 3948 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 01:17:38.404 DEBUG 3948 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 01:17:39.072 DEBUG 3948 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 01:17:39.073  INFO 3948 --- [http-nio-8080-exec-8] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 01:17:39.073  INFO 3948 --- [http-nio-8080-exec-8] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 01:18:06.121 DEBUG 3948 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_type 
2020-04-17 01:18:06.122 DEBUG 3948 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType_COUNT  : ==> Parameters: 
2020-04-17 01:18:06.123 DEBUG 3948 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType_COUNT  : <==      Total: 1
2020-04-17 01:18:06.124 DEBUG 3948 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type LIMIT ? 
2020-04-17 01:18:06.124 DEBUG 3948 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : ==> Parameters: 3(Integer)
2020-04-17 01:18:06.126 DEBUG 3948 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : <==      Total: 3
2020-04-17 01:18:09.055 DEBUG 3948 --- [http-nio-8080-exec-2] com.by.mapper.TagMapper.listTag_COUNT    : ==>  Preparing: SELECT count(0) FROM t_tag 
2020-04-17 01:18:09.055 DEBUG 3948 --- [http-nio-8080-exec-2] com.by.mapper.TagMapper.listTag_COUNT    : ==> Parameters: 
2020-04-17 01:18:09.154 DEBUG 3948 --- [http-nio-8080-exec-2] com.by.mapper.TagMapper.listTag_COUNT    : <==      Total: 1
2020-04-17 01:18:09.155 DEBUG 3948 --- [http-nio-8080-exec-2] com.by.mapper.TagMapper.listTag          : ==>  Preparing: select * from t_tag LIMIT ? 
2020-04-17 01:18:09.156 DEBUG 3948 --- [http-nio-8080-exec-2] com.by.mapper.TagMapper.listTag          : ==> Parameters: 3(Integer)
2020-04-17 01:18:09.157 DEBUG 3948 --- [http-nio-8080-exec-2] com.by.mapper.TagMapper.listTag          : <==      Total: 3
2020-04-17 01:18:11.642 DEBUG 3948 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id 
2020-04-17 01:18:11.643 DEBUG 3948 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 01:18:11.644 DEBUG 3948 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 01:18:11.646 DEBUG 3948 --- [http-nio-8080-exec-3] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id order by b.update_time desc LIMIT ? 
2020-04-17 01:18:11.646 DEBUG 3948 --- [http-nio-8080-exec-3] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 01:18:11.649 DEBUG 3948 --- [http-nio-8080-exec-3] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 01:18:11.650 DEBUG 3948 --- [http-nio-8080-exec-3] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 01:18:11.650 DEBUG 3948 --- [http-nio-8080-exec-3] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 01:18:11.654 DEBUG 3948 --- [http-nio-8080-exec-3] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 02:57:22.561  INFO 9532 --- [main] com.by.BlogApplicationTests              : Starting BlogApplicationTests on SD-20190630IDLV with PID 9532 (started by Administrator in F:\Project\blog)
2020-04-17 02:57:22.563 DEBUG 9532 --- [main] com.by.BlogApplicationTests              : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 02:57:22.563  INFO 9532 --- [main] com.by.BlogApplicationTests              : The following profiles are active: dev
2020-04-17 02:57:36.814  INFO 9532 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 02:57:37.145  INFO 9532 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 02:57:38.474  INFO 9532 --- [main] com.by.BlogApplicationTests              : Started BlogApplicationTests in 18.813 seconds (JVM running for 31.203)
2020-04-17 02:57:40.887  INFO 9532 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 02:57:41.841 DEBUG 9532 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? 
2020-04-17 02:57:41.940 DEBUG 9532 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 2(Long)
2020-04-17 02:57:42.262 DEBUG 9532 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 02:57:44.291  INFO 9532 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-17 02:57:44.295  INFO 9532 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closing ...
2020-04-17 02:57:44.591  INFO 9532 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-17 06:22:05.392  INFO 10516 --- [main] com.by.BlogApplication                   : Starting BlogApplication on SD-20190630IDLV with PID 10516 (F:\Project\blog\target\classes started by Administrator in F:\Project\blog)
2020-04-17 06:22:05.485 DEBUG 10516 --- [main] com.by.BlogApplication                   : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 06:22:05.485  INFO 10516 --- [main] com.by.BlogApplication                   : The following profiles are active: dev
2020-04-17 06:22:20.581  INFO 10516 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-17 06:22:20.737  INFO 10516 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-17 06:22:20.737  INFO 10516 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-17 06:22:21.891  INFO 10516 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-17 06:22:21.892  INFO 10516 --- [main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 14606 ms
2020-04-17 06:22:26.169  INFO 10516 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 06:22:26.436  INFO 10516 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 06:22:28.421  INFO 10516 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-17 06:22:28.431  INFO 10516 --- [main] com.by.BlogApplication                   : Started BlogApplication in 36.608 seconds (JVM running for 117.192)
2020-04-17 06:24:19.502  INFO 10516 --- [http-nio-8080-exec-3] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1587011901,1587014773,1587017022; Hm_lpvt_38911ce56b435d67224d876856bc0eb0=1587046402; monitor_count=1648; JSESSIONID=68D6E64AB9BE43F89592038BBC65A6A8] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-17 06:24:19.540  INFO 10516 --- [http-nio-8080-exec-3] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-17 06:24:19.540  INFO 10516 --- [http-nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-17 06:24:19.598  INFO 10516 --- [http-nio-8080-exec-3] o.s.web.servlet.DispatcherServlet        : Completed initialization in 57 ms
2020-04-17 06:24:19.927  INFO 10516 --- [http-nio-8080-exec-3] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 06:24:20.706  INFO 10516 --- [http-nio-8080-exec-3] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 06:24:22.280 DEBUG 10516 --- [http-nio-8080-exec-3] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 06:24:22.369 DEBUG 10516 --- [http-nio-8080-exec-3] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 06:24:22.865 DEBUG 10516 --- [http-nio-8080-exec-3] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 06:24:22.890 DEBUG 10516 --- [http-nio-8080-exec-3] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 06:24:22.891 DEBUG 10516 --- [http-nio-8080-exec-3] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 06:24:22.969 DEBUG 10516 --- [http-nio-8080-exec-3] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 06:24:22.977 DEBUG 10516 --- [http-nio-8080-exec-3] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 06:24:22.977 DEBUG 10516 --- [http-nio-8080-exec-3] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 06:24:22.980 DEBUG 10516 --- [http-nio-8080-exec-3] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 06:24:23.009 DEBUG 10516 --- [http-nio-8080-exec-3] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 06:24:23.009 DEBUG 10516 --- [http-nio-8080-exec-3] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 06:24:23.106 DEBUG 10516 --- [http-nio-8080-exec-3] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 06:24:23.140 DEBUG 10516 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 06:24:23.141 DEBUG 10516 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 06:24:23.144 DEBUG 10516 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 06:24:23.145  INFO 10516 --- [http-nio-8080-exec-3] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 06:24:23.145  INFO 10516 --- [http-nio-8080-exec-3] com.by.aspect.LogAspect                  : Result : index
2020-04-17 06:24:39.268  INFO 10516 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 06:24:39.270 DEBUG 10516 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 06:24:39.270 DEBUG 10516 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 06:24:39.309 DEBUG 10516 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 06:24:39.310  INFO 10516 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 06:24:39.454  INFO 10516 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 06:31:04.153  INFO 10516 --- [http-nio-8080-exec-2] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 06:31:04.279 DEBUG 10516 --- [http-nio-8080-exec-2] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 06:31:04.279 DEBUG 10516 --- [http-nio-8080-exec-2] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 06:31:04.281 DEBUG 10516 --- [http-nio-8080-exec-2] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 06:31:04.282 DEBUG 10516 --- [http-nio-8080-exec-2] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 06:31:04.282 DEBUG 10516 --- [http-nio-8080-exec-2] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 06:31:04.306 DEBUG 10516 --- [http-nio-8080-exec-2] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 06:31:04.308 DEBUG 10516 --- [http-nio-8080-exec-2] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 06:31:04.309 DEBUG 10516 --- [http-nio-8080-exec-2] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 06:31:04.311 DEBUG 10516 --- [http-nio-8080-exec-2] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 06:31:04.311 DEBUG 10516 --- [http-nio-8080-exec-2] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 06:31:04.312 DEBUG 10516 --- [http-nio-8080-exec-2] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 06:31:04.314 DEBUG 10516 --- [http-nio-8080-exec-2] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 06:31:04.315 DEBUG 10516 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 06:31:04.316 DEBUG 10516 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 06:31:04.318 DEBUG 10516 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 06:31:04.319  INFO 10516 --- [http-nio-8080-exec-2] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 06:31:04.319  INFO 10516 --- [http-nio-8080-exec-2] com.by.aspect.LogAspect                  : Result : index
2020-04-17 06:31:16.489  INFO 10516 --- [http-nio-8080-exec-9] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 06:31:16.491 DEBUG 10516 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 06:31:16.491 DEBUG 10516 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 06:31:16.493 DEBUG 10516 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 06:31:16.494  INFO 10516 --- [http-nio-8080-exec-9] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 06:31:16.495  INFO 10516 --- [http-nio-8080-exec-9] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 09:24:41.225  INFO 3608 --- [main] com.by.BlogApplication                   : Starting BlogApplication on SD-20190630IDLV with PID 3608 (F:\Project\blog\target\classes started by Administrator in F:\Project\blog)
2020-04-17 09:24:41.772 DEBUG 3608 --- [main] com.by.BlogApplication                   : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 09:24:41.772  INFO 3608 --- [main] com.by.BlogApplication                   : The following profiles are active: dev
2020-04-17 09:25:00.757  INFO 3608 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-17 09:25:00.846  INFO 3608 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-17 09:25:00.846  INFO 3608 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-17 09:25:01.759  INFO 3608 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-17 09:25:01.760  INFO 3608 --- [main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 17349 ms
2020-04-17 09:25:04.588  INFO 3608 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 09:25:04.803  INFO 3608 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 09:25:05.797  INFO 3608 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-17 09:25:05.802  INFO 3608 --- [main] com.by.BlogApplication                   : Started BlogApplication in 46.047 seconds (JVM running for 79.476)
2020-04-17 09:25:36.621  INFO 3608 --- [http-nio-8080-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1587011901,1587014773,1587017022; JSESSIONID=68D6E64AB9BE43F89592038BBC65A6A8; monitor_count=1655; Hm_lpvt_38911ce56b435d67224d876856bc0eb0=1587076587] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-17 09:25:36.652  INFO 3608 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-17 09:25:36.653  INFO 3608 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-17 09:25:36.672  INFO 3608 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 19 ms
2020-04-17 09:25:36.870  INFO 3608 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 09:25:37.291  INFO 3608 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 09:25:37.904 DEBUG 3608 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 09:25:37.999 DEBUG 3608 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 09:25:38.170 DEBUG 3608 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 09:25:38.172 DEBUG 3608 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 09:25:38.173 DEBUG 3608 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 09:25:38.192 DEBUG 3608 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 09:25:38.200 DEBUG 3608 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 09:25:38.201 DEBUG 3608 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 09:25:38.204 DEBUG 3608 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 09:25:38.210 DEBUG 3608 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 09:25:38.211 DEBUG 3608 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 09:25:38.316 DEBUG 3608 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 09:25:38.320 DEBUG 3608 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 09:25:38.321 DEBUG 3608 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 09:25:38.324 DEBUG 3608 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 09:25:38.325  INFO 3608 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 09:25:38.325  INFO 3608 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Result : index
2020-04-17 09:25:45.435  INFO 3608 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 09:25:45.437 DEBUG 3608 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 09:25:45.437 DEBUG 3608 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 09:25:45.440 DEBUG 3608 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 09:25:45.441  INFO 3608 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 09:25:45.442  INFO 3608 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 09:26:06.413  INFO 3608 --- [http-nio-8080-exec-7] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 09:26:06.417 DEBUG 3608 --- [http-nio-8080-exec-7] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 09:26:06.417 DEBUG 3608 --- [http-nio-8080-exec-7] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 09:26:06.418 DEBUG 3608 --- [http-nio-8080-exec-7] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 09:26:06.419 DEBUG 3608 --- [http-nio-8080-exec-7] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 09:26:06.420 DEBUG 3608 --- [http-nio-8080-exec-7] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 09:26:06.460 DEBUG 3608 --- [http-nio-8080-exec-7] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 09:26:06.462 DEBUG 3608 --- [http-nio-8080-exec-7] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 09:26:06.462 DEBUG 3608 --- [http-nio-8080-exec-7] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 09:26:06.464 DEBUG 3608 --- [http-nio-8080-exec-7] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 09:26:06.465 DEBUG 3608 --- [http-nio-8080-exec-7] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 09:26:06.465 DEBUG 3608 --- [http-nio-8080-exec-7] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 09:26:06.468 DEBUG 3608 --- [http-nio-8080-exec-7] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 09:26:06.469 DEBUG 3608 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 09:26:06.469 DEBUG 3608 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 09:26:06.472 DEBUG 3608 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 09:26:06.473  INFO 3608 --- [http-nio-8080-exec-7] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 09:26:06.474  INFO 3608 --- [http-nio-8080-exec-7] com.by.aspect.LogAspect                  : Result : index
2020-04-17 09:26:19.570  INFO 3608 --- [http-nio-8080-exec-3] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 09:26:19.572 DEBUG 3608 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 09:26:19.573 DEBUG 3608 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 09:26:19.574 DEBUG 3608 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 09:26:19.575  INFO 3608 --- [http-nio-8080-exec-3] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 09:26:19.576  INFO 3608 --- [http-nio-8080-exec-3] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 09:26:29.178  INFO 3608 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 09:26:29.181 DEBUG 3608 --- [http-nio-8080-exec-6] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 09:26:29.181 DEBUG 3608 --- [http-nio-8080-exec-6] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 09:26:29.182 DEBUG 3608 --- [http-nio-8080-exec-6] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 09:26:29.183 DEBUG 3608 --- [http-nio-8080-exec-6] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 09:26:29.184 DEBUG 3608 --- [http-nio-8080-exec-6] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 09:26:29.188 DEBUG 3608 --- [http-nio-8080-exec-6] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 09:26:29.189 DEBUG 3608 --- [http-nio-8080-exec-6] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 09:26:29.190 DEBUG 3608 --- [http-nio-8080-exec-6] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 09:26:29.192 DEBUG 3608 --- [http-nio-8080-exec-6] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 09:26:29.193 DEBUG 3608 --- [http-nio-8080-exec-6] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 09:26:29.193 DEBUG 3608 --- [http-nio-8080-exec-6] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 09:26:29.197 DEBUG 3608 --- [http-nio-8080-exec-6] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 09:26:29.199 DEBUG 3608 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 09:26:29.200 DEBUG 3608 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 09:26:29.202 DEBUG 3608 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 09:26:29.203  INFO 3608 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 09:26:29.203  INFO 3608 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : Result : index
2020-04-17 09:26:31.170  INFO 3608 --- [http-nio-8080-exec-8] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 09:26:31.172 DEBUG 3608 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 09:26:31.173 DEBUG 3608 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 09:26:31.175 DEBUG 3608 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 09:26:31.177  INFO 3608 --- [http-nio-8080-exec-8] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 09:26:31.177  INFO 3608 --- [http-nio-8080-exec-8] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 09:27:01.257  INFO 12104 --- [main] com.by.BlogApplication                   : Starting BlogApplication on SD-20190630IDLV with PID 12104 (F:\Project\blog\target\classes started by Administrator in F:\Project\blog)
2020-04-17 09:27:01.260 DEBUG 12104 --- [main] com.by.BlogApplication                   : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 09:27:01.261  INFO 12104 --- [main] com.by.BlogApplication                   : The following profiles are active: dev
2020-04-17 09:27:03.872  INFO 12104 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-17 09:27:03.883  INFO 12104 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-17 09:27:03.884  INFO 12104 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-17 09:27:04.049  INFO 12104 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-17 09:27:04.049  INFO 12104 --- [main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2704 ms
2020-04-17 09:27:05.172  INFO 12104 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 09:27:05.350  INFO 12104 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 09:27:05.773  INFO 12104 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-17 09:27:05.777  INFO 12104 --- [main] com.by.BlogApplication                   : Started BlogApplication in 5.291 seconds (JVM running for 6.679)
2020-04-17 09:28:03.290  INFO 12104 --- [http-nio-8080-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1587011901,1587014773,1587017022; JSESSIONID=68D6E64AB9BE43F89592038BBC65A6A8; monitor_count=1658; Hm_lpvt_38911ce56b435d67224d876856bc0eb0=1587086797] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-17 09:28:03.298  INFO 12104 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-17 09:28:03.299  INFO 12104 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-17 09:28:03.318  INFO 12104 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 19 ms
2020-04-17 09:28:03.355  INFO 12104 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 09:28:03.411  INFO 12104 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 09:28:03.679 DEBUG 12104 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 09:28:03.702 DEBUG 12104 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 09:28:03.876 DEBUG 12104 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 09:28:03.878 DEBUG 12104 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 09:28:03.879 DEBUG 12104 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 09:28:03.887 DEBUG 12104 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 09:28:03.895 DEBUG 12104 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 09:28:03.896 DEBUG 12104 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 09:28:03.898 DEBUG 12104 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 09:28:03.903 DEBUG 12104 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 09:28:03.904 DEBUG 12104 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 09:28:03.925 DEBUG 12104 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 09:28:03.929 DEBUG 12104 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 09:28:03.930 DEBUG 12104 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 09:28:03.933 DEBUG 12104 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 09:28:03.934  INFO 12104 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 09:28:03.934  INFO 12104 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Result : index
2020-04-17 09:28:05.636  INFO 12104 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 09:28:05.637 DEBUG 12104 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 09:28:05.638 DEBUG 12104 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 09:28:05.639 DEBUG 12104 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 09:28:05.640  INFO 12104 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 09:28:05.641  INFO 12104 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 09:30:48.726  INFO 11932 --- [main] com.by.BlogApplicationTests              : Starting BlogApplicationTests on SD-20190630IDLV with PID 11932 (started by Administrator in F:\Project\blog)
2020-04-17 09:30:48.728 DEBUG 11932 --- [main] com.by.BlogApplicationTests              : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 09:30:48.729  INFO 11932 --- [main] com.by.BlogApplicationTests              : The following profiles are active: dev
2020-04-17 09:31:13.614  INFO 11932 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 09:31:15.272  INFO 11932 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 09:31:21.230  INFO 11932 --- [main] com.by.BlogApplicationTests              : Started BlogApplicationTests in 47.064 seconds (JVM running for 87.67)
2020-04-17 09:31:40.885  INFO 11932 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 09:31:42.860 DEBUG 11932 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? 
2020-04-17 09:31:43.085 DEBUG 11932 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 2(Long)
2020-04-17 09:31:43.403 DEBUG 11932 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 09:39:27.655  INFO 13016 --- [main] com.by.BlogApplicationTests              : Starting BlogApplicationTests on SD-20190630IDLV with PID 13016 (started by Administrator in F:\Project\blog)
2020-04-17 09:39:27.658 DEBUG 13016 --- [main] com.by.BlogApplicationTests              : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 09:39:27.658  INFO 13016 --- [main] com.by.BlogApplicationTests              : The following profiles are active: dev
2020-04-17 09:39:40.098  INFO 13016 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 09:39:40.480  INFO 13016 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 09:39:42.808  INFO 13016 --- [main] com.by.BlogApplicationTests              : Started BlogApplicationTests in 28.359 seconds (JVM running for 65.735)
2020-04-17 09:39:48.369  INFO 13016 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 09:39:49.759 DEBUG 13016 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? 
2020-04-17 09:39:49.883 DEBUG 13016 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 2(Long)
2020-04-17 09:39:50.241 DEBUG 13016 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 09:39:50.857  INFO 13016 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-17 09:39:50.862  INFO 13016 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closing ...
2020-04-17 09:39:51.183  INFO 13016 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-17 09:41:38.346  INFO 12588 --- [main] com.by.BlogApplication                   : Starting BlogApplication on SD-20190630IDLV with PID 12588 (F:\Project\blog\target\classes started by Administrator in F:\Project\blog)
2020-04-17 09:41:38.582 DEBUG 12588 --- [main] com.by.BlogApplication                   : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 09:41:38.583  INFO 12588 --- [main] com.by.BlogApplication                   : The following profiles are active: dev
2020-04-17 09:41:40.807  INFO 12588 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-17 09:41:40.844  INFO 12588 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-17 09:41:40.844  INFO 12588 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-17 09:41:41.320  INFO 12588 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-17 09:41:41.320  INFO 12588 --- [main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2630 ms
2020-04-17 09:41:42.697  INFO 12588 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 09:41:42.846  INFO 12588 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 09:41:43.275  INFO 12588 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-17 09:41:43.279  INFO 12588 --- [main] com.by.BlogApplication                   : Started BlogApplication in 7.366 seconds (JVM running for 26.468)
2020-04-17 09:41:56.193  INFO 12588 --- [http-nio-8080-exec-7] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1587011901,1587014773,1587017022; JSESSIONID=68D6E64AB9BE43F89592038BBC65A6A8; monitor_count=1659; Hm_lpvt_38911ce56b435d67224d876856bc0eb0=1587086895] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-17 09:41:56.201  INFO 12588 --- [http-nio-8080-exec-7] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-17 09:41:56.202  INFO 12588 --- [http-nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-17 09:41:56.220  INFO 12588 --- [http-nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : Completed initialization in 18 ms
2020-04-17 09:41:56.257  INFO 12588 --- [http-nio-8080-exec-7] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 09:41:56.373  INFO 12588 --- [http-nio-8080-exec-7] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 09:41:56.794 DEBUG 12588 --- [http-nio-8080-exec-7] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 09:41:56.820 DEBUG 12588 --- [http-nio-8080-exec-7] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 09:41:56.918 DEBUG 12588 --- [http-nio-8080-exec-7] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 09:41:56.920 DEBUG 12588 --- [http-nio-8080-exec-7] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 09:41:56.921 DEBUG 12588 --- [http-nio-8080-exec-7] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 09:41:56.927 DEBUG 12588 --- [http-nio-8080-exec-7] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 09:41:56.934 DEBUG 12588 --- [http-nio-8080-exec-7] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 09:41:56.935 DEBUG 12588 --- [http-nio-8080-exec-7] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 09:41:56.938 DEBUG 12588 --- [http-nio-8080-exec-7] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 09:41:56.945 DEBUG 12588 --- [http-nio-8080-exec-7] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 09:41:56.946 DEBUG 12588 --- [http-nio-8080-exec-7] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 09:41:56.949 DEBUG 12588 --- [http-nio-8080-exec-7] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 09:41:56.953 DEBUG 12588 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 09:41:56.954 DEBUG 12588 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 09:41:56.956 DEBUG 12588 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 09:41:56.958  INFO 12588 --- [http-nio-8080-exec-7] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 09:41:56.958  INFO 12588 --- [http-nio-8080-exec-7] com.by.aspect.LogAspect                  : Result : index
2020-04-17 09:42:08.234  INFO 12588 --- [http-nio-8080-exec-2] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 09:42:08.236 DEBUG 12588 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 09:42:08.237 DEBUG 12588 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 09:42:08.240 DEBUG 12588 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 09:42:08.241  INFO 12588 --- [http-nio-8080-exec-2] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 09:42:08.242  INFO 12588 --- [http-nio-8080-exec-2] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 09:42:26.974  INFO 12588 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 09:42:26.978 DEBUG 12588 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 09:42:26.979 DEBUG 12588 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 09:42:26.981 DEBUG 12588 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 09:42:26.982 DEBUG 12588 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 09:42:26.983 DEBUG 12588 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 09:42:26.986 DEBUG 12588 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 09:42:26.988 DEBUG 12588 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 09:42:26.988 DEBUG 12588 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 09:42:26.990 DEBUG 12588 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 09:42:26.992 DEBUG 12588 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 09:42:26.992 DEBUG 12588 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 09:42:26.997 DEBUG 12588 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 09:42:26.999 DEBUG 12588 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 09:42:26.999 DEBUG 12588 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 09:42:27.002 DEBUG 12588 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 09:42:27.004  INFO 12588 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 09:42:27.005  INFO 12588 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Result : index
2020-04-17 09:42:27.545  INFO 12588 --- [http-nio-8080-exec-8] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 09:42:27.547 DEBUG 12588 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 09:42:27.547 DEBUG 12588 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 09:42:27.549 DEBUG 12588 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 09:42:27.552  INFO 12588 --- [http-nio-8080-exec-8] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 09:42:27.553  INFO 12588 --- [http-nio-8080-exec-8] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 09:55:07.550  INFO 12588 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 09:55:07.598 DEBUG 12588 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 09:55:07.598 DEBUG 12588 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 09:55:07.600 DEBUG 12588 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 09:55:07.601 DEBUG 12588 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 09:55:07.601 DEBUG 12588 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 09:55:07.606 DEBUG 12588 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 09:55:07.608 DEBUG 12588 --- [http-nio-8080-exec-5] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 09:55:07.609 DEBUG 12588 --- [http-nio-8080-exec-5] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 09:55:07.611 DEBUG 12588 --- [http-nio-8080-exec-5] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 09:55:07.612 DEBUG 12588 --- [http-nio-8080-exec-5] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 09:55:07.613 DEBUG 12588 --- [http-nio-8080-exec-5] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 09:55:07.616 DEBUG 12588 --- [http-nio-8080-exec-5] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 09:55:07.618 DEBUG 12588 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 09:55:07.618 DEBUG 12588 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 09:55:07.620 DEBUG 12588 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 09:55:07.622  INFO 12588 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 09:55:07.623  INFO 12588 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : Result : index
2020-04-17 09:55:19.827  INFO 12588 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 09:55:19.829 DEBUG 12588 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 09:55:19.829 DEBUG 12588 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 09:55:19.831 DEBUG 12588 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 09:55:19.832  INFO 12588 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 09:55:19.833  INFO 12588 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 09:59:38.551  INFO 12732 --- [main] com.by.BlogApplication                   : Starting BlogApplication on SD-20190630IDLV with PID 12732 (F:\Project\blog\target\classes started by Administrator in F:\Project\blog)
2020-04-17 09:59:38.791 DEBUG 12732 --- [main] com.by.BlogApplication                   : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 09:59:38.791  INFO 12732 --- [main] com.by.BlogApplication                   : The following profiles are active: dev
2020-04-17 09:59:42.314  INFO 12732 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-17 09:59:42.358  INFO 12732 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-17 09:59:42.359  INFO 12732 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-17 09:59:43.125  INFO 12732 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-17 09:59:43.125  INFO 12732 --- [main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4072 ms
2020-04-17 09:59:45.309  INFO 12732 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 09:59:45.427  INFO 12732 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 09:59:45.949  INFO 12732 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-17 09:59:45.954  INFO 12732 --- [main] com.by.BlogApplication                   : Started BlogApplication in 11.034 seconds (JVM running for 28.814)
2020-04-17 10:00:13.191  INFO 12732 --- [http-nio-8080-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1587011901,1587014773,1587017022; JSESSIONID=68D6E64AB9BE43F89592038BBC65A6A8; monitor_count=1663; Hm_lpvt_38911ce56b435d67224d876856bc0eb0=1587088526] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-17 10:00:13.200  INFO 12732 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-17 10:00:13.201  INFO 12732 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-17 10:00:13.222  INFO 12732 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 21 ms
2020-04-17 10:00:13.295  INFO 12732 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 10:00:13.609  INFO 12732 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 10:00:14.111 DEBUG 12732 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 10:00:14.263 DEBUG 12732 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 10:00:14.414 DEBUG 12732 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 10:00:14.416 DEBUG 12732 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 10:00:14.417 DEBUG 12732 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 10:00:14.424 DEBUG 12732 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 10:00:14.432 DEBUG 12732 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 10:00:14.433 DEBUG 12732 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 10:00:14.437 DEBUG 12732 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 10:00:14.442 DEBUG 12732 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 10:00:14.443 DEBUG 12732 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 10:00:14.506 DEBUG 12732 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 10:00:14.510 DEBUG 12732 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 10:00:14.510 DEBUG 12732 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 10:00:14.513 DEBUG 12732 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 10:00:14.515  INFO 12732 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 10:00:14.515  INFO 12732 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Result : index
2020-04-17 10:00:17.198  INFO 12732 --- [http-nio-8080-exec-3] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 10:00:17.200 DEBUG 12732 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 10:00:17.200 DEBUG 12732 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 10:00:17.202 DEBUG 12732 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 10:00:17.203  INFO 12732 --- [http-nio-8080-exec-3] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 10:00:17.203  INFO 12732 --- [http-nio-8080-exec-3] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 10:00:44.257  INFO 9788 --- [main] com.by.BlogApplication                   : Starting BlogApplication on SD-20190630IDLV with PID 9788 (F:\Project\blog\target\classes started by Administrator in F:\Project\blog)
2020-04-17 10:00:44.262 DEBUG 9788 --- [main] com.by.BlogApplication                   : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 10:00:44.262  INFO 9788 --- [main] com.by.BlogApplication                   : The following profiles are active: dev
2020-04-17 10:00:46.530  INFO 9788 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-17 10:00:46.540  INFO 9788 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-17 10:00:46.540  INFO 9788 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-17 10:00:46.670  INFO 9788 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-17 10:00:46.670  INFO 9788 --- [main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2305 ms
2020-04-17 10:00:47.679  INFO 9788 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 10:00:47.807  INFO 9788 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 10:00:48.206  INFO 9788 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-17 10:00:48.209  INFO 9788 --- [main] com.by.BlogApplication                   : Started BlogApplication in 4.845 seconds (JVM running for 6.701)
2020-04-17 10:00:51.622  INFO 9788 --- [http-nio-8080-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1587011901,1587014773,1587017022; JSESSIONID=68D6E64AB9BE43F89592038BBC65A6A8; monitor_count=1664; Hm_lpvt_38911ce56b435d67224d876856bc0eb0=1587088823] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-17 10:00:51.633  INFO 9788 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-17 10:00:51.634  INFO 9788 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-17 10:00:51.652  INFO 9788 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 18 ms
2020-04-17 10:00:51.690  INFO 9788 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 10:00:51.745  INFO 9788 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 10:00:52.013 DEBUG 9788 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 10:00:52.037 DEBUG 9788 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 10:00:52.096 DEBUG 9788 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 10:00:52.099 DEBUG 9788 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 10:00:52.099 DEBUG 9788 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 10:00:52.105 DEBUG 9788 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 10:00:52.114 DEBUG 9788 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 10:00:52.114 DEBUG 9788 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 10:00:52.117 DEBUG 9788 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 10:00:52.123 DEBUG 9788 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 10:00:52.124 DEBUG 9788 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 10:00:52.127 DEBUG 9788 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 10:00:52.131 DEBUG 9788 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 10:00:52.131 DEBUG 9788 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 10:00:52.134 DEBUG 9788 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 10:00:52.135  INFO 9788 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 10:00:52.136  INFO 9788 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Result : index
2020-04-17 10:00:53.754  INFO 9788 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 10:00:53.755 DEBUG 9788 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 10:00:53.755 DEBUG 9788 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 10:00:53.757 DEBUG 9788 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 10:00:53.759  INFO 9788 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 10:00:53.759  INFO 9788 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 10:01:23.939  INFO 9788 --- [http-nio-8080-exec-8] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 10:01:23.943 DEBUG 9788 --- [http-nio-8080-exec-8] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 10:01:23.944 DEBUG 9788 --- [http-nio-8080-exec-8] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 10:01:23.946 DEBUG 9788 --- [http-nio-8080-exec-8] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 10:01:23.948 DEBUG 9788 --- [http-nio-8080-exec-8] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 10:01:23.949 DEBUG 9788 --- [http-nio-8080-exec-8] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 10:01:23.954 DEBUG 9788 --- [http-nio-8080-exec-8] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 10:01:23.957 DEBUG 9788 --- [http-nio-8080-exec-8] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 10:01:23.958 DEBUG 9788 --- [http-nio-8080-exec-8] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 10:01:23.961 DEBUG 9788 --- [http-nio-8080-exec-8] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 10:01:23.963 DEBUG 9788 --- [http-nio-8080-exec-8] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 10:01:23.963 DEBUG 9788 --- [http-nio-8080-exec-8] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 10:01:23.967 DEBUG 9788 --- [http-nio-8080-exec-8] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 10:01:23.969 DEBUG 9788 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 10:01:23.969 DEBUG 9788 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 10:01:23.973 DEBUG 9788 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 10:01:23.975  INFO 9788 --- [http-nio-8080-exec-8] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 10:01:23.975  INFO 9788 --- [http-nio-8080-exec-8] com.by.aspect.LogAspect                  : Result : index
2020-04-17 10:01:24.509  INFO 9788 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 10:01:24.510 DEBUG 9788 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 10:01:24.510 DEBUG 9788 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 10:01:24.512 DEBUG 9788 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 10:01:24.513  INFO 9788 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 10:01:24.513  INFO 9788 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 10:03:37.939  INFO 10232 --- [main] com.by.BlogApplicationTests              : Starting BlogApplicationTests on SD-20190630IDLV with PID 10232 (started by Administrator in F:\Project\blog)
2020-04-17 10:03:37.941 DEBUG 10232 --- [main] com.by.BlogApplicationTests              : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 10:03:37.941  INFO 10232 --- [main] com.by.BlogApplicationTests              : The following profiles are active: dev
2020-04-17 10:04:00.446  INFO 10232 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 10:04:02.502  INFO 10232 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 10:04:10.127  INFO 10232 --- [main] com.by.BlogApplicationTests              : Started BlogApplicationTests in 33.806 seconds (JVM running for 40.737)
2020-04-17 10:04:40.871  INFO 10232 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 10:04:50.406 DEBUG 10232 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? 
2020-04-17 10:04:51.723 DEBUG 10232 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 2(Long)
2020-04-17 10:04:51.955 DEBUG 10232 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 10:04:58.835  INFO 10232 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-17 10:04:58.851  INFO 10232 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closing ...
2020-04-17 10:05:03.717  INFO 10232 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-17 10:35:27.373  INFO 4244 --- [main] com.by.BlogApplication                   : Starting BlogApplication on SD-20190630IDLV with PID 4244 (F:\Project\blog\target\classes started by Administrator in F:\Project\blog)
2020-04-17 10:35:27.470 DEBUG 4244 --- [main] com.by.BlogApplication                   : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 10:35:27.471  INFO 4244 --- [main] com.by.BlogApplication                   : The following profiles are active: dev
2020-04-17 10:35:38.695  INFO 4244 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-17 10:35:38.783  INFO 4244 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-17 10:35:38.784  INFO 4244 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-17 10:35:40.026  INFO 4244 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-17 10:35:40.026  INFO 4244 --- [main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 11188 ms
2020-04-17 10:35:42.434  INFO 4244 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 10:35:42.568  INFO 4244 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 10:35:43.235  INFO 4244 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-17 10:35:43.239  INFO 4244 --- [main] com.by.BlogApplication                   : Started BlogApplication in 20.354 seconds (JVM running for 43.181)
2020-04-17 10:36:29.862  INFO 4244 --- [http-nio-8080-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1587011901,1587014773,1587017022; JSESSIONID=68D6E64AB9BE43F89592038BBC65A6A8; monitor_count=1668; Hm_lpvt_38911ce56b435d67224d876856bc0eb0=1587089855] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-17 10:36:29.871  INFO 4244 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-17 10:36:29.872  INFO 4244 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-17 10:36:29.890  INFO 4244 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 18 ms
2020-04-17 10:36:29.959  INFO 4244 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 10:36:30.293  INFO 4244 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 10:36:30.760 DEBUG 4244 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 10:36:30.814 DEBUG 4244 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 10:36:30.964 DEBUG 4244 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 10:36:30.967 DEBUG 4244 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 10:36:30.968 DEBUG 4244 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 10:36:30.974 DEBUG 4244 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 10:36:30.982 DEBUG 4244 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 10:36:30.983 DEBUG 4244 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 10:36:30.985 DEBUG 4244 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 10:36:30.991 DEBUG 4244 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 10:36:30.992 DEBUG 4244 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 10:36:31.038 DEBUG 4244 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 10:36:31.043 DEBUG 4244 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 10:36:31.043 DEBUG 4244 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 10:36:31.046 DEBUG 4244 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 10:36:31.047  INFO 4244 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 10:36:31.048  INFO 4244 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Result : index
2020-04-17 10:36:31.757  WARN 4244 --- [http-nio-8080-exec-10] o.s.web.servlet.PageNotFound             : No mapping for GET /lib/prism/prism.css
2020-04-17 10:36:31.757  WARN 4244 --- [http-nio-8080-exec-9] o.s.web.servlet.PageNotFound             : No mapping for GET /css/animate.css
2020-04-17 10:36:31.757  WARN 4244 --- [http-nio-8080-exec-7] o.s.web.servlet.PageNotFound             : No mapping for GET /css/me.css
2020-04-17 10:36:31.758  WARN 4244 --- [http-nio-8080-exec-8] o.s.web.servlet.PageNotFound             : No mapping for GET /css/typo.css
2020-04-17 10:36:31.759  WARN 4244 --- [http-nio-8080-exec-2] o.s.web.servlet.PageNotFound             : No mapping for GET /lib/prism/tocbot.css
2020-04-17 10:36:32.436  WARN 4244 --- [http-nio-8080-exec-6] o.s.web.servlet.PageNotFound             : No mapping for GET /lib/tocbot/tocbot.min.js
2020-04-17 10:36:32.436  WARN 4244 --- [http-nio-8080-exec-5] o.s.web.servlet.PageNotFound             : No mapping for GET /lib/prism/prism.js
2020-04-17 10:36:32.437  WARN 4244 --- [http-nio-8080-exec-3] o.s.web.servlet.PageNotFound             : No mapping for GET /lib/qrcode/qrcode.min.js
2020-04-17 10:36:32.438  WARN 4244 --- [http-nio-8080-exec-4] o.s.web.servlet.PageNotFound             : No mapping for GET /lib/waypoints/jquery.waypoints.min.js
2020-04-17 10:36:42.188  WARN 4244 --- [http-nio-8080-exec-7] o.s.web.servlet.PageNotFound             : No mapping for GET /lib/prism/prism.js
2020-04-17 10:36:42.321  WARN 4244 --- [http-nio-8080-exec-3] o.s.web.servlet.PageNotFound             : No mapping for GET /lib/tocbot/tocbot.min.js
2020-04-17 10:36:42.331  WARN 4244 --- [http-nio-8080-exec-4] o.s.web.servlet.PageNotFound             : No mapping for GET /lib/qrcode/qrcode.min.js
2020-04-17 10:36:42.340  WARN 4244 --- [http-nio-8080-exec-6] o.s.web.servlet.PageNotFound             : No mapping for GET /lib/waypoints/jquery.waypoints.min.js
2020-04-17 10:36:42.459  INFO 4244 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 10:36:42.461 DEBUG 4244 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 10:36:42.462 DEBUG 4244 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 10:36:42.463 DEBUG 4244 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 10:36:42.464  INFO 4244 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 10:36:42.465  INFO 4244 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 10:37:52.091  INFO 4244 --- [http-nio-8080-exec-8] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 10:37:52.200 DEBUG 4244 --- [http-nio-8080-exec-8] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 10:37:52.200 DEBUG 4244 --- [http-nio-8080-exec-8] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 10:37:52.200 DEBUG 4244 --- [http-nio-8080-exec-8] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 10:37:52.200 DEBUG 4244 --- [http-nio-8080-exec-8] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 10:37:52.200 DEBUG 4244 --- [http-nio-8080-exec-8] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 10:37:52.200 DEBUG 4244 --- [http-nio-8080-exec-8] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 10:37:52.200 DEBUG 4244 --- [http-nio-8080-exec-8] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 10:37:52.200 DEBUG 4244 --- [http-nio-8080-exec-8] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 10:37:52.200 DEBUG 4244 --- [http-nio-8080-exec-8] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 10:37:52.200 DEBUG 4244 --- [http-nio-8080-exec-8] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 10:37:52.216 DEBUG 4244 --- [http-nio-8080-exec-8] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 10:37:52.216 DEBUG 4244 --- [http-nio-8080-exec-8] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 10:37:52.216 DEBUG 4244 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 10:37:52.216 DEBUG 4244 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 10:37:52.216 DEBUG 4244 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 10:37:52.216  INFO 4244 --- [http-nio-8080-exec-8] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 10:45:53.885  INFO 11112 --- [main] com.by.BlogApplication                   : Starting BlogApplication on SD-20190630IDLV with PID 11112 (F:\Project\blog\target\classes started by Administrator in F:\Project\blog)
2020-04-17 10:45:54.388 DEBUG 11112 --- [main] com.by.BlogApplication                   : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 10:45:54.388  INFO 11112 --- [main] com.by.BlogApplication                   : The following profiles are active: dev
2020-04-17 10:46:06.789  INFO 11112 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-17 10:46:06.831  INFO 11112 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-17 10:46:06.832  INFO 11112 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-17 10:46:07.278  INFO 11112 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-17 10:46:07.278  INFO 11112 --- [main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 11875 ms
2020-04-17 10:46:10.388  INFO 11112 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 10:46:10.814  INFO 11112 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 10:46:11.929  INFO 11112 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-17 10:46:11.933  INFO 11112 --- [main] com.by.BlogApplication                   : Started BlogApplication in 25.641 seconds (JVM running for 46.302)
2020-04-17 10:55:46.360  INFO 11112 --- [http-nio-8080-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1587011901,1587014773,1587017022; JSESSIONID=68D6E64AB9BE43F89592038BBC65A6A8; monitor_count=1669; Hm_lpvt_38911ce56b435d67224d876856bc0eb0=1587091008] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-17 10:55:46.423  INFO 11112 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-17 10:55:46.424  INFO 11112 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-17 10:55:46.445  INFO 11112 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 21 ms
2020-04-17 10:55:46.759  INFO 11112 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 10:55:47.275  INFO 11112 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 10:55:48.706 DEBUG 11112 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 10:55:48.806 DEBUG 11112 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 10:55:49.024 DEBUG 11112 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 10:55:49.049 DEBUG 11112 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 10:55:49.051 DEBUG 11112 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 10:55:49.056 DEBUG 11112 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 10:55:49.064 DEBUG 11112 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 10:55:49.065 DEBUG 11112 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 10:55:49.069 DEBUG 11112 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 10:55:49.100 DEBUG 11112 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 10:55:49.101 DEBUG 11112 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 10:55:49.187 DEBUG 11112 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 10:55:49.224 DEBUG 11112 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 10:55:49.224 DEBUG 11112 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 10:55:49.230 DEBUG 11112 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 10:55:49.231  INFO 11112 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 10:55:49.232  INFO 11112 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Result : index
2020-04-17 10:55:52.479  WARN 11112 --- [http-nio-8080-exec-2] o.s.web.servlet.PageNotFound             : No mapping for GET /lib/prism/tocbot.css
2020-04-17 10:55:52.479  WARN 11112 --- [http-nio-8080-exec-7] o.s.web.servlet.PageNotFound             : No mapping for GET /css/me.css
2020-04-17 10:55:52.479  WARN 11112 --- [http-nio-8080-exec-9] o.s.web.servlet.PageNotFound             : No mapping for GET /css/animate.css
2020-04-17 10:55:52.485  WARN 11112 --- [http-nio-8080-exec-10] o.s.web.servlet.PageNotFound             : No mapping for GET /lib/prism/prism.css
2020-04-17 10:55:52.479  WARN 11112 --- [http-nio-8080-exec-8] o.s.web.servlet.PageNotFound             : No mapping for GET /css/typo.css
2020-04-17 10:55:56.891  WARN 11112 --- [http-nio-8080-exec-5] o.s.web.servlet.PageNotFound             : No mapping for GET /lib/prism/prism.js
2020-04-17 10:55:56.897  WARN 11112 --- [http-nio-8080-exec-6] o.s.web.servlet.PageNotFound             : No mapping for GET /lib/waypoints/jquery.waypoints.min.js
2020-04-17 10:55:56.897  WARN 11112 --- [http-nio-8080-exec-3] o.s.web.servlet.PageNotFound             : No mapping for GET /lib/tocbot/tocbot.min.js
2020-04-17 10:55:56.934  WARN 11112 --- [http-nio-8080-exec-1] o.s.web.servlet.PageNotFound             : No mapping for GET /lib/qrcode/qrcode.min.js
2020-04-17 10:55:57.479  WARN 11112 --- [http-nio-8080-exec-4] o.s.web.servlet.PageNotFound             : No mapping for GET /lib/prism/prism.js
2020-04-17 10:55:57.517  WARN 11112 --- [http-nio-8080-exec-2] o.s.web.servlet.PageNotFound             : No mapping for GET /lib/tocbot/tocbot.min.js
2020-04-17 10:55:57.525  WARN 11112 --- [http-nio-8080-exec-7] o.s.web.servlet.PageNotFound             : No mapping for GET /lib/qrcode/qrcode.min.js
2020-04-17 10:55:57.536  WARN 11112 --- [http-nio-8080-exec-10] o.s.web.servlet.PageNotFound             : No mapping for GET /lib/waypoints/jquery.waypoints.min.js
2020-04-17 10:55:57.556  INFO 11112 --- [http-nio-8080-exec-3] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 10:55:57.557 DEBUG 11112 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 10:55:57.558 DEBUG 11112 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 10:55:57.560 DEBUG 11112 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 10:55:57.564  INFO 11112 --- [http-nio-8080-exec-3] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 10:55:57.565  INFO 11112 --- [http-nio-8080-exec-3] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 10:56:58.195  INFO 12836 --- [main] com.by.BlogApplication                   : Starting BlogApplication on SD-20190630IDLV with PID 12836 (F:\Project\blog\target\classes started by Administrator in F:\Project\blog)
2020-04-17 10:56:58.226 DEBUG 12836 --- [main] com.by.BlogApplication                   : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 10:56:58.226  INFO 12836 --- [main] com.by.BlogApplication                   : The following profiles are active: dev
2020-04-17 10:57:03.971  INFO 12836 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-17 10:57:04.026  INFO 12836 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-17 10:57:04.027  INFO 12836 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-17 10:57:04.680  INFO 12836 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-17 10:57:04.680  INFO 12836 --- [main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 6294 ms
2020-04-17 10:57:11.416  INFO 12836 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 10:57:11.709  INFO 12836 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 10:57:12.581  INFO 12836 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-17 10:57:12.652  INFO 12836 --- [main] com.by.BlogApplication                   : Started BlogApplication in 16.486 seconds (JVM running for 27.642)
2020-04-17 11:19:31.498  INFO 9804 --- [main] com.by.BlogApplication                   : Starting BlogApplication on SD-20190630IDLV with PID 9804 (F:\Project\blog\target\classes started by Administrator in F:\Project\blog)
2020-04-17 11:19:31.503 DEBUG 9804 --- [main] com.by.BlogApplication                   : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 11:19:31.505  INFO 9804 --- [main] com.by.BlogApplication                   : The following profiles are active: dev
2020-04-17 11:19:35.262  INFO 9804 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-17 11:19:35.295  INFO 9804 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-17 11:19:35.295  INFO 9804 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-17 11:19:35.462  INFO 9804 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-17 11:19:35.463  INFO 9804 --- [main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3837 ms
2020-04-17 11:19:38.300  INFO 9804 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 11:19:38.992  INFO 9804 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 11:19:42.278  INFO 9804 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-17 11:19:42.284  INFO 9804 --- [main] com.by.BlogApplication                   : Started BlogApplication in 12.007 seconds (JVM running for 15.987)
2020-04-17 11:21:22.189  INFO 9804 --- [http-nio-8080-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1587011901,1587014773,1587017022; JSESSIONID=68D6E64AB9BE43F89592038BBC65A6A8; monitor_count=1670; Hm_lpvt_38911ce56b435d67224d876856bc0eb0=1587092169] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-17 11:21:22.208  INFO 9804 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-17 11:21:22.208  INFO 9804 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-17 11:21:22.239  INFO 9804 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 31 ms
2020-04-17 11:21:22.317  INFO 9804 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 11:21:22.604  INFO 9804 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 11:21:23.091 DEBUG 9804 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 11:21:23.178 DEBUG 9804 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 11:21:23.317 DEBUG 9804 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 11:21:23.320 DEBUG 9804 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 11:21:23.321 DEBUG 9804 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 11:21:23.339 DEBUG 9804 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 11:21:23.349 DEBUG 9804 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 11:21:23.351 DEBUG 9804 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 11:21:23.351 DEBUG 9804 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 11:21:23.351 DEBUG 9804 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 11:21:23.351 DEBUG 9804 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 11:21:23.416 DEBUG 9804 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 11:21:23.416 DEBUG 9804 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 11:21:23.432 DEBUG 9804 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 11:21:23.435 DEBUG 9804 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 11:21:23.437  INFO 9804 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 11:21:23.437  INFO 9804 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Result : index
2020-04-17 11:21:33.792  INFO 9804 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 11:21:33.793 DEBUG 9804 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 11:21:33.794 DEBUG 9804 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 11:21:33.795 DEBUG 9804 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 11:21:33.797  INFO 9804 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 11:21:33.797  INFO 9804 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 11:21:54.095 DEBUG 9804 --- [http-nio-8080-exec-7] com.by.mapper.UserMapper.checkUser       : ==>  Preparing: select * from t_user where user_name = ? and pass_word = ? 
2020-04-17 11:21:54.096 DEBUG 9804 --- [http-nio-8080-exec-7] com.by.mapper.UserMapper.checkUser       : ==> Parameters: zhouboyang(String), 96e79218965eb72c92a549dd5a330112(String)
2020-04-17 11:21:54.174 DEBUG 9804 --- [http-nio-8080-exec-7] com.by.mapper.UserMapper.checkUser       : <==      Total: 1
2020-04-17 11:22:03.678 DEBUG 9804 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id 
2020-04-17 11:22:03.678 DEBUG 9804 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 11:22:03.679 DEBUG 9804 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 11:22:03.680 DEBUG 9804 --- [http-nio-8080-exec-3] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id order by b.update_time desc LIMIT ? 
2020-04-17 11:22:03.681 DEBUG 9804 --- [http-nio-8080-exec-3] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 11:22:03.718 DEBUG 9804 --- [http-nio-8080-exec-3] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 11:22:03.718 DEBUG 9804 --- [http-nio-8080-exec-3] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 11:22:03.718 DEBUG 9804 --- [http-nio-8080-exec-3] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 11:22:03.734 DEBUG 9804 --- [http-nio-8080-exec-3] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 11:22:05.085  INFO 9804 --- [http-nio-8080-exec-2] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 11:22:05.087 DEBUG 9804 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 11:22:05.087 DEBUG 9804 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 11:22:05.090 DEBUG 9804 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 11:22:05.091  INFO 9804 --- [http-nio-8080-exec-2] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 11:22:05.091  INFO 9804 --- [http-nio-8080-exec-2] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 11:22:08.646 DEBUG 9804 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 11:22:08.646 DEBUG 9804 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 11:22:08.648 DEBUG 9804 --- [http-nio-8080-exec-9] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 11:22:08.650 DEBUG 9804 --- [http-nio-8080-exec-9] com.by.mapper.TagMapper.listTag          : ==>  Preparing: select * from t_tag 
2020-04-17 11:22:08.651 DEBUG 9804 --- [http-nio-8080-exec-9] com.by.mapper.TagMapper.listTag          : ==> Parameters: 
2020-04-17 11:22:08.675 DEBUG 9804 --- [http-nio-8080-exec-9] com.by.mapper.TagMapper.listTag          : <==      Total: 8
2020-04-17 11:22:16.514 DEBUG 9804 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON b.type_id = t.id 
2020-04-17 11:22:16.514 DEBUG 9804 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogWithType_COUNT  : ==> Parameters: 
2020-04-17 11:22:16.516 DEBUG 9804 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.listBlogWithType_COUNT  : <==      Total: 1
2020-04-17 11:22:16.517 DEBUG 9804 --- [http-nio-8080-exec-6] c.by.mapper.BlogMapper.listBlogWithType  : ==>  Preparing: select b.id,b.title,b.update_time,b.recommend,b.published,t.id,t.name from t_blog b inner join t_type t on b.type_id = t.id order by b.update_time desc LIMIT ? 
2020-04-17 11:22:16.517 DEBUG 9804 --- [http-nio-8080-exec-6] c.by.mapper.BlogMapper.listBlogWithType  : ==> Parameters: 3(Integer)
2020-04-17 11:22:16.520 DEBUG 9804 --- [http-nio-8080-exec-6] c.by.mapper.BlogMapper.listBlogWithType  : <==      Total: 3
2020-04-17 11:22:16.522 DEBUG 9804 --- [http-nio-8080-exec-6] com.by.mapper.TypeMapper.listType        : ==>  Preparing: select * from t_type 
2020-04-17 11:22:16.524 DEBUG 9804 --- [http-nio-8080-exec-6] com.by.mapper.TypeMapper.listType        : ==> Parameters: 
2020-04-17 11:22:16.528 DEBUG 9804 --- [http-nio-8080-exec-6] com.by.mapper.TypeMapper.listType        : <==      Total: 5
2020-04-17 11:24:00.836  INFO 9804 --- [http-nio-8080-exec-2] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 11:24:00.884 DEBUG 9804 --- [http-nio-8080-exec-2] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 11:24:00.885 DEBUG 9804 --- [http-nio-8080-exec-2] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 11:24:00.887 DEBUG 9804 --- [http-nio-8080-exec-2] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 11:24:00.888 DEBUG 9804 --- [http-nio-8080-exec-2] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 11:24:00.888 DEBUG 9804 --- [http-nio-8080-exec-2] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 11:24:00.891 DEBUG 9804 --- [http-nio-8080-exec-2] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 11:24:00.893 DEBUG 9804 --- [http-nio-8080-exec-2] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 11:24:00.894 DEBUG 9804 --- [http-nio-8080-exec-2] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 11:24:00.896 DEBUG 9804 --- [http-nio-8080-exec-2] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 11:24:00.898 DEBUG 9804 --- [http-nio-8080-exec-2] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 11:24:00.898 DEBUG 9804 --- [http-nio-8080-exec-2] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 11:24:00.901 DEBUG 9804 --- [http-nio-8080-exec-2] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 11:24:00.904 DEBUG 9804 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 11:24:00.904 DEBUG 9804 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 11:24:00.906 DEBUG 9804 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 11:24:00.907  INFO 9804 --- [http-nio-8080-exec-2] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 11:24:00.907  INFO 9804 --- [http-nio-8080-exec-2] com.by.aspect.LogAspect                  : Result : index
2020-04-17 11:24:02.013  INFO 9804 --- [http-nio-8080-exec-4] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 11:24:02.015 DEBUG 9804 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 11:24:02.015 DEBUG 9804 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 11:24:02.017 DEBUG 9804 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 11:24:02.018  INFO 9804 --- [http-nio-8080-exec-4] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 11:24:02.018  INFO 9804 --- [http-nio-8080-exec-4] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 11:31:05.356  INFO 6988 --- [main] com.by.BlogApplicationTests              : Starting BlogApplicationTests on SD-20190630IDLV with PID 6988 (started by Administrator in F:\Project\blog)
2020-04-17 11:31:05.358 DEBUG 6988 --- [main] com.by.BlogApplicationTests              : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 11:31:05.358  INFO 6988 --- [main] com.by.BlogApplicationTests              : The following profiles are active: dev
2020-04-17 11:31:16.448  INFO 6988 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 11:31:16.937  INFO 6988 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 11:31:19.536  INFO 6988 --- [main] com.by.BlogApplicationTests              : Started BlogApplicationTests in 18.392 seconds (JVM running for 28.583)
2020-04-17 11:31:30.936  INFO 6988 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 11:31:32.343 DEBUG 6988 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? 
2020-04-17 11:31:32.419 DEBUG 6988 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 2(Long)
2020-04-17 11:31:32.777 DEBUG 6988 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 11:31:33.784  INFO 6988 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-17 11:31:33.784  INFO 6988 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closing ...
2020-04-17 11:31:33.959  INFO 6988 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-17 18:37:57.095  INFO 12844 --- [main] com.by.BlogApplicationTests              : Starting BlogApplicationTests on SD-20190630IDLV with PID 12844 (started by Administrator in F:\Project\blog)
2020-04-17 18:37:57.151 DEBUG 12844 --- [main] com.by.BlogApplicationTests              : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 18:37:57.152  INFO 12844 --- [main] com.by.BlogApplicationTests              : The following profiles are active: dev
2020-04-17 18:38:39.690  INFO 12844 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 18:38:43.190  INFO 12844 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 18:38:45.387  INFO 12844 --- [main] com.by.BlogApplicationTests              : Started BlogApplicationTests in 50.718 seconds (JVM running for 60.455)
2020-04-17 18:38:49.308  INFO 12844 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 18:38:50.762 DEBUG 12844 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? 
2020-04-17 18:38:50.961 DEBUG 12844 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 2(Long)
2020-04-17 18:38:51.134 DEBUG 12844 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 18:38:51.328  INFO 12844 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-17 18:38:51.331  INFO 12844 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closing ...
2020-04-17 18:38:52.010  INFO 12844 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-17 18:57:44.452  INFO 3828 --- [main] com.by.BlogApplication                   : Starting BlogApplication on SD-20190630IDLV with PID 3828 (F:\Project\blog\target\classes started by Administrator in F:\Project\blog)
2020-04-17 18:57:44.486 DEBUG 3828 --- [main] com.by.BlogApplication                   : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 18:57:44.486  INFO 3828 --- [main] com.by.BlogApplication                   : The following profiles are active: dev
2020-04-17 18:57:50.044  INFO 3828 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-17 18:57:50.056  INFO 3828 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-17 18:57:50.056  INFO 3828 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-17 18:57:50.322  INFO 3828 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-17 18:57:50.322  INFO 3828 --- [main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 5429 ms
2020-04-17 18:57:52.708  INFO 3828 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 18:57:52.936  INFO 3828 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 18:57:53.719  INFO 3828 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-17 18:57:53.723  INFO 3828 --- [main] com.by.BlogApplication                   : Started BlogApplication in 12.316 seconds (JVM running for 18.685)
2020-04-17 18:58:28.102  INFO 3828 --- [http-nio-8080-exec-7] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1587011901,1587014773,1587017022; JSESSIONID=A8275C8C5AA9D772C2664663C54EEC2B; monitor_count=1673; Hm_lpvt_38911ce56b435d67224d876856bc0eb0=1587093848] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-17 18:58:28.127  INFO 3828 --- [http-nio-8080-exec-7] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-17 18:58:28.127  INFO 3828 --- [http-nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-17 18:58:28.152  INFO 3828 --- [http-nio-8080-exec-7] o.s.web.servlet.DispatcherServlet        : Completed initialization in 25 ms
2020-04-17 18:58:28.265  INFO 3828 --- [http-nio-8080-exec-7] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 18:58:28.518  INFO 3828 --- [http-nio-8080-exec-7] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 18:58:29.172 DEBUG 3828 --- [http-nio-8080-exec-7] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 18:58:29.226 DEBUG 3828 --- [http-nio-8080-exec-7] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 18:58:29.337 DEBUG 3828 --- [http-nio-8080-exec-7] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 18:58:29.340 DEBUG 3828 --- [http-nio-8080-exec-7] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 18:58:29.342 DEBUG 3828 --- [http-nio-8080-exec-7] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 18:58:29.350 DEBUG 3828 --- [http-nio-8080-exec-7] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 18:58:29.362 DEBUG 3828 --- [http-nio-8080-exec-7] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 18:58:29.363 DEBUG 3828 --- [http-nio-8080-exec-7] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 18:58:29.366 DEBUG 3828 --- [http-nio-8080-exec-7] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 18:58:29.373 DEBUG 3828 --- [http-nio-8080-exec-7] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 18:58:29.375 DEBUG 3828 --- [http-nio-8080-exec-7] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 18:58:29.379 DEBUG 3828 --- [http-nio-8080-exec-7] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 18:58:29.388 DEBUG 3828 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 18:58:29.388 DEBUG 3828 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 18:58:29.395 DEBUG 3828 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 18:58:29.396  INFO 3828 --- [http-nio-8080-exec-7] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 18:58:29.397  INFO 3828 --- [http-nio-8080-exec-7] com.by.aspect.LogAspect                  : Result : index
2020-04-17 18:58:37.150  INFO 3828 --- [http-nio-8080-exec-7] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 18:58:37.151 DEBUG 3828 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 18:58:37.152 DEBUG 3828 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 18:58:37.154 DEBUG 3828 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 18:58:37.155  INFO 3828 --- [http-nio-8080-exec-7] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 18:58:37.156  INFO 3828 --- [http-nio-8080-exec-7] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 18:58:48.813  INFO 3828 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/types/-1, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.TypeShowController.types, args=[{}, 1, -1])
2020-04-17 18:58:48.818 DEBUG 3828 --- [http-nio-8080-exec-6] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 18:58:48.819 DEBUG 3828 --- [http-nio-8080-exec-6] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 18:58:48.821 DEBUG 3828 --- [http-nio-8080-exec-6] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 18:58:48.823 DEBUG 3828 --- [http-nio-8080-exec-6] c.by.mapper.BlogMapper.getBlogsByTypeId  : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true and b.type_id = ? order by b.update_time desc 
2020-04-17 18:58:48.824 DEBUG 3828 --- [http-nio-8080-exec-6] c.by.mapper.BlogMapper.getBlogsByTypeId  : ==> Parameters: 6(Long)
2020-04-17 18:58:48.916 DEBUG 3828 --- [http-nio-8080-exec-6] c.by.mapper.BlogMapper.getBlogsByTypeId  : <==      Total: 4
2020-04-17 18:58:48.955  INFO 3828 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 18:58:48.956  INFO 3828 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : Result : types
2020-04-17 18:58:49.484  INFO 3828 --- [http-nio-8080-exec-2] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 18:58:49.486 DEBUG 3828 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 18:58:49.486 DEBUG 3828 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 18:58:49.488 DEBUG 3828 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 18:58:49.489  INFO 3828 --- [http-nio-8080-exec-2] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 18:58:49.490  INFO 3828 --- [http-nio-8080-exec-2] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 18:58:51.683  INFO 3828 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 18:58:51.687 DEBUG 3828 --- [http-nio-8080-exec-6] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 18:58:51.688 DEBUG 3828 --- [http-nio-8080-exec-6] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 18:58:51.689 DEBUG 3828 --- [http-nio-8080-exec-6] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 18:58:51.691 DEBUG 3828 --- [http-nio-8080-exec-6] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 18:58:51.692 DEBUG 3828 --- [http-nio-8080-exec-6] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 18:58:51.697 DEBUG 3828 --- [http-nio-8080-exec-6] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 18:58:51.699 DEBUG 3828 --- [http-nio-8080-exec-6] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 18:58:51.700 DEBUG 3828 --- [http-nio-8080-exec-6] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 18:58:51.703 DEBUG 3828 --- [http-nio-8080-exec-6] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 18:58:51.704 DEBUG 3828 --- [http-nio-8080-exec-6] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 18:58:51.704 DEBUG 3828 --- [http-nio-8080-exec-6] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 18:58:51.709 DEBUG 3828 --- [http-nio-8080-exec-6] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 18:58:51.711 DEBUG 3828 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 18:58:51.711 DEBUG 3828 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 18:58:51.713 DEBUG 3828 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 18:58:51.714  INFO 3828 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 18:58:51.715  INFO 3828 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : Result : index
2020-04-17 18:58:52.167  INFO 3828 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 18:58:52.168 DEBUG 3828 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 18:58:52.169 DEBUG 3828 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 18:58:52.171 DEBUG 3828 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 18:58:52.172  INFO 3828 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 18:58:52.172  INFO 3828 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 19:05:55.415  INFO 1356 --- [main] com.by.BlogApplication                   : Starting BlogApplication on SD-20190630IDLV with PID 1356 (F:\Project\blog\target\classes started by Administrator in F:\Project\blog)
2020-04-17 19:05:55.474 DEBUG 1356 --- [main] com.by.BlogApplication                   : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 19:05:55.474  INFO 1356 --- [main] com.by.BlogApplication                   : The following profiles are active: dev
2020-04-17 19:06:04.381  INFO 1356 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-17 19:06:04.425  INFO 1356 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-17 19:06:04.426  INFO 1356 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-17 19:06:05.279  INFO 1356 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-17 19:06:05.280  INFO 1356 --- [main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 9284 ms
2020-04-17 19:06:07.828  INFO 1356 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 19:06:07.987  INFO 1356 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 19:06:08.598  INFO 1356 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-17 19:06:08.603  INFO 1356 --- [main] com.by.BlogApplication                   : Started BlogApplication in 21.091 seconds (JVM running for 40.159)
2020-04-17 19:07:10.138  INFO 1356 --- [http-nio-8080-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1587011901,1587014773,1587017022; JSESSIONID=A8275C8C5AA9D772C2664663C54EEC2B; monitor_count=1676; Hm_lpvt_38911ce56b435d67224d876856bc0eb0=1587121138] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-17 19:07:10.146  INFO 1356 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-17 19:07:10.146  INFO 1356 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-17 19:07:10.162  INFO 1356 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 16 ms
2020-04-17 19:07:10.235  INFO 1356 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 19:07:10.637  INFO 1356 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 19:07:11.172 DEBUG 1356 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 19:07:11.206 DEBUG 1356 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 19:07:11.362 DEBUG 1356 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 19:07:11.364 DEBUG 1356 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 19:07:11.365 DEBUG 1356 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 19:07:11.372 DEBUG 1356 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 19:07:11.387 DEBUG 1356 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 19:07:11.387 DEBUG 1356 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 19:07:11.387 DEBUG 1356 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 19:07:11.408 DEBUG 1356 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 19:07:11.409 DEBUG 1356 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 19:07:11.422 DEBUG 1356 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 19:07:11.422 DEBUG 1356 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 19:07:11.422 DEBUG 1356 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 19:07:11.422 DEBUG 1356 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 19:07:11.422  INFO 1356 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 19:07:11.422  INFO 1356 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Result : index
2020-04-17 19:07:13.115  INFO 1356 --- [http-nio-8080-exec-9] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 19:07:13.116 DEBUG 1356 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 19:07:13.117 DEBUG 1356 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 19:07:13.118 DEBUG 1356 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 19:07:13.120  INFO 1356 --- [http-nio-8080-exec-9] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 19:07:13.120  INFO 1356 --- [http-nio-8080-exec-9] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 19:10:42.676  INFO 11136 --- [main] com.by.BlogApplicationTests              : Starting BlogApplicationTests on SD-20190630IDLV with PID 11136 (started by Administrator in F:\Project\blog)
2020-04-17 19:10:42.679 DEBUG 11136 --- [main] com.by.BlogApplicationTests              : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 19:10:42.679  INFO 11136 --- [main] com.by.BlogApplicationTests              : The following profiles are active: dev
2020-04-17 19:10:55.815  INFO 11136 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 19:10:56.285  INFO 11136 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 19:11:01.082  INFO 11136 --- [main] com.by.BlogApplicationTests              : Started BlogApplicationTests in 19.626 seconds (JVM running for 25.458)
2020-04-17 19:11:04.764  INFO 11136 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 19:11:06.805 DEBUG 11136 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? 
2020-04-17 19:11:07.321 DEBUG 11136 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 2(Long)
2020-04-17 19:11:07.627 DEBUG 11136 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 19:11:08.494  INFO 11136 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-17 19:11:08.494  INFO 11136 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closing ...
2020-04-17 19:11:09.143  INFO 11136 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-17 19:59:35.553  INFO 6936 --- [main] com.by.BlogApplication                   : Starting BlogApplication on SD-20190630IDLV with PID 6936 (F:\Project\blog\target\classes started by Administrator in F:\Project\blog)
2020-04-17 19:59:35.584 DEBUG 6936 --- [main] com.by.BlogApplication                   : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 19:59:35.584  INFO 6936 --- [main] com.by.BlogApplication                   : The following profiles are active: dev
2020-04-17 19:59:40.117  INFO 6936 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-17 19:59:40.132  INFO 6936 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-17 19:59:40.132  INFO 6936 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-17 19:59:40.440  INFO 6936 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-17 19:59:40.440  INFO 6936 --- [main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4577 ms
2020-04-17 19:59:42.112  INFO 6936 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 19:59:42.456  INFO 6936 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 19:59:44.515  INFO 6936 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-17 19:59:44.515  INFO 6936 --- [main] com.by.BlogApplication                   : Started BlogApplication in 10.524 seconds (JVM running for 20.193)
2020-04-17 20:01:01.659  INFO 6936 --- [http-nio-8080-exec-6] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1587011901,1587014773,1587017022; JSESSIONID=A8275C8C5AA9D772C2664663C54EEC2B; monitor_count=1682; Hm_lpvt_38911ce56b435d67224d876856bc0eb0=1587124366] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-17 20:01:01.674  INFO 6936 --- [http-nio-8080-exec-6] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-17 20:01:01.674  INFO 6936 --- [http-nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-17 20:01:01.725  INFO 6936 --- [http-nio-8080-exec-6] o.s.web.servlet.DispatcherServlet        : Completed initialization in 51 ms
2020-04-17 20:01:01.827  INFO 6936 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 20:01:02.211  INFO 6936 --- [http-nio-8080-exec-6] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 20:01:03.178 DEBUG 6936 --- [http-nio-8080-exec-6] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 20:01:03.998 DEBUG 6936 --- [http-nio-8080-exec-6] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 20:01:05.038 DEBUG 6936 --- [http-nio-8080-exec-6] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 20:01:05.038 DEBUG 6936 --- [http-nio-8080-exec-6] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 20:01:05.038 DEBUG 6936 --- [http-nio-8080-exec-6] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 20:01:05.079 DEBUG 6936 --- [http-nio-8080-exec-6] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 20:01:05.087 DEBUG 6936 --- [http-nio-8080-exec-6] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 20:01:05.087 DEBUG 6936 --- [http-nio-8080-exec-6] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 20:01:05.091 DEBUG 6936 --- [http-nio-8080-exec-6] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 20:01:05.096 DEBUG 6936 --- [http-nio-8080-exec-6] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 20:01:05.097 DEBUG 6936 --- [http-nio-8080-exec-6] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 20:01:05.122 DEBUG 6936 --- [http-nio-8080-exec-6] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 20:01:05.127 DEBUG 6936 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 20:01:05.127 DEBUG 6936 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 20:01:05.130 DEBUG 6936 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 20:01:05.132  INFO 6936 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 20:01:05.132  INFO 6936 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : Result : index
2020-04-17 20:01:09.195  INFO 6936 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 20:01:09.196 DEBUG 6936 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 20:01:09.197 DEBUG 6936 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 20:01:09.199 DEBUG 6936 --- [http-nio-8080-exec-6] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 20:01:09.200  INFO 6936 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 20:01:09.201  INFO 6936 --- [http-nio-8080-exec-6] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 20:01:16.977  INFO 6936 --- [http-nio-8080-exec-2] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/blog/2, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.blog, args=[2, {}])
2020-04-17 20:01:16.980 DEBUG 6936 --- [http-nio-8080-exec-2] com.by.mapper.BlogMapper.updateViews     : ==>  Preparing: update t_blog set views = views+1 where id = ? 
2020-04-17 20:01:16.980 DEBUG 6936 --- [http-nio-8080-exec-2] com.by.mapper.BlogMapper.updateViews     : ==> Parameters: 2(Long)
2020-04-17 20:01:17.353 DEBUG 6936 --- [http-nio-8080-exec-2] com.by.mapper.BlogMapper.updateViews     : <==    Updates: 1
2020-04-17 20:01:17.354 DEBUG 6936 --- [http-nio-8080-exec-2] c.b.m.B.getBlogWithTagsAndWithUser       : ==>  Preparing: select b.id,b.title,b.flag,b.description,b.first_picture,b.views,b.update_time,b.content,b.commentabled,b.appreciation,b.share_statement,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id inner join t_user u on u.id = b.user_id where b.published = true and b.id = ? 
2020-04-17 20:01:17.354 DEBUG 6936 --- [http-nio-8080-exec-2] c.b.m.B.getBlogWithTagsAndWithUser       : ==> Parameters: 2(Long)
2020-04-17 20:01:17.379 DEBUG 6936 --- [http-nio-8080-exec-2] c.b.m.B.getBlogWithTagsAndWithUser       : <==      Total: 1
2020-04-17 20:01:17.678  INFO 6936 --- [http-nio-8080-exec-2] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 20:01:17.678  INFO 6936 --- [http-nio-8080-exec-2] com.by.aspect.LogAspect                  : Result : blog
2020-04-17 20:01:18.682  INFO 6936 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 20:01:18.684 DEBUG 6936 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 20:01:18.685 DEBUG 6936 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 20:01:18.707 DEBUG 6936 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 20:01:18.709  INFO 6936 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 20:01:18.709  INFO 6936 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 20:01:18.929  INFO 6936 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/comments/2, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.CommentController.comments, args=[2, {}])
2020-04-17 20:01:19.024 DEBUG 6936 --- [http-nio-8080-exec-5] c.b.m.C.findByBlogIdParentIdNull         : ==>  Preparing: select c.id ,c.nickname,c.email,c.content,c.avatar,c.create_time,c.blog_id,c.parent_comment_id,c.admincomment from blog.t_comment c where c.blog_id = ? and c.parent_comment_id is null order by c.create_time asc 
2020-04-17 20:01:19.024 DEBUG 6936 --- [http-nio-8080-exec-5] c.b.m.C.findByBlogIdParentIdNull         : ==> Parameters: 2(Long)
2020-04-17 20:01:19.262 DEBUG 6936 --- [http-nio-8080-exec-5] c.b.m.C.findByBlogIdParentIdNull         : <==      Total: 0
2020-04-17 20:01:19.265  INFO 6936 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 20:01:19.265  INFO 6936 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : Result : blog::commentList
2020-04-17 20:01:37.115  INFO 6936 --- [http-nio-8080-exec-10] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/blog/2, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.blog, args=[2, {}])
2020-04-17 20:01:37.117 DEBUG 6936 --- [http-nio-8080-exec-10] com.by.mapper.BlogMapper.updateViews     : ==>  Preparing: update t_blog set views = views+1 where id = ? 
2020-04-17 20:01:37.117 DEBUG 6936 --- [http-nio-8080-exec-10] com.by.mapper.BlogMapper.updateViews     : ==> Parameters: 2(Long)
2020-04-17 20:01:37.132 DEBUG 6936 --- [http-nio-8080-exec-10] com.by.mapper.BlogMapper.updateViews     : <==    Updates: 1
2020-04-17 20:01:37.133 DEBUG 6936 --- [http-nio-8080-exec-10] c.b.m.B.getBlogWithTagsAndWithUser       : ==>  Preparing: select b.id,b.title,b.flag,b.description,b.first_picture,b.views,b.update_time,b.content,b.commentabled,b.appreciation,b.share_statement,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id inner join t_user u on u.id = b.user_id where b.published = true and b.id = ? 
2020-04-17 20:01:37.133 DEBUG 6936 --- [http-nio-8080-exec-10] c.b.m.B.getBlogWithTagsAndWithUser       : ==> Parameters: 2(Long)
2020-04-17 20:01:37.135 DEBUG 6936 --- [http-nio-8080-exec-10] c.b.m.B.getBlogWithTagsAndWithUser       : <==      Total: 1
2020-04-17 20:01:37.179  INFO 6936 --- [http-nio-8080-exec-10] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 20:01:37.179  INFO 6936 --- [http-nio-8080-exec-10] com.by.aspect.LogAspect                  : Result : blog
2020-04-17 20:01:37.527  INFO 6936 --- [http-nio-8080-exec-7] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 20:01:37.529 DEBUG 6936 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 20:01:37.529 DEBUG 6936 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 20:01:37.532 DEBUG 6936 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 20:01:37.534  INFO 6936 --- [http-nio-8080-exec-7] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 20:01:37.534  INFO 6936 --- [http-nio-8080-exec-7] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 20:01:37.685  INFO 6936 --- [http-nio-8080-exec-8] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/comments/2, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.CommentController.comments, args=[2, {}])
2020-04-17 20:01:37.686 DEBUG 6936 --- [http-nio-8080-exec-8] c.b.m.C.findByBlogIdParentIdNull         : ==>  Preparing: select c.id ,c.nickname,c.email,c.content,c.avatar,c.create_time,c.blog_id,c.parent_comment_id,c.admincomment from blog.t_comment c where c.blog_id = ? and c.parent_comment_id is null order by c.create_time asc 
2020-04-17 20:01:37.687 DEBUG 6936 --- [http-nio-8080-exec-8] c.b.m.C.findByBlogIdParentIdNull         : ==> Parameters: 2(Long)
2020-04-17 20:01:37.689 DEBUG 6936 --- [http-nio-8080-exec-8] c.b.m.C.findByBlogIdParentIdNull         : <==      Total: 0
2020-04-17 20:01:37.690  INFO 6936 --- [http-nio-8080-exec-8] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 20:01:37.690  INFO 6936 --- [http-nio-8080-exec-8] com.by.aspect.LogAspect                  : Result : blog::commentList
2020-04-17 20:03:05.430  INFO 6936 --- [http-nio-8080-exec-3] com.by.aspect.LogAspect                  : Request : [FAILED toString()]
2020-04-17 20:03:05.573 DEBUG 6936 --- [http-nio-8080-exec-3] com.by.mapper.BlogMapper.updateViews     : ==>  Preparing: update t_blog set views = views+1 where id = ? 
2020-04-17 20:03:05.573 DEBUG 6936 --- [http-nio-8080-exec-3] com.by.mapper.BlogMapper.updateViews     : ==> Parameters: 2(Long)
2020-04-17 20:03:05.594 DEBUG 6936 --- [http-nio-8080-exec-3] com.by.mapper.BlogMapper.updateViews     : <==    Updates: 1
2020-04-17 20:03:05.595 DEBUG 6936 --- [http-nio-8080-exec-3] c.b.m.B.getBlogWithTagsAndWithUser       : ==>  Preparing: select b.id,b.title,b.flag,b.description,b.first_picture,b.views,b.update_time,b.content,b.commentabled,b.appreciation,b.share_statement,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id inner join t_user u on u.id = b.user_id where b.published = true and b.id = ? 
2020-04-17 20:03:05.596 DEBUG 6936 --- [http-nio-8080-exec-3] c.b.m.B.getBlogWithTagsAndWithUser       : ==> Parameters: 2(Long)
2020-04-17 20:03:05.598 DEBUG 6936 --- [http-nio-8080-exec-3] c.b.m.B.getBlogWithTagsAndWithUser       : <==      Total: 1
2020-04-17 20:03:05.647 DEBUG 6936 --- [http-nio-8080-exec-3] c.b.m.C.getCommentByParentId             : ==>  Preparing: select c.id,c.avatar,c.content,c.create_time,c.email,c.nickname,c.blog_id,c.parent_comment_id,c.admincomment from t_comment c where c.id = ? 
2020-04-17 20:03:05.648 DEBUG 6936 --- [http-nio-8080-exec-3] c.b.m.C.getCommentByParentId             : ==> Parameters: -1(Long)
2020-04-17 20:03:05.793 DEBUG 6936 --- [http-nio-8080-exec-3] c.b.m.C.getCommentByParentId             : <==      Total: 0
2020-04-17 20:03:05.794 DEBUG 6936 --- [http-nio-8080-exec-3] com.by.mapper.CommentMapper.saveComment  : ==>  Preparing: insert into blog.t_comment(avatar, content, create_time, email, nickname, blog_id, parent_comment_id,admincomment) values (?,?,?,?,?,?,?,?) 
2020-04-17 20:03:05.845 DEBUG 6936 --- [http-nio-8080-exec-3] com.by.mapper.CommentMapper.saveComment  : ==> Parameters: /images/Imgpicture/16.jpg(String), 发布评论(String), 2020-04-17 20:03:05.794(Timestamp), 2423623805@qq.com(String), loveright(String), 2(Long), null, false(Boolean)
2020-04-17 20:03:06.321 DEBUG 6936 --- [http-nio-8080-exec-3] com.by.mapper.CommentMapper.saveComment  : <==    Updates: 1
2020-04-17 20:03:06.398  INFO 6936 --- [http-nio-8080-exec-3] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 20:03:06.398  INFO 6936 --- [http-nio-8080-exec-3] com.by.aspect.LogAspect                  : Result : redirect:/comments/2
2020-04-17 20:03:06.441  INFO 6936 --- [http-nio-8080-exec-7] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/comments/2, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.CommentController.comments, args=[2, {}])
2020-04-17 20:03:06.441 DEBUG 6936 --- [http-nio-8080-exec-7] c.b.m.C.findByBlogIdParentIdNull         : ==>  Preparing: select c.id ,c.nickname,c.email,c.content,c.avatar,c.create_time,c.blog_id,c.parent_comment_id,c.admincomment from blog.t_comment c where c.blog_id = ? and c.parent_comment_id is null order by c.create_time asc 
2020-04-17 20:03:06.441 DEBUG 6936 --- [http-nio-8080-exec-7] c.b.m.C.findByBlogIdParentIdNull         : ==> Parameters: 2(Long)
2020-04-17 20:03:06.441 DEBUG 6936 --- [http-nio-8080-exec-7] c.b.m.C.findByBlogIdParentIdNull         : <==      Total: 1
2020-04-17 20:03:06.441 DEBUG 6936 --- [http-nio-8080-exec-7] c.b.m.C.getReplyListByParentId           : ==>  Preparing: select c.id,c.avatar,c.content,c.create_time,c.email,c.nickname,c.blog_id,c.parent_comment_id,c.admincomment from t_comment c where c.parent_comment_id = ? order by c.create_time asc 
2020-04-17 20:03:06.441 DEBUG 6936 --- [http-nio-8080-exec-7] c.b.m.C.getReplyListByParentId           : ==> Parameters: 1(Long)
2020-04-17 20:03:06.441 DEBUG 6936 --- [http-nio-8080-exec-7] c.b.m.C.getReplyListByParentId           : <==      Total: 0
2020-04-17 20:03:06.441  INFO 6936 --- [http-nio-8080-exec-7] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 20:03:06.441  INFO 6936 --- [http-nio-8080-exec-7] com.by.aspect.LogAspect                  : Result : blog::commentList
2020-04-17 20:40:02.424  INFO 6936 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 20:40:08.996 DEBUG 6936 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 20:40:09.962 DEBUG 6936 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 20:40:10.895 DEBUG 6936 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 20:40:11.326 DEBUG 6936 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 20:40:11.339 DEBUG 6936 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 20:40:11.979 DEBUG 6936 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 20:40:12.403 DEBUG 6936 --- [http-nio-8080-exec-5] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 20:40:12.403 DEBUG 6936 --- [http-nio-8080-exec-5] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 20:40:12.450 DEBUG 6936 --- [http-nio-8080-exec-5] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 20:40:12.528 DEBUG 6936 --- [http-nio-8080-exec-5] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 20:40:12.528 DEBUG 6936 --- [http-nio-8080-exec-5] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 20:40:12.597 DEBUG 6936 --- [http-nio-8080-exec-5] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 20:40:12.667 DEBUG 6936 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 20:40:12.667 DEBUG 6936 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 20:40:12.714 DEBUG 6936 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 20:40:12.745  INFO 6936 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 20:40:12.745  INFO 6936 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : Result : index
2020-04-17 20:40:17.103  INFO 6936 --- [http-nio-8080-exec-4] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 20:40:17.158 DEBUG 6936 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 20:40:17.159 DEBUG 6936 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 20:40:17.160 DEBUG 6936 --- [http-nio-8080-exec-4] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 20:40:17.161  INFO 6936 --- [http-nio-8080-exec-4] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 20:40:17.161  INFO 6936 --- [http-nio-8080-exec-4] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 21:10:04.243  INFO 2024 --- [main] com.by.BlogApplication                   : Starting BlogApplication on SD-20190630IDLV with PID 2024 (F:\Project\blog\target\classes started by Administrator in F:\Project\blog)
2020-04-17 21:10:04.274 DEBUG 2024 --- [main] com.by.BlogApplication                   : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 21:10:04.274  INFO 2024 --- [main] com.by.BlogApplication                   : The following profiles are active: dev
2020-04-17 21:10:10.875  INFO 2024 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-17 21:10:10.906  INFO 2024 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-17 21:10:10.922  INFO 2024 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-17 21:10:11.224  INFO 2024 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-17 21:10:11.224  INFO 2024 --- [main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 6637 ms
2020-04-17 21:10:13.302  INFO 2024 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 21:10:13.549  INFO 2024 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 21:10:14.457  INFO 2024 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-17 21:10:14.457  INFO 2024 --- [main] com.by.BlogApplication                   : Started BlogApplication in 13.222 seconds (JVM running for 21.696)
2020-04-17 21:10:59.318  INFO 2024 --- [http-nio-8080-exec-5] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1587014773,1587017022,1587127223; Hm_lpvt_38911ce56b435d67224d876856bc0eb0=1587127223; monitor_count=1689] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-17 21:10:59.367  INFO 2024 --- [http-nio-8080-exec-5] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-17 21:10:59.368  INFO 2024 --- [http-nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-17 21:10:59.433  INFO 2024 --- [http-nio-8080-exec-5] o.s.web.servlet.DispatcherServlet        : Completed initialization in 65 ms
2020-04-17 21:10:59.509  INFO 2024 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 21:10:59.785  INFO 2024 --- [http-nio-8080-exec-5] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 21:11:00.572 DEBUG 2024 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 21:11:00.659 DEBUG 2024 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 21:11:00.841 DEBUG 2024 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 21:11:00.844 DEBUG 2024 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 21:11:00.845 DEBUG 2024 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 21:11:00.850 DEBUG 2024 --- [http-nio-8080-exec-5] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 21:11:00.858 DEBUG 2024 --- [http-nio-8080-exec-5] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 21:11:00.859 DEBUG 2024 --- [http-nio-8080-exec-5] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 21:11:00.862 DEBUG 2024 --- [http-nio-8080-exec-5] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 21:11:00.868 DEBUG 2024 --- [http-nio-8080-exec-5] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 21:11:00.869 DEBUG 2024 --- [http-nio-8080-exec-5] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 21:11:00.912 DEBUG 2024 --- [http-nio-8080-exec-5] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 21:11:00.916 DEBUG 2024 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 21:11:00.917 DEBUG 2024 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 21:11:00.920 DEBUG 2024 --- [http-nio-8080-exec-5] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 21:11:00.922  INFO 2024 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 21:11:00.922  INFO 2024 --- [http-nio-8080-exec-5] com.by.aspect.LogAspect                  : Result : index
2020-04-17 21:11:03.074  INFO 2024 --- [http-nio-8080-exec-7] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 21:11:03.076 DEBUG 2024 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 21:11:03.077 DEBUG 2024 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 21:11:03.079 DEBUG 2024 --- [http-nio-8080-exec-7] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 21:11:03.080  INFO 2024 --- [http-nio-8080-exec-7] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 21:11:03.081  INFO 2024 --- [http-nio-8080-exec-7] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 21:11:09.535  INFO 2024 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/about, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.AboutShowController.about, args=[])
2020-04-17 21:11:09.538  INFO 2024 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 21:11:09.538  INFO 2024 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Result : about
2020-04-17 21:11:10.078  INFO 2024 --- [http-nio-8080-exec-8] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 21:11:10.079 DEBUG 2024 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 21:11:10.080 DEBUG 2024 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 21:11:10.082 DEBUG 2024 --- [http-nio-8080-exec-8] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 21:11:10.083  INFO 2024 --- [http-nio-8080-exec-8] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 21:11:10.083  INFO 2024 --- [http-nio-8080-exec-8] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 21:12:18.300  INFO 2204 --- [main] com.by.BlogApplication                   : Starting BlogApplication on SD-20190630IDLV with PID 2204 (F:\Project\blog\target\classes started by Administrator in F:\Project\blog)
2020-04-17 21:12:18.300 DEBUG 2204 --- [main] com.by.BlogApplication                   : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 21:12:18.300  INFO 2204 --- [main] com.by.BlogApplication                   : The following profiles are active: dev
2020-04-17 21:12:27.583  INFO 2204 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-17 21:12:27.661  INFO 2204 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-17 21:12:27.661  INFO 2204 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-17 21:12:28.393  INFO 2204 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-17 21:12:28.393  INFO 2204 --- [main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 9999 ms
2020-04-17 21:12:31.228  INFO 2204 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 21:12:31.444  INFO 2204 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 21:12:32.495  INFO 2204 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-17 21:12:32.495  INFO 2204 --- [main] com.by.BlogApplication                   : Started BlogApplication in 14.988 seconds (JVM running for 16.36)
2020-04-17 21:13:01.925  INFO 5456 --- [main] com.by.BlogApplication                   : Starting BlogApplication on SD-20190630IDLV with PID 5456 (F:\Project\blog\target\classes started by Administrator in F:\Project\blog)
2020-04-17 21:13:01.932 DEBUG 5456 --- [main] com.by.BlogApplication                   : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 21:13:01.933  INFO 5456 --- [main] com.by.BlogApplication                   : The following profiles are active: dev
2020-04-17 21:13:04.452  INFO 5456 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-04-17 21:13:04.463  INFO 5456 --- [main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-04-17 21:13:04.464  INFO 5456 --- [main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.33]
2020-04-17 21:13:04.783  INFO 5456 --- [main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-04-17 21:13:04.783  INFO 5456 --- [main] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2775 ms
2020-04-17 21:13:05.899  INFO 5456 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 21:13:06.058  INFO 5456 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 21:13:06.520  INFO 5456 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-04-17 21:13:06.520  INFO 5456 --- [main] com.by.BlogApplication                   : Started BlogApplication in 5.44 seconds (JVM running for 6.977)
2020-04-17 21:13:52.306  INFO 5456 --- [http-nio-8080-exec-1] o.apache.tomcat.util.http.parser.Cookie  : A cookie header was received [1587014773,1587017022,1587127223; monitor_count=1691; Hm_lpvt_38911ce56b435d67224d876856bc0eb0=1587129076] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2020-04-17 21:13:52.382  INFO 5456 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-04-17 21:13:52.383  INFO 5456 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-04-17 21:13:52.441  INFO 5456 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 58 ms
2020-04-17 21:13:52.591  INFO 5456 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 21:13:52.984  INFO 5456 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 21:13:53.724 DEBUG 5456 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 21:13:53.816 DEBUG 5456 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 21:13:53.980 DEBUG 5456 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 21:13:53.998 DEBUG 5456 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 21:13:53.999 DEBUG 5456 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 21:13:54.006 DEBUG 5456 --- [http-nio-8080-exec-1] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 21:13:54.016 DEBUG 5456 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 21:13:54.016 DEBUG 5456 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 21:13:54.019 DEBUG 5456 --- [http-nio-8080-exec-1] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 21:13:54.025 DEBUG 5456 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 21:13:54.026 DEBUG 5456 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 21:13:54.053 DEBUG 5456 --- [http-nio-8080-exec-1] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 21:13:54.057 DEBUG 5456 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 21:13:54.058 DEBUG 5456 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 21:13:54.061 DEBUG 5456 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 21:13:54.062  INFO 5456 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 21:13:54.063  INFO 5456 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Result : index
2020-04-17 21:13:59.894  INFO 5456 --- [http-nio-8080-exec-9] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 21:13:59.898 DEBUG 5456 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 21:13:59.899 DEBUG 5456 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 21:13:59.902 DEBUG 5456 --- [http-nio-8080-exec-9] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 21:13:59.905  INFO 5456 --- [http-nio-8080-exec-9] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 21:13:59.905  INFO 5456 --- [http-nio-8080-exec-9] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 21:14:05.476  INFO 5456 --- [http-nio-8080-exec-2] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.index, args=[{}, 1])
2020-04-17 21:14:05.481 DEBUG 5456 --- [http-nio-8080-exec-2] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==>  Preparing: SELECT count(0) FROM t_blog b INNER JOIN t_type t ON t.id = b.type_id INNER JOIN t_user u ON u.id = b.user_id WHERE b.published = true 
2020-04-17 21:14:05.481 DEBUG 5456 --- [http-nio-8080-exec-2] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : ==> Parameters: 
2020-04-17 21:14:05.483 DEBUG 5456 --- [http-nio-8080-exec-2] c.b.m.B.getBlogWithTypeAndWithUser_COUNT : <==      Total: 1
2020-04-17 21:14:05.484 DEBUG 5456 --- [http-nio-8080-exec-2] c.b.m.B.getBlogWithTypeAndWithUser       : ==>  Preparing: select b.id,b.title,b.description,b.first_picture,b.views,b.update_time,t.id tid,t.name tname, u.id uid,u.nickname,u.avatar from t_blog b inner join t_type t on t.id = b.type_id inner join t_user u on u.id = b.user_id where b.published = true order by b.update_time desc LIMIT ? 
2020-04-17 21:14:05.484 DEBUG 5456 --- [http-nio-8080-exec-2] c.b.m.B.getBlogWithTypeAndWithUser       : ==> Parameters: 3(Integer)
2020-04-17 21:14:05.487 DEBUG 5456 --- [http-nio-8080-exec-2] c.b.m.B.getBlogWithTypeAndWithUser       : <==      Total: 3
2020-04-17 21:14:05.489 DEBUG 5456 --- [http-nio-8080-exec-2] c.b.m.T.getTypeWithBlogsOrderTop         : ==>  Preparing: select t.id,t.name,b.id bid from t_type t inner join t_blog b on b.type_id = t.id where b.published = true 
2020-04-17 21:14:05.490 DEBUG 5456 --- [http-nio-8080-exec-2] c.b.m.T.getTypeWithBlogsOrderTop         : ==> Parameters: 
2020-04-17 21:14:05.492 DEBUG 5456 --- [http-nio-8080-exec-2] c.b.m.T.getTypeWithBlogsOrderTop         : <==      Total: 4
2020-04-17 21:14:05.492 DEBUG 5456 --- [http-nio-8080-exec-2] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==>  Preparing: select t.id,t.name,b.id bid from t_blog b inner join t_blog_tags bt on bt.blog_id = b.id inner join t_tag t on t.id = bt.tag_id where b.published = true 
2020-04-17 21:14:05.492 DEBUG 5456 --- [http-nio-8080-exec-2] c.b.m.TagMapper.getTagWithBlogsOrderTop  : ==> Parameters: 
2020-04-17 21:14:05.492 DEBUG 5456 --- [http-nio-8080-exec-2] c.b.m.TagMapper.getTagWithBlogsOrderTop  : <==      Total: 6
2020-04-17 21:14:05.492 DEBUG 5456 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 21:14:05.492 DEBUG 5456 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 8(Integer)
2020-04-17 21:14:05.492 DEBUG 5456 --- [http-nio-8080-exec-2] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 4
2020-04-17 21:14:05.492  INFO 5456 --- [http-nio-8080-exec-2] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 21:14:05.492  INFO 5456 --- [http-nio-8080-exec-2] com.by.aspect.LogAspect                  : Result : index
2020-04-17 21:14:06.162  INFO 5456 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 21:14:06.163 DEBUG 5456 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 21:14:06.164 DEBUG 5456 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 21:14:06.166 DEBUG 5456 --- [http-nio-8080-exec-1] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 21:14:06.168  INFO 5456 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 21:14:06.168  INFO 5456 --- [http-nio-8080-exec-1] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 21:14:14.732  INFO 5456 --- [http-nio-8080-exec-8] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/about, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.AboutShowController.about, args=[])
2020-04-17 21:14:14.736  INFO 5456 --- [http-nio-8080-exec-8] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 21:14:14.736  INFO 5456 --- [http-nio-8080-exec-8] com.by.aspect.LogAspect                  : Result : about
2020-04-17 21:14:15.220  INFO 5456 --- [http-nio-8080-exec-3] com.by.aspect.LogAspect                  : Request : RequestLog(url=http://localhost:8080/footer/newblog, ip=0:0:0:0:0:0:0:1, classMethod=com.by.controller.IndexController.newBlogs, args=[{}])
2020-04-17 21:14:15.222 DEBUG 5456 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.getBlogIsRecommend      : ==>  Preparing: select b.id,b.title from t_blog b where b.recommend = true and b.published = true order by b.update_time desc LIMIT 0,? 
2020-04-17 21:14:15.223 DEBUG 5456 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.getBlogIsRecommend      : ==> Parameters: 3(Integer)
2020-04-17 21:14:15.225 DEBUG 5456 --- [http-nio-8080-exec-3] c.b.m.BlogMapper.getBlogIsRecommend      : <==      Total: 3
2020-04-17 21:14:15.226  INFO 5456 --- [http-nio-8080-exec-3] com.by.aspect.LogAspect                  : ---doAfter----
2020-04-17 21:14:15.227  INFO 5456 --- [http-nio-8080-exec-3] com.by.aspect.LogAspect                  : Result : _fragments :: newblogList
2020-04-17 21:18:24.197  INFO 2012 --- [main] com.by.BlogApplicationTests              : Starting BlogApplicationTests on SD-20190630IDLV with PID 2012 (started by Administrator in F:\Project\blog)
2020-04-17 21:18:24.197 DEBUG 2012 --- [main] com.by.BlogApplicationTests              : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 21:18:24.197  INFO 2012 --- [main] com.by.BlogApplicationTests              : The following profiles are active: dev
2020-04-17 21:18:41.094  INFO 2012 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 21:18:41.641  INFO 2012 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 21:18:43.549  INFO 2012 --- [main] com.by.BlogApplicationTests              : Started BlogApplicationTests in 22.404 seconds (JVM running for 30.23)
2020-04-17 21:18:47.598  INFO 2012 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 21:18:49.440 DEBUG 2012 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? 
2020-04-17 21:18:49.534 DEBUG 2012 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 2(Long)
2020-04-17 21:18:49.659 DEBUG 2012 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 21:18:50.411  INFO 2012 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-17 21:18:50.411  INFO 2012 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closing ...
2020-04-17 21:18:50.614  INFO 2012 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-04-17 21:32:00.310  INFO 8600 --- [main] com.by.BlogApplicationTests              : Starting BlogApplicationTests on SD-20190630IDLV with PID 8600 (started by Administrator in F:\Project\blog)
2020-04-17 21:32:00.356 DEBUG 8600 --- [main] com.by.BlogApplicationTests              : Running with Spring Boot v2.2.6.RELEASE, Spring v5.2.5.RELEASE
2020-04-17 21:32:00.356  INFO 8600 --- [main] com.by.BlogApplicationTests              : The following profiles are active: dev
2020-04-17 21:32:20.040  INFO 8600 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-04-17 21:32:20.693  INFO 8600 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-04-17 21:32:24.744  INFO 8600 --- [main] com.by.BlogApplicationTests              : Started BlogApplicationTests in 28.262 seconds (JVM running for 38.088)
2020-04-17 21:32:30.467  INFO 8600 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-04-17 21:32:31.585 DEBUG 8600 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==>  Preparing: select b.id,b.description,b.appreciation,b.commentabled,b.content, b.create_time,b.first_picture,b.flag,b.published,b.recommend,b.share_statement, b.title,b.update_time,b.views,t.id typeid,t.name typename,tag.id tagid,tag.name tagname from t_blog b inner join t_type t on b.type_id = t.id inner join t_blog_tags tbt on tbt.blog_id = b.id inner join t_tag tag on tag.id = tbt.tag_id where b.id = ? 
2020-04-17 21:32:31.679 DEBUG 8600 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : ==> Parameters: 2(Long)
2020-04-17 21:32:31.788 DEBUG 8600 --- [main] c.b.m.B.getBlogWithTypeWitnTagsByBlogId  : <==      Total: 1
2020-04-17 21:32:32.108  INFO 8600 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-04-17 21:32:32.108  INFO 8600 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closing ...
2020-04-17 21:32:32.358  INFO 8600 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
